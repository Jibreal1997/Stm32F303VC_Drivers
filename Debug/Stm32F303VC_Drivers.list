
Stm32F303VC_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dc0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08001f60  08001f60  00011f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020d0  080020d0  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080020d0  080020d0  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080020d0  080020d0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020d0  080020d0  000120d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020d4  080020d4  000120d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080020d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000064  0800213c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  0800213c  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003304  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000905  00000000  00000000  00023398  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000260  00000000  00000000  00023ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000208  00000000  00000000  00023f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000032ef  00000000  00000000  00024108  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000206b  00000000  00000000  000273f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000affb  00000000  00000000  00029462  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003445d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000101c  00000000  00000000  000344d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001f48 	.word	0x08001f48

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08001f48 	.word	0x08001f48

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <GPIO_PeriClockControl>:
 * @Parameters: GPIO port address , Enable or Disable Value
 * @Return: NONE
 */
// Peripheral clock control
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t ENorDI)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	460b      	mov	r3, r1
 800029a:	70fb      	strb	r3, [r7, #3]
	// For Enable
	if(ENorDI == ENABLE)
 800029c:	78fb      	ldrb	r3, [r7, #3]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d141      	bne.n	8000326 <GPIO_PeriClockControl+0x96>
	{
		if(pGPIOx == GPIOA)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80002a8:	d106      	bne.n	80002b8 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80002aa:	4b42      	ldr	r3, [pc, #264]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	4a41      	ldr	r2, [pc, #260]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 80002b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002b4:	6153      	str	r3, [r2, #20]
			GPIOE_PCLK_DI();

		else if(pGPIOx == GPIOF)
			GPIOF_PCLK_DI();
	}
}
 80002b6:	e077      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOB)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	4a3f      	ldr	r2, [pc, #252]	; (80003b8 <GPIO_PeriClockControl+0x128>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d106      	bne.n	80002ce <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002c0:	4b3c      	ldr	r3, [pc, #240]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	4a3b      	ldr	r2, [pc, #236]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 80002c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002ca:	6153      	str	r3, [r2, #20]
}
 80002cc:	e06c      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOC)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	4a3a      	ldr	r2, [pc, #232]	; (80003bc <GPIO_PeriClockControl+0x12c>)
 80002d2:	4293      	cmp	r3, r2
 80002d4:	d106      	bne.n	80002e4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80002d6:	4b37      	ldr	r3, [pc, #220]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	4a36      	ldr	r2, [pc, #216]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 80002dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002e0:	6153      	str	r3, [r2, #20]
}
 80002e2:	e061      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOD)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	4a36      	ldr	r2, [pc, #216]	; (80003c0 <GPIO_PeriClockControl+0x130>)
 80002e8:	4293      	cmp	r3, r2
 80002ea:	d106      	bne.n	80002fa <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80002ec:	4b31      	ldr	r3, [pc, #196]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 80002ee:	695b      	ldr	r3, [r3, #20]
 80002f0:	4a30      	ldr	r2, [pc, #192]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 80002f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f6:	6153      	str	r3, [r2, #20]
}
 80002f8:	e056      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOE)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	4a31      	ldr	r2, [pc, #196]	; (80003c4 <GPIO_PeriClockControl+0x134>)
 80002fe:	4293      	cmp	r3, r2
 8000300:	d106      	bne.n	8000310 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000302:	4b2c      	ldr	r3, [pc, #176]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	4a2b      	ldr	r2, [pc, #172]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 8000308:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800030c:	6153      	str	r3, [r2, #20]
}
 800030e:	e04b      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOF)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	4a2d      	ldr	r2, [pc, #180]	; (80003c8 <GPIO_PeriClockControl+0x138>)
 8000314:	4293      	cmp	r3, r2
 8000316:	d147      	bne.n	80003a8 <GPIO_PeriClockControl+0x118>
			GPIOF_PCLK_EN();
 8000318:	4b26      	ldr	r3, [pc, #152]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a25      	ldr	r2, [pc, #148]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 800031e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000322:	6153      	str	r3, [r2, #20]
}
 8000324:	e040      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800032c:	d106      	bne.n	800033c <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 800032e:	4b21      	ldr	r3, [pc, #132]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	4a20      	ldr	r2, [pc, #128]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 8000334:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000338:	6153      	str	r3, [r2, #20]
}
 800033a:	e035      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOB)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	4a1e      	ldr	r2, [pc, #120]	; (80003b8 <GPIO_PeriClockControl+0x128>)
 8000340:	4293      	cmp	r3, r2
 8000342:	d106      	bne.n	8000352 <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 8000344:	4b1b      	ldr	r3, [pc, #108]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	4a1a      	ldr	r2, [pc, #104]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 800034a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800034e:	6153      	str	r3, [r2, #20]
}
 8000350:	e02a      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOC)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4a19      	ldr	r2, [pc, #100]	; (80003bc <GPIO_PeriClockControl+0x12c>)
 8000356:	4293      	cmp	r3, r2
 8000358:	d106      	bne.n	8000368 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 800035a:	4b16      	ldr	r3, [pc, #88]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	4a15      	ldr	r2, [pc, #84]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 8000360:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000364:	6153      	str	r3, [r2, #20]
}
 8000366:	e01f      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOD)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4a15      	ldr	r2, [pc, #84]	; (80003c0 <GPIO_PeriClockControl+0x130>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d106      	bne.n	800037e <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 8000370:	4b10      	ldr	r3, [pc, #64]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	4a0f      	ldr	r2, [pc, #60]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 8000376:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800037a:	6153      	str	r3, [r2, #20]
}
 800037c:	e014      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOE)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4a10      	ldr	r2, [pc, #64]	; (80003c4 <GPIO_PeriClockControl+0x134>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d106      	bne.n	8000394 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 8000386:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a0a      	ldr	r2, [pc, #40]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 800038c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000390:	6153      	str	r3, [r2, #20]
}
 8000392:	e009      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOF)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a0c      	ldr	r2, [pc, #48]	; (80003c8 <GPIO_PeriClockControl+0x138>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d105      	bne.n	80003a8 <GPIO_PeriClockControl+0x118>
			GPIOF_PCLK_DI();
 800039c:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	4a04      	ldr	r2, [pc, #16]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 80003a2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80003a6:	6153      	str	r3, [r2, #20]
}
 80003a8:	bf00      	nop
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr
 80003b4:	40021000 	.word	0x40021000
 80003b8:	48000400 	.word	0x48000400
 80003bc:	48000800 	.word	0x48000800
 80003c0:	48000c00 	.word	0x48000c00
 80003c4:	48001000 	.word	0x48001000
 80003c8:	48001400 	.word	0x48001400

080003cc <GPIO_Init>:
 * @Parameters: GPIO Handle Variable (provides access to user configurations and registers)
 * @Return: NONE
 */
// Initialize
void GPIO_Init(GPIO_Handle_t * pGPIOHandle)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b088      	sub	sp, #32
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;		// create a temporary variable
 80003d4:	2300      	movs	r3, #0
 80003d6:	61fb      	str	r3, [r7, #28]

	// Enabling the Peripheral Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2101      	movs	r1, #1
 80003de:	4618      	mov	r0, r3
 80003e0:	f7ff ff56 	bl	8000290 <GPIO_PeriClockControl>


	//1. Configure the mode of the GPIO pin

	// Checking for non-interrupt mode.
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	795b      	ldrb	r3, [r3, #5]
 80003e8:	2b03      	cmp	r3, #3
 80003ea:	d821      	bhi.n	8000430 <GPIO_Init+0x64>
	{
		// Aligning
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	795b      	ldrb	r3, [r3, #5]
 80003f0:	461a      	mov	r2, r3
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	791b      	ldrb	r3, [r3, #4]
 80003f6:	005b      	lsls	r3, r3, #1
 80003f8:	fa02 f303 	lsl.w	r3, r2, r3
 80003fc:	61fb      	str	r3, [r7, #28]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		// Clearing those bits before setting them
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	681a      	ldr	r2, [r3, #0]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	791b      	ldrb	r3, [r3, #4]
 8000408:	4619      	mov	r1, r3
 800040a:	2303      	movs	r3, #3
 800040c:	408b      	lsls	r3, r1
 800040e:	43db      	mvns	r3, r3
 8000410:	4619      	mov	r1, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	400a      	ands	r2, r1
 8000418:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;		// Setting
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	6819      	ldr	r1, [r3, #0]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	69fa      	ldr	r2, [r7, #28]
 8000426:	430a      	orrs	r2, r1
 8000428:	601a      	str	r2, [r3, #0]
		temp = 0;
 800042a:	2300      	movs	r3, #0
 800042c:	61fb      	str	r3, [r7, #28]
 800042e:	e0a1      	b.n	8000574 <GPIO_Init+0x1a8>

	// This is interrupt mode
	else
	{
		//1. Configure the RTSR , FTSR or both.
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FT)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	795b      	ldrb	r3, [r3, #5]
 8000434:	2b05      	cmp	r3, #5
 8000436:	d817      	bhi.n	8000468 <GPIO_Init+0x9c>
		{
			//FTSR
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000438:	4b9c      	ldr	r3, [pc, #624]	; (80006ac <GPIO_Init+0x2e0>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	7912      	ldrb	r2, [r2, #4]
 8000440:	4611      	mov	r1, r2
 8000442:	2201      	movs	r2, #1
 8000444:	408a      	lsls	r2, r1
 8000446:	4611      	mov	r1, r2
 8000448:	4a98      	ldr	r2, [pc, #608]	; (80006ac <GPIO_Init+0x2e0>)
 800044a:	430b      	orrs	r3, r1
 800044c:	60d3      	str	r3, [r2, #12]
			//Clear the RTSR
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800044e:	4b97      	ldr	r3, [pc, #604]	; (80006ac <GPIO_Init+0x2e0>)
 8000450:	689b      	ldr	r3, [r3, #8]
 8000452:	687a      	ldr	r2, [r7, #4]
 8000454:	7912      	ldrb	r2, [r2, #4]
 8000456:	4611      	mov	r1, r2
 8000458:	2201      	movs	r2, #1
 800045a:	408a      	lsls	r2, r1
 800045c:	43d2      	mvns	r2, r2
 800045e:	4611      	mov	r1, r2
 8000460:	4a92      	ldr	r2, [pc, #584]	; (80006ac <GPIO_Init+0x2e0>)
 8000462:	400b      	ands	r3, r1
 8000464:	6093      	str	r3, [r2, #8]
 8000466:	e035      	b.n	80004d4 <GPIO_Init+0x108>


		}

		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	795b      	ldrb	r3, [r3, #5]
 800046c:	2b04      	cmp	r3, #4
 800046e:	d817      	bhi.n	80004a0 <GPIO_Init+0xd4>
		{
			//RTSR
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000470:	4b8e      	ldr	r3, [pc, #568]	; (80006ac <GPIO_Init+0x2e0>)
 8000472:	689b      	ldr	r3, [r3, #8]
 8000474:	687a      	ldr	r2, [r7, #4]
 8000476:	7912      	ldrb	r2, [r2, #4]
 8000478:	4611      	mov	r1, r2
 800047a:	2201      	movs	r2, #1
 800047c:	408a      	lsls	r2, r1
 800047e:	4611      	mov	r1, r2
 8000480:	4a8a      	ldr	r2, [pc, #552]	; (80006ac <GPIO_Init+0x2e0>)
 8000482:	430b      	orrs	r3, r1
 8000484:	6093      	str	r3, [r2, #8]
			//Clear the FTSR
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000486:	4b89      	ldr	r3, [pc, #548]	; (80006ac <GPIO_Init+0x2e0>)
 8000488:	68db      	ldr	r3, [r3, #12]
 800048a:	687a      	ldr	r2, [r7, #4]
 800048c:	7912      	ldrb	r2, [r2, #4]
 800048e:	4611      	mov	r1, r2
 8000490:	2201      	movs	r2, #1
 8000492:	408a      	lsls	r2, r1
 8000494:	43d2      	mvns	r2, r2
 8000496:	4611      	mov	r1, r2
 8000498:	4a84      	ldr	r2, [pc, #528]	; (80006ac <GPIO_Init+0x2e0>)
 800049a:	400b      	ands	r3, r1
 800049c:	60d3      	str	r3, [r2, #12]
 800049e:	e019      	b.n	80004d4 <GPIO_Init+0x108>
		}

		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RFT)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	795b      	ldrb	r3, [r3, #5]
 80004a4:	2b06      	cmp	r3, #6
 80004a6:	d815      	bhi.n	80004d4 <GPIO_Init+0x108>
		{
			//FTSR and RTSR
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a8:	4b80      	ldr	r3, [pc, #512]	; (80006ac <GPIO_Init+0x2e0>)
 80004aa:	689b      	ldr	r3, [r3, #8]
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	7912      	ldrb	r2, [r2, #4]
 80004b0:	4611      	mov	r1, r2
 80004b2:	2201      	movs	r2, #1
 80004b4:	408a      	lsls	r2, r1
 80004b6:	4611      	mov	r1, r2
 80004b8:	4a7c      	ldr	r2, [pc, #496]	; (80006ac <GPIO_Init+0x2e0>)
 80004ba:	430b      	orrs	r3, r1
 80004bc:	6093      	str	r3, [r2, #8]
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004be:	4b7b      	ldr	r3, [pc, #492]	; (80006ac <GPIO_Init+0x2e0>)
 80004c0:	68db      	ldr	r3, [r3, #12]
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	7912      	ldrb	r2, [r2, #4]
 80004c6:	4611      	mov	r1, r2
 80004c8:	2201      	movs	r2, #1
 80004ca:	408a      	lsls	r2, r1
 80004cc:	4611      	mov	r1, r2
 80004ce:	4a77      	ldr	r2, [pc, #476]	; (80006ac <GPIO_Init+0x2e0>)
 80004d0:	430b      	orrs	r3, r1
 80004d2:	60d3      	str	r3, [r2, #12]
		}

		//2. Configure the GPIO port selection using SYSCFG_EXTICR
		uint32_t temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	791b      	ldrb	r3, [r3, #4]
 80004d8:	089b      	lsrs	r3, r3, #2
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	61bb      	str	r3, [r7, #24]
		uint32_t temp2 = (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4));
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	791b      	ldrb	r3, [r3, #4]
 80004e2:	f003 0303 	and.w	r3, r3, #3
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	617b      	str	r3, [r7, #20]
		uint32_t portcode = GPIO_BASEADDR_TO_PORTCODE(pGPIOHandle->pGPIOx);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80004f2:	d024      	beq.n	800053e <GPIO_Init+0x172>
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a6d      	ldr	r2, [pc, #436]	; (80006b0 <GPIO_Init+0x2e4>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d01d      	beq.n	800053a <GPIO_Init+0x16e>
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a6c      	ldr	r2, [pc, #432]	; (80006b4 <GPIO_Init+0x2e8>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d016      	beq.n	8000536 <GPIO_Init+0x16a>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a6a      	ldr	r2, [pc, #424]	; (80006b8 <GPIO_Init+0x2ec>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d00f      	beq.n	8000532 <GPIO_Init+0x166>
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a69      	ldr	r2, [pc, #420]	; (80006bc <GPIO_Init+0x2f0>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d008      	beq.n	800052e <GPIO_Init+0x162>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a67      	ldr	r2, [pc, #412]	; (80006c0 <GPIO_Init+0x2f4>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d101      	bne.n	800052a <GPIO_Init+0x15e>
 8000526:	2305      	movs	r3, #5
 8000528:	e00a      	b.n	8000540 <GPIO_Init+0x174>
 800052a:	2300      	movs	r3, #0
 800052c:	e008      	b.n	8000540 <GPIO_Init+0x174>
 800052e:	2304      	movs	r3, #4
 8000530:	e006      	b.n	8000540 <GPIO_Init+0x174>
 8000532:	2303      	movs	r3, #3
 8000534:	e004      	b.n	8000540 <GPIO_Init+0x174>
 8000536:	2302      	movs	r3, #2
 8000538:	e002      	b.n	8000540 <GPIO_Init+0x174>
 800053a:	2301      	movs	r3, #1
 800053c:	e000      	b.n	8000540 <GPIO_Init+0x174>
 800053e:	2300      	movs	r3, #0
 8000540:	613b      	str	r3, [r7, #16]
		SYSCFG_PCLK_EN();
 8000542:	4b60      	ldr	r3, [pc, #384]	; (80006c4 <GPIO_Init+0x2f8>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	4a5f      	ldr	r2, [pc, #380]	; (80006c4 <GPIO_Init+0x2f8>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6193      	str	r3, [r2, #24]
		SYSCFG->EXTICR[temp1] = (portcode << temp2);
 800054e:	495e      	ldr	r1, [pc, #376]	; (80006c8 <GPIO_Init+0x2fc>)
 8000550:	693a      	ldr	r2, [r7, #16]
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	409a      	lsls	r2, r3
 8000556:	69bb      	ldr	r3, [r7, #24]
 8000558:	3302      	adds	r3, #2
 800055a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


		//3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR1 |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800055e:	4b53      	ldr	r3, [pc, #332]	; (80006ac <GPIO_Init+0x2e0>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	687a      	ldr	r2, [r7, #4]
 8000564:	7912      	ldrb	r2, [r2, #4]
 8000566:	4611      	mov	r1, r2
 8000568:	2201      	movs	r2, #1
 800056a:	408a      	lsls	r2, r1
 800056c:	4611      	mov	r1, r2
 800056e:	4a4f      	ldr	r2, [pc, #316]	; (80006ac <GPIO_Init+0x2e0>)
 8000570:	430b      	orrs	r3, r1
 8000572:	6013      	str	r3, [r2, #0]


	}

	//2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	799b      	ldrb	r3, [r3, #6]
 8000578:	461a      	mov	r2, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	791b      	ldrb	r3, [r3, #4]
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	fa02 f303 	lsl.w	r3, r2, r3
 8000584:	61fb      	str	r3, [r7, #28]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		// Clearing those bits before setting them
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	689a      	ldr	r2, [r3, #8]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	791b      	ldrb	r3, [r3, #4]
 8000590:	4619      	mov	r1, r3
 8000592:	2303      	movs	r3, #3
 8000594:	408b      	lsls	r3, r1
 8000596:	43db      	mvns	r3, r3
 8000598:	4619      	mov	r1, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	400a      	ands	r2, r1
 80005a0:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;	//Setting
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	6899      	ldr	r1, [r3, #8]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	69fa      	ldr	r2, [r7, #28]
 80005ae:	430a      	orrs	r2, r1
 80005b0:	609a      	str	r2, [r3, #8]
	temp = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61fb      	str	r3, [r7, #28]

	//3. Configure the PUPD settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	79db      	ldrb	r3, [r3, #7]
 80005ba:	461a      	mov	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	791b      	ldrb	r3, [r3, #4]
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	fa02 f303 	lsl.w	r3, r2, r3
 80005c6:	61fb      	str	r3, [r7, #28]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		// Clearing those bits before setting them
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	68da      	ldr	r2, [r3, #12]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	791b      	ldrb	r3, [r3, #4]
 80005d2:	4619      	mov	r1, r3
 80005d4:	2303      	movs	r3, #3
 80005d6:	408b      	lsls	r3, r1
 80005d8:	43db      	mvns	r3, r3
 80005da:	4619      	mov	r1, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	400a      	ands	r2, r1
 80005e2:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;		//Setting
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	68d9      	ldr	r1, [r3, #12]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	69fa      	ldr	r2, [r7, #28]
 80005f0:	430a      	orrs	r2, r1
 80005f2:	60da      	str	r2, [r3, #12]
	temp = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61fb      	str	r3, [r7, #28]

	//4. Configure the OP Type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	7a1b      	ldrb	r3, [r3, #8]
 80005fc:	461a      	mov	r2, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	791b      	ldrb	r3, [r3, #4]
 8000602:	fa02 f303 	lsl.w	r3, r2, r3
 8000606:	61fb      	str	r3, [r7, #28]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		// Clearing those bits before setting them
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	685a      	ldr	r2, [r3, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	791b      	ldrb	r3, [r3, #4]
 8000612:	4619      	mov	r1, r3
 8000614:	2301      	movs	r3, #1
 8000616:	408b      	lsls	r3, r1
 8000618:	43db      	mvns	r3, r3
 800061a:	4619      	mov	r1, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	400a      	ands	r2, r1
 8000622:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;	//Setting
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	6859      	ldr	r1, [r3, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	69fa      	ldr	r2, [r7, #28]
 8000630:	430a      	orrs	r2, r1
 8000632:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	61fb      	str	r3, [r7, #28]

	//5. Configure the alternate function
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	795b      	ldrb	r3, [r3, #5]
 800063c:	2b02      	cmp	r3, #2
 800063e:	d131      	bne.n	80006a4 <GPIO_Init+0x2d8>
	{
		//configure the alternate function register mode
		uint32_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;	// Finding the register
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	791b      	ldrb	r3, [r3, #4]
 8000644:	08db      	lsrs	r3, r3, #3
 8000646:	b2db      	uxtb	r3, r3
 8000648:	60fb      	str	r3, [r7, #12]
		temp2 = 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8);	// Finding the right bit position
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	791b      	ldrb	r3, [r3, #4]
 800064e:	f003 0307 	and.w	r3, r3, #7
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << temp2);		// Clearing
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	68fa      	ldr	r2, [r7, #12]
 800065c:	3208      	adds	r2, #8
 800065e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000662:	210f      	movs	r1, #15
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	fa01 f303 	lsl.w	r3, r1, r3
 800066a:	43db      	mvns	r3, r3
 800066c:	4619      	mov	r1, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4011      	ands	r1, r2
 8000674:	68fa      	ldr	r2, [r7, #12]
 8000676:	3208      	adds	r2, #8
 8000678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << temp2);	// Setting
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	3208      	adds	r2, #8
 8000684:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	7a5b      	ldrb	r3, [r3, #9]
 800068c:	4619      	mov	r1, r3
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	fa01 f303 	lsl.w	r3, r1, r3
 8000694:	4619      	mov	r1, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4311      	orrs	r1, r2
 800069c:	68fa      	ldr	r2, [r7, #12]
 800069e:	3208      	adds	r2, #8
 80006a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 80006a4:	bf00      	nop
 80006a6:	3720      	adds	r7, #32
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40010400 	.word	0x40010400
 80006b0:	48000400 	.word	0x48000400
 80006b4:	48000800 	.word	0x48000800
 80006b8:	48000c00 	.word	0x48000c00
 80006bc:	48001000 	.word	0x48001000
 80006c0:	48001400 	.word	0x48001400
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40010000 	.word	0x40010000

080006cc <GPIO_ReadFromInputPin>:
 * @Parameters: GPIO port address, Pin Number
 * @Return: Value (which is 0 or 1 )
 */
// Data Read pin
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	460b      	mov	r3, r1
 80006d6:	70fb      	strb	r3, [r7, #3]
	uint8_t Value;
	Value = (uint8_t)(pGPIOx->IDR >> PinNumber) & 0x00000001;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	691a      	ldr	r2, [r3, #16]
 80006dc:	78fb      	ldrb	r3, [r7, #3]
 80006de:	fa22 f303 	lsr.w	r3, r2, r3
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	f003 0301 	and.w	r3, r3, #1
 80006e8:	73fb      	strb	r3, [r7, #15]
	return Value;
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <SPI_PeriClockControl>:
 * @Parameters: SPI peripheral address , Enable or Disable Value
 * @Return: NONE
 */
// SPI Clock
void SPI_PeriClockControl(SPI_RegDef_t * pSPIx, uint8_t ENorDI)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	70fb      	strb	r3, [r7, #3]
	// For Enable
	if(ENorDI == ENABLE)
 8000704:	78fb      	ldrb	r3, [r7, #3]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d120      	bne.n	800074c <SPI_PeriClockControl+0x54>
	{
		if(pSPIx == SPI1)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a22      	ldr	r2, [pc, #136]	; (8000798 <SPI_PeriClockControl+0xa0>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d106      	bne.n	8000720 <SPI_PeriClockControl+0x28>
			SPI1_PCLK_EN();
 8000712:	4b22      	ldr	r3, [pc, #136]	; (800079c <SPI_PeriClockControl+0xa4>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	4a21      	ldr	r2, [pc, #132]	; (800079c <SPI_PeriClockControl+0xa4>)
 8000718:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800071c:	6193      	str	r3, [r2, #24]
			SPI2_PCLK_DI();

		else if(pSPIx == SPI3)
			SPI3_PCLK_DI();
	}
}
 800071e:	e035      	b.n	800078c <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI2)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4a1f      	ldr	r2, [pc, #124]	; (80007a0 <SPI_PeriClockControl+0xa8>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d106      	bne.n	8000736 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000728:	4b1c      	ldr	r3, [pc, #112]	; (800079c <SPI_PeriClockControl+0xa4>)
 800072a:	69db      	ldr	r3, [r3, #28]
 800072c:	4a1b      	ldr	r2, [pc, #108]	; (800079c <SPI_PeriClockControl+0xa4>)
 800072e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000732:	61d3      	str	r3, [r2, #28]
}
 8000734:	e02a      	b.n	800078c <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI3)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4a1a      	ldr	r2, [pc, #104]	; (80007a4 <SPI_PeriClockControl+0xac>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d126      	bne.n	800078c <SPI_PeriClockControl+0x94>
			SPI3_PCLK_EN();
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <SPI_PeriClockControl+0xa4>)
 8000740:	69db      	ldr	r3, [r3, #28]
 8000742:	4a16      	ldr	r2, [pc, #88]	; (800079c <SPI_PeriClockControl+0xa4>)
 8000744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000748:	61d3      	str	r3, [r2, #28]
}
 800074a:	e01f      	b.n	800078c <SPI_PeriClockControl+0x94>
		if(pSPIx == SPI1)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	4a12      	ldr	r2, [pc, #72]	; (8000798 <SPI_PeriClockControl+0xa0>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d106      	bne.n	8000762 <SPI_PeriClockControl+0x6a>
			SPI1_PCLK_DI();
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <SPI_PeriClockControl+0xa4>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	4a10      	ldr	r2, [pc, #64]	; (800079c <SPI_PeriClockControl+0xa4>)
 800075a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800075e:	6193      	str	r3, [r2, #24]
}
 8000760:	e014      	b.n	800078c <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI2)
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4a0e      	ldr	r2, [pc, #56]	; (80007a0 <SPI_PeriClockControl+0xa8>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d106      	bne.n	8000778 <SPI_PeriClockControl+0x80>
			SPI2_PCLK_DI();
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <SPI_PeriClockControl+0xa4>)
 800076c:	69db      	ldr	r3, [r3, #28]
 800076e:	4a0b      	ldr	r2, [pc, #44]	; (800079c <SPI_PeriClockControl+0xa4>)
 8000770:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000774:	61d3      	str	r3, [r2, #28]
}
 8000776:	e009      	b.n	800078c <SPI_PeriClockControl+0x94>
		else if(pSPIx == SPI3)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <SPI_PeriClockControl+0xac>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d105      	bne.n	800078c <SPI_PeriClockControl+0x94>
			SPI3_PCLK_DI();
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <SPI_PeriClockControl+0xa4>)
 8000782:	69db      	ldr	r3, [r3, #28]
 8000784:	4a05      	ldr	r2, [pc, #20]	; (800079c <SPI_PeriClockControl+0xa4>)
 8000786:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800078a:	61d3      	str	r3, [r2, #28]
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	40013000 	.word	0x40013000
 800079c:	40021000 	.word	0x40021000
 80007a0:	40003800 	.word	0x40003800
 80007a4:	40003c00 	.word	0x40003c00

080007a8 <SPI_Init>:
 * @Parameters: SPI handle pointer
 * @Return: NONE
 */
// SPI Initialize
void SPI_Init(SPI_Handle_t * pSPIHandle)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

	//Enable the Peripheral Clock
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2101      	movs	r1, #1
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ff9e 	bl	80006f8 <SPI_PeriClockControl>

	//First lets configure the SPI_CR1 register
	uint32_t tempreg = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]

	//1. Configuring the mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	791b      	ldrb	r3, [r3, #4]
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	461a      	mov	r2, r3
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	4313      	orrs	r3, r2
 80007cc:	60fb      	str	r3, [r7, #12]

	//2. Configure the Bus Mode
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	795b      	ldrb	r3, [r3, #5]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d104      	bne.n	80007e0 <SPI_Init+0x38>
	{
		// BIDI Mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDI_MODE);
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	e014      	b.n	800080a <SPI_Init+0x62>
	}

	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	795b      	ldrb	r3, [r3, #5]
 80007e4:	2b02      	cmp	r3, #2
 80007e6:	d104      	bne.n	80007f2 <SPI_Init+0x4a>
	{
		// BIDI Mode should be set
		tempreg |= (1 << SPI_CR1_BIDI_MODE);
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	e00b      	b.n	800080a <SPI_Init+0x62>
	}

	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	795b      	ldrb	r3, [r3, #5]
 80007f6:	2b03      	cmp	r3, #3
 80007f8:	d107      	bne.n	800080a <SPI_Init+0x62>
	{
		// BIDI Mode should be cleared
		tempreg &= ~(1 << SPI_CR1_BIDI_MODE);
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000800:	60fb      	str	r3, [r7, #12]

		// RXONLY bit must be set (to enable clock)
		tempreg |= (1 << SPI_CR1_RX_ONLY);
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000808:	60fb      	str	r3, [r7, #12]
	}

	//3. Configuring the SPI Serial Clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	799b      	ldrb	r3, [r3, #6]
 800080e:	00db      	lsls	r3, r3, #3
 8000810:	461a      	mov	r2, r3
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	4313      	orrs	r3, r2
 8000816:	60fb      	str	r3, [r7, #12]

	//4. Configuring the DFF
	pSPIHandle->pSPIx->CR2 |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR2_DS;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	685a      	ldr	r2, [r3, #4]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	79db      	ldrb	r3, [r3, #7]
 8000822:	021b      	lsls	r3, r3, #8
 8000824:	4619      	mov	r1, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	430a      	orrs	r2, r1
 800082c:	605a      	str	r2, [r3, #4]

	//5. Configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	7a1b      	ldrb	r3, [r3, #8]
 8000832:	005b      	lsls	r3, r3, #1
 8000834:	461a      	mov	r2, r3
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	4313      	orrs	r3, r2
 800083a:	60fb      	str	r3, [r7, #12]

	//6. Configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	7a5b      	ldrb	r3, [r3, #9]
 8000840:	461a      	mov	r2, r3
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	4313      	orrs	r3, r2
 8000846:	60fb      	str	r3, [r7, #12]

	//7. Configure the SSM
	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	7a9b      	ldrb	r3, [r3, #10]
 800084c:	025b      	lsls	r3, r3, #9
 800084e:	461a      	mov	r2, r3
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	4313      	orrs	r3, r2
 8000854:	60fb      	str	r3, [r7, #12]

	//8. Configure the SSOE bit
	pSPIHandle->pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	685a      	ldr	r2, [r3, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f042 0204 	orr.w	r2, r2, #4
 8000864:	605a      	str	r2, [r3, #4]


	// Placing the value in the Register
	pSPIHandle->pSPIx->CR1 = tempreg;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	601a      	str	r2, [r3, #0]



}
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}

08000876 <SPI_SendData>:
 * @Parameters: SPI peripheral address, Pointer to TxBuffer, Length of Data
 * @Return: NONE
 */
// Data Send (Blocking Call)
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t * pTxBuffer, uint32_t Len)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b084      	sub	sp, #16
 800087a:	af00      	add	r7, sp, #0
 800087c:	60f8      	str	r0, [r7, #12]
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000882:	e014      	b.n	80008ae <SPI_SendData+0x38>
	{
		//1. Wait until TXE Flag is set
		while(SPI_GetFlagStatus(pSPIx, SPI_FLAG_TXE) == FLAG_RESET);
 8000884:	bf00      	nop
 8000886:	2102      	movs	r1, #2
 8000888:	68f8      	ldr	r0, [r7, #12]
 800088a:	f000 f872 	bl	8000972 <SPI_GetFlagStatus>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d0f8      	beq.n	8000886 <SPI_SendData+0x10>

		//2. Check the DSS bits in CR2 (for 8 bits)
		if(pSPIx->CR2 & (SPI_DFF_16Bits < SPI_CR2_DS))
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	685b      	ldr	r3, [r3, #4]

		else
		{
			 //b bits DFF
			//1. Load the data into DR
			pSPIx->DR = *(pTxBuffer);
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	461a      	mov	r2, r3
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	60da      	str	r2, [r3, #12]

			//2. Decrease Length
			Len--;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3b01      	subs	r3, #1
 80008a6:	607b      	str	r3, [r7, #4]

			//3. Increment the address
			pTxBuffer++;
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	3301      	adds	r3, #1
 80008ac:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d1e7      	bne.n	8000884 <SPI_SendData+0xe>

		}

	}
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <SPI_RecieveData>:
 * @Parameters: SPI peripheral address, Pointer to RxBuffer, Length of Data
 * @Return: NONE
 */
// Receive Data
void SPI_RecieveData(SPI_RegDef_t *pSPIx, uint8_t * pRxBuffer, uint32_t Len)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60f8      	str	r0, [r7, #12]
 80008c4:	60b9      	str	r1, [r7, #8]
 80008c6:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 80008c8:	e014      	b.n	80008f4 <SPI_RecieveData+0x38>
	{
		//1. Wait until RXNE Flag is set
		while(SPI_GetFlagStatus(pSPIx, SPI_FLAG_RXNE) == FLAG_RESET);
 80008ca:	bf00      	nop
 80008cc:	2101      	movs	r1, #1
 80008ce:	68f8      	ldr	r0, [r7, #12]
 80008d0:	f000 f84f 	bl	8000972 <SPI_GetFlagStatus>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d0f8      	beq.n	80008cc <SPI_RecieveData+0x10>

		//2. Check the DSS bits in CR2 (for 8 bits)
		if(pSPIx->CR2 & (SPI_DFF_16Bits < SPI_CR2_DS))
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	685b      	ldr	r3, [r3, #4]

		else
		{
			 //b bits DFF
			//1. Load the data into DR
			*(pRxBuffer) = pSPIx->DR;
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	68db      	ldr	r3, [r3, #12]
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	701a      	strb	r2, [r3, #0]

			//2. Decrease Length
			Len--;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3b01      	subs	r3, #1
 80008ec:	607b      	str	r3, [r7, #4]

			//3. Increment the address
			pRxBuffer++;
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	3301      	adds	r3, #1
 80008f2:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d1e7      	bne.n	80008ca <SPI_RecieveData+0xe>
		}

	}

}
 80008fa:	bf00      	nop
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <SPI_PeripheralControl>:
	(void)temp;
}

// Enable the SPI peripheral by setting the SPE bit
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t ENorDI)
{
 8000902:	b480      	push	{r7}
 8000904:	b083      	sub	sp, #12
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
 800090a:	460b      	mov	r3, r1
 800090c:	70fb      	strb	r3, [r7, #3]
	if(ENorDI == ENABLE)
 800090e:	78fb      	ldrb	r3, [r7, #3]
 8000910:	2b01      	cmp	r3, #1
 8000912:	d106      	bne.n	8000922 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	601a      	str	r2, [r3, #0]

	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000920:	e005      	b.n	800092e <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	601a      	str	r2, [r3, #0]
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <SPI_SSIConfig>:

// To Enable the SSI to avoid the MODF bit set
void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t ENorDI)
{
 800093a:	b480      	push	{r7}
 800093c:	b083      	sub	sp, #12
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
 8000942:	460b      	mov	r3, r1
 8000944:	70fb      	strb	r3, [r7, #3]
	if(ENorDI == ENABLE)
 8000946:	78fb      	ldrb	r3, [r7, #3]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d106      	bne.n	800095a <SPI_SSIConfig+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SSI);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	601a      	str	r2, [r3, #0]

	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}
 8000958:	e005      	b.n	8000966 <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	601a      	str	r2, [r3, #0]
}
 8000966:	bf00      	nop
 8000968:	370c      	adds	r7, #12
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr

08000972 <SPI_GetFlagStatus>:

// Return the FLAG status
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000972:	b480      	push	{r7}
 8000974:	b083      	sub	sp, #12
 8000976:	af00      	add	r7, sp, #0
 8000978:	6078      	str	r0, [r7, #4]
 800097a:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	689a      	ldr	r2, [r3, #8]
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	4013      	ands	r3, r2
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000988:	2301      	movs	r3, #1
 800098a:	e000      	b.n	800098e <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 800098c:	2300      	movs	r3, #0
}
 800098e:	4618      	mov	r0, r3
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
	...

0800099c <delay>:
#define LED_ON				1
#define LED_OFF				0

// Creating software delay
void delay(void)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0

 for(uint32_t i = 0; i < 500000; i++);
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	e002      	b.n	80009ae <delay+0x12>
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3301      	adds	r3, #1
 80009ac:	607b      	str	r3, [r7, #4]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <delay+0x28>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d9f8      	bls.n	80009a8 <delay+0xc>

}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	0007a11f 	.word	0x0007a11f

080009c8 <SPI2_GPIOInits>:

void SPI2_GPIOInits(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b084      	sub	sp, #16
 80009cc:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80009ce:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <SPI2_GPIOInits+0x58>)
 80009d0:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80009d2:	2302      	movs	r3, #2
 80009d4:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80009d6:	2305      	movs	r3, #5
 80009d8:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80009da:	2300      	movs	r3, #0
 80009dc:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NO;
 80009de:	2300      	movs	r3, #0
 80009e0:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	72bb      	strb	r3, [r7, #10]

	//For SCLK pin
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80009e6:	230d      	movs	r3, #13
 80009e8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff fced 	bl	80003cc <GPIO_Init>

	//For MOSI pin
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 80009f2:	230f      	movs	r3, #15
 80009f4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fce7 	bl	80003cc <GPIO_Init>

	//For MISO pin
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 80009fe:	230e      	movs	r3, #14
 8000a00:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fce1 	bl	80003cc <GPIO_Init>

	//For NSS pin
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000a0a:	230c      	movs	r3, #12
 8000a0c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fcdb 	bl	80003cc <GPIO_Init>

}
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	48000400 	.word	0x48000400

08000a24 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <SPI2_Inits+0x38>)
 8000a2c:	603b      	str	r3, [r7, #0]
	SPI2Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	717b      	strb	r3, [r7, #5]
	SPI2Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICEMODE_MASTER;
 8000a32:	2301      	movs	r3, #1
 8000a34:	713b      	strb	r3, [r7, #4]
	SPI2Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;
 8000a36:	2302      	movs	r3, #2
 8000a38:	71bb      	strb	r3, [r7, #6]
	SPI2Handle.SPIConfig.SPI_DFF = SPI_DFF_8Bits;
 8000a3a:	2307      	movs	r3, #7
 8000a3c:	71fb      	strb	r3, [r7, #7]
	SPI2Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPIConfig.SPI_SSM = SPI_SSM_DI;		// SSM disabled for hardware slave management
 8000a46:	2300      	movs	r3, #0
 8000a48:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2Handle);
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff feab 	bl	80007a8 <SPI_Init>


}
 8000a52:	bf00      	nop
 8000a54:	3720      	adds	r7, #32
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40003800 	.word	0x40003800

08000a60 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioBtn;

	// For Button
	GpioBtn.pGPIOx = GPIOA;											//Address of the GPIO port
 8000a66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a6a:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;			// Filling in the structure members
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000a70:	2300      	movs	r3, #0
 8000a72:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000a74:	2300      	movs	r3, #0
 8000a76:	733b      	strb	r3, [r7, #12]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_NO;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	72fb      	strb	r3, [r7, #11]

	// Initializing the GPIO pins
	GPIO_Init(&GpioBtn);
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fca4 	bl	80003cc <GPIO_Init>
}
 8000a84:	bf00      	nop
 8000a86:	3710      	adds	r7, #16
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <SPI_VerifyResponse>:

// Verifying the Response from the Arduino Slave
uint8_t SPI_VerifyResponse(uint8_t ackbyte)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
	if(ackbyte == 0xF5)
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	2bf5      	cmp	r3, #245	; 0xf5
 8000a9a:	d101      	bne.n	8000aa0 <SPI_VerifyResponse+0x14>
	{
		//ACK
		return 1;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	e000      	b.n	8000aa2 <SPI_VerifyResponse+0x16>
	}
	else
	{
		return 0;
 8000aa0:	2300      	movs	r3, #0
	}

}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
	...

08000ab0 <main>:


int main(void)
{
 8000ab0:	b5b0      	push	{r4, r5, r7, lr}
 8000ab2:	b08e      	sub	sp, #56	; 0x38
 8000ab4:	af00      	add	r7, sp, #0

	uint8_t dummy_write	= 0xff;						// Dummy data to be sent
 8000ab6:	23ff      	movs	r3, #255	; 0xff
 8000ab8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t dummy_read;

	initialise_monitor_handles();					// Semi hosting command
 8000abc:	f000 f9f6 	bl	8000eac <initialise_monitor_handles>

	printf("Application is running \n");
 8000ac0:	48d9      	ldr	r0, [pc, #868]	; (8000e28 <main+0x378>)
 8000ac2:	f000 fb6d 	bl	80011a0 <puts>

	GPIO_ButtonInit();								// Initializing GPIO pins and SPI configurations
 8000ac6:	f7ff ffcb 	bl	8000a60 <GPIO_ButtonInit>
	SPI2_GPIOInits();
 8000aca:	f7ff ff7d 	bl	80009c8 <SPI2_GPIOInits>
	SPI2_Inits();
 8000ace:	f7ff ffa9 	bl	8000a24 <SPI2_Inits>

	printf("SPI Init, done \n");
 8000ad2:	48d6      	ldr	r0, [pc, #856]	; (8000e2c <main+0x37c>)
 8000ad4:	f000 fb64 	bl	80011a0 <puts>

	//Enable the SSI, this makes NSS internally high to avoid MODF error
	SPI_SSIConfig(SPI2, ENABLE);
 8000ad8:	2101      	movs	r1, #1
 8000ada:	48d5      	ldr	r0, [pc, #852]	; (8000e30 <main+0x380>)
 8000adc:	f7ff ff2d 	bl	800093a <SPI_SSIConfig>


	while(1)
	{
		// Sending command one
		while( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));	// Runs the next line only when the button is pressed , else it pauses.
 8000ae0:	bf00      	nop
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae8:	f7ff fdf0 	bl	80006cc <GPIO_ReadFromInputPin>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d0f7      	beq.n	8000ae2 <main+0x32>

		delay();
 8000af2:	f7ff ff53 	bl	800099c <delay>

		// Enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2, ENABLE);
 8000af6:	2101      	movs	r1, #1
 8000af8:	48cd      	ldr	r0, [pc, #820]	; (8000e30 <main+0x380>)
 8000afa:	f7ff ff02 	bl	8000902 <SPI_PeripheralControl>

		//1. CMD_LED_CTRL  <pin no> <value>
		uint8_t commandcode = COMMAND_LED_CTRL;
 8000afe:	2350      	movs	r3, #80	; 0x50
 8000b00:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		uint8_t ackbyte;
		uint8_t args[2];

		//Send Command
		SPI_SendData(SPI2, &commandcode, 1);
 8000b04:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000b08:	2201      	movs	r2, #1
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	48c8      	ldr	r0, [pc, #800]	; (8000e30 <main+0x380>)
 8000b0e:	f7ff feb2 	bl	8000876 <SPI_SendData>

		//do dummy read to clear RXNE
		SPI_RecieveData(SPI2, &dummy_read, 1);
 8000b12:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000b16:	2201      	movs	r2, #1
 8000b18:	4619      	mov	r1, r3
 8000b1a:	48c5      	ldr	r0, [pc, #788]	; (8000e30 <main+0x380>)
 8000b1c:	f7ff fece 	bl	80008bc <SPI_RecieveData>

		// Now send some dummy data to fetch response from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 8000b20:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000b24:	2201      	movs	r2, #1
 8000b26:	4619      	mov	r1, r3
 8000b28:	48c1      	ldr	r0, [pc, #772]	; (8000e30 <main+0x380>)
 8000b2a:	f7ff fea4 	bl	8000876 <SPI_SendData>

		// Read the ack byte recieved
		SPI_RecieveData(SPI2, &ackbyte, 1);
 8000b2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b32:	2201      	movs	r2, #1
 8000b34:	4619      	mov	r1, r3
 8000b36:	48be      	ldr	r0, [pc, #760]	; (8000e30 <main+0x380>)
 8000b38:	f7ff fec0 	bl	80008bc <SPI_RecieveData>

		// Now check if you received ack or nack
		if(SPI_VerifyResponse(ackbyte))
 8000b3c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ffa3 	bl	8000a8c <SPI_VerifyResponse>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d00f      	beq.n	8000b6c <main+0xbc>
		{
			// send arguments
			args[0] = LED_PIN;
 8000b4c:	2309      	movs	r3, #9
 8000b4e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			args[1] = LED_ON;
 8000b52:	2301      	movs	r3, #1
 8000b54:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			SPI_SendData(SPI2,args, 2);
 8000b58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b5c:	2202      	movs	r2, #2
 8000b5e:	4619      	mov	r1, r3
 8000b60:	48b3      	ldr	r0, [pc, #716]	; (8000e30 <main+0x380>)
 8000b62:	f7ff fe88 	bl	8000876 <SPI_SendData>
			printf("COMMAND_LED_CTRL Executed \n");
 8000b66:	48b3      	ldr	r0, [pc, #716]	; (8000e34 <main+0x384>)
 8000b68:	f000 fb1a 	bl	80011a0 <puts>
		}// End of command 1

//-------------------------------------------------------

		// Sending command two
		while( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));	// Runs the next line only when the button is pressed , else it pauses.
 8000b6c:	bf00      	nop
 8000b6e:	2100      	movs	r1, #0
 8000b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b74:	f7ff fdaa 	bl	80006cc <GPIO_ReadFromInputPin>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d0f7      	beq.n	8000b6e <main+0xbe>

		//2. CMD_SENSOR_READ  <analog pin number(1)>
		delay();
 8000b7e:	f7ff ff0d 	bl	800099c <delay>

		//command code
		commandcode = COMMAND_SENSOR_READ;
 8000b82:	2351      	movs	r3, #81	; 0x51
 8000b84:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		//Send Command
		SPI_SendData(SPI2, &commandcode, 1);
 8000b88:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4619      	mov	r1, r3
 8000b90:	48a7      	ldr	r0, [pc, #668]	; (8000e30 <main+0x380>)
 8000b92:	f7ff fe70 	bl	8000876 <SPI_SendData>

		//do dummy read to clear RXNE
		SPI_RecieveData(SPI2, &dummy_read, 1);
 8000b96:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	48a4      	ldr	r0, [pc, #656]	; (8000e30 <main+0x380>)
 8000ba0:	f7ff fe8c 	bl	80008bc <SPI_RecieveData>

		// Now send some dummy data to fetch response from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 8000ba4:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000ba8:	2201      	movs	r2, #1
 8000baa:	4619      	mov	r1, r3
 8000bac:	48a0      	ldr	r0, [pc, #640]	; (8000e30 <main+0x380>)
 8000bae:	f7ff fe62 	bl	8000876 <SPI_SendData>

		// Read the ack byte recieved
		SPI_RecieveData(SPI2, &ackbyte, 1);
 8000bb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4619      	mov	r1, r3
 8000bba:	489d      	ldr	r0, [pc, #628]	; (8000e30 <main+0x380>)
 8000bbc:	f7ff fe7e 	bl	80008bc <SPI_RecieveData>

		// Now check if you received ack or nack
		if(SPI_VerifyResponse(ackbyte))
 8000bc0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ff61 	bl	8000a8c <SPI_VerifyResponse>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d024      	beq.n	8000c1a <main+0x16a>
		{
			// send arguments
			args[0] = ANALOG_PIN0;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			SPI_SendData(SPI2,args, 1);
 8000bd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bda:	2201      	movs	r2, #1
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4894      	ldr	r0, [pc, #592]	; (8000e30 <main+0x380>)
 8000be0:	f7ff fe49 	bl	8000876 <SPI_SendData>

			//do dummy read to clear RXNE
			SPI_RecieveData(SPI2, &dummy_read, 1);
 8000be4:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000be8:	2201      	movs	r2, #1
 8000bea:	4619      	mov	r1, r3
 8000bec:	4890      	ldr	r0, [pc, #576]	; (8000e30 <main+0x380>)
 8000bee:	f7ff fe65 	bl	80008bc <SPI_RecieveData>

			// Insert some delay so that the slave can be ready with the data
			delay();
 8000bf2:	f7ff fed3 	bl	800099c <delay>

			// Now send some dummy data to fetch response from the slave
			SPI_SendData(SPI2, &dummy_write, 1);
 8000bf6:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	488c      	ldr	r0, [pc, #560]	; (8000e30 <main+0x380>)
 8000c00:	f7ff fe39 	bl	8000876 <SPI_SendData>

			uint8_t analog_read;

			SPI_RecieveData(SPI2, &analog_read, 1);
 8000c04:	1cfb      	adds	r3, r7, #3
 8000c06:	2201      	movs	r2, #1
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4889      	ldr	r0, [pc, #548]	; (8000e30 <main+0x380>)
 8000c0c:	f7ff fe56 	bl	80008bc <SPI_RecieveData>

			printf("COMMAND_SENSOR_READ %d \n", analog_read);
 8000c10:	78fb      	ldrb	r3, [r7, #3]
 8000c12:	4619      	mov	r1, r3
 8000c14:	4888      	ldr	r0, [pc, #544]	; (8000e38 <main+0x388>)
 8000c16:	f000 fa4f 	bl	80010b8 <iprintf>

		}

//--------------------------------------------------------------
		// Sending command three
		while( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));	// Runs the next line only when the button is pressed , else it pauses.
 8000c1a:	bf00      	nop
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c22:	f7ff fd53 	bl	80006cc <GPIO_ReadFromInputPin>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d0f7      	beq.n	8000c1c <main+0x16c>

		//3. COMMAND_LED_READ  <pin number(1)>
		delay();
 8000c2c:	f7ff feb6 	bl	800099c <delay>

		//command code
		commandcode = COMMAND_LED_READ;
 8000c30:	2352      	movs	r3, #82	; 0x52
 8000c32:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		//Send Command
		SPI_SendData(SPI2, &commandcode, 1);
 8000c36:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	487c      	ldr	r0, [pc, #496]	; (8000e30 <main+0x380>)
 8000c40:	f7ff fe19 	bl	8000876 <SPI_SendData>

		//do dummy read to clear RXNE
		SPI_RecieveData(SPI2, &dummy_read, 1);
 8000c44:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000c48:	2201      	movs	r2, #1
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4878      	ldr	r0, [pc, #480]	; (8000e30 <main+0x380>)
 8000c4e:	f7ff fe35 	bl	80008bc <SPI_RecieveData>

		// Now send some dummy data to fetch response from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 8000c52:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000c56:	2201      	movs	r2, #1
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4875      	ldr	r0, [pc, #468]	; (8000e30 <main+0x380>)
 8000c5c:	f7ff fe0b 	bl	8000876 <SPI_SendData>

		// Read the ack byte recieved
		SPI_RecieveData(SPI2, &ackbyte, 1);
 8000c60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c64:	2201      	movs	r2, #1
 8000c66:	4619      	mov	r1, r3
 8000c68:	4871      	ldr	r0, [pc, #452]	; (8000e30 <main+0x380>)
 8000c6a:	f7ff fe27 	bl	80008bc <SPI_RecieveData>

		if(SPI_VerifyResponse(ackbyte))
 8000c6e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff ff0a 	bl	8000a8c <SPI_VerifyResponse>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d024      	beq.n	8000cc8 <main+0x218>
		{
			// send arguments
			args[0] = LED_PIN;
 8000c7e:	2309      	movs	r3, #9
 8000c80:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			SPI_SendData(SPI2,args, 1);
 8000c84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c88:	2201      	movs	r2, #1
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4868      	ldr	r0, [pc, #416]	; (8000e30 <main+0x380>)
 8000c8e:	f7ff fdf2 	bl	8000876 <SPI_SendData>

			//do dummy read to clear RXNE
			SPI_RecieveData(SPI2, &dummy_read, 1);
 8000c92:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000c96:	2201      	movs	r2, #1
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4865      	ldr	r0, [pc, #404]	; (8000e30 <main+0x380>)
 8000c9c:	f7ff fe0e 	bl	80008bc <SPI_RecieveData>

			// Insert some delay so that the slave can be ready with the data
			delay();
 8000ca0:	f7ff fe7c 	bl	800099c <delay>

			SPI_SendData(SPI2,&dummy_write,1);
 8000ca4:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000ca8:	2201      	movs	r2, #1
 8000caa:	4619      	mov	r1, r3
 8000cac:	4860      	ldr	r0, [pc, #384]	; (8000e30 <main+0x380>)
 8000cae:	f7ff fde2 	bl	8000876 <SPI_SendData>

			uint8_t led_status;
			SPI_RecieveData(SPI2,&led_status,1);
 8000cb2:	1cbb      	adds	r3, r7, #2
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	485d      	ldr	r0, [pc, #372]	; (8000e30 <main+0x380>)
 8000cba:	f7ff fdff 	bl	80008bc <SPI_RecieveData>
			printf("COMMAND_READ_LED %d\n",led_status);
 8000cbe:	78bb      	ldrb	r3, [r7, #2]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	485e      	ldr	r0, [pc, #376]	; (8000e3c <main+0x38c>)
 8000cc4:	f000 f9f8 	bl	80010b8 <iprintf>
		}
		// End of command 3
//----------------------------------------------------------------------------------------
		// Sending command four
		while( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));	// Runs the next line only when the button is pressed , else it pauses.
 8000cc8:	bf00      	nop
 8000cca:	2100      	movs	r1, #0
 8000ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd0:	f7ff fcfc 	bl	80006cc <GPIO_ReadFromInputPin>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d0f7      	beq.n	8000cca <main+0x21a>

		//4. COMMAND_PRINT  <len(2)> <message(len)>
		delay();
 8000cda:	f7ff fe5f 	bl	800099c <delay>

		//command code
		commandcode = COMMAND_PRINT;
 8000cde:	2353      	movs	r3, #83	; 0x53
 8000ce0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		//Send Command
		SPI_SendData(SPI2, &commandcode, 1);
 8000ce4:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000ce8:	2201      	movs	r2, #1
 8000cea:	4619      	mov	r1, r3
 8000cec:	4850      	ldr	r0, [pc, #320]	; (8000e30 <main+0x380>)
 8000cee:	f7ff fdc2 	bl	8000876 <SPI_SendData>

		//do dummy read to clear RXNE
		SPI_RecieveData(SPI2, &dummy_read, 1);
 8000cf2:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	484d      	ldr	r0, [pc, #308]	; (8000e30 <main+0x380>)
 8000cfc:	f7ff fdde 	bl	80008bc <SPI_RecieveData>

		// Now send some dummy data to fetch response from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 8000d00:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000d04:	2201      	movs	r2, #1
 8000d06:	4619      	mov	r1, r3
 8000d08:	4849      	ldr	r0, [pc, #292]	; (8000e30 <main+0x380>)
 8000d0a:	f7ff fdb4 	bl	8000876 <SPI_SendData>

		// Read the ack byte recieved
		SPI_RecieveData(SPI2, &ackbyte, 1);
 8000d0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d12:	2201      	movs	r2, #1
 8000d14:	4619      	mov	r1, r3
 8000d16:	4846      	ldr	r0, [pc, #280]	; (8000e30 <main+0x380>)
 8000d18:	f7ff fdd0 	bl	80008bc <SPI_RecieveData>

		uint8_t message[] = "Hello ! How are you ??";
 8000d1c:	4b48      	ldr	r3, [pc, #288]	; (8000e40 <main+0x390>)
 8000d1e:	f107 0410 	add.w	r4, r7, #16
 8000d22:	461d      	mov	r5, r3
 8000d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d28:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d2c:	6020      	str	r0, [r4, #0]
 8000d2e:	3404      	adds	r4, #4
 8000d30:	8021      	strh	r1, [r4, #0]
 8000d32:	3402      	adds	r4, #2
 8000d34:	0c0b      	lsrs	r3, r1, #16
 8000d36:	7023      	strb	r3, [r4, #0]

		if(SPI_VerifyResponse(ackbyte))
 8000d38:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff fea5 	bl	8000a8c <SPI_VerifyResponse>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d037      	beq.n	8000db8 <main+0x308>
		{
			// send arguments
			args[0] = strlen((char *)message);
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fa47 	bl	80001e0 <strlen>
 8000d52:	4603      	mov	r3, r0
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			SPI_SendData(SPI2,args, 1);	// Sending length
 8000d5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d5e:	2201      	movs	r2, #1
 8000d60:	4619      	mov	r1, r3
 8000d62:	4833      	ldr	r0, [pc, #204]	; (8000e30 <main+0x380>)
 8000d64:	f7ff fd87 	bl	8000876 <SPI_SendData>

			//do dummy read to clear RXNE
			SPI_RecieveData(SPI2, &dummy_read, 1);
 8000d68:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	4619      	mov	r1, r3
 8000d70:	482f      	ldr	r0, [pc, #188]	; (8000e30 <main+0x380>)
 8000d72:	f7ff fda3 	bl	80008bc <SPI_RecieveData>

			// Insert some delay so that the slave can be ready with the data
			delay();
 8000d76:	f7ff fe11 	bl	800099c <delay>

			// send message

			for(int i = 0; i < args[0]; i++)
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8000d7e:	e012      	b.n	8000da6 <main+0x2f6>
			{
				SPI_SendData(SPI2,&message[i],1);
 8000d80:	f107 0210 	add.w	r2, r7, #16
 8000d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d86:	4413      	add	r3, r2
 8000d88:	2201      	movs	r2, #1
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4828      	ldr	r0, [pc, #160]	; (8000e30 <main+0x380>)
 8000d8e:	f7ff fd72 	bl	8000876 <SPI_SendData>
				SPI_RecieveData(SPI2,&dummy_read,1);
 8000d92:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000d96:	2201      	movs	r2, #1
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4825      	ldr	r0, [pc, #148]	; (8000e30 <main+0x380>)
 8000d9c:	f7ff fd8e 	bl	80008bc <SPI_RecieveData>
			for(int i = 0; i < args[0]; i++)
 8000da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000da2:	3301      	adds	r3, #1
 8000da4:	637b      	str	r3, [r7, #52]	; 0x34
 8000da6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000daa:	461a      	mov	r2, r3
 8000dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dae:	4293      	cmp	r3, r2
 8000db0:	dbe6      	blt.n	8000d80 <main+0x2d0>
			}

			printf("COMMAND_PRINT Executed \n");
 8000db2:	4824      	ldr	r0, [pc, #144]	; (8000e44 <main+0x394>)
 8000db4:	f000 f9f4 	bl	80011a0 <puts>
		}
			// End of command four
//------------------------------------------------------------------------------
		// Sending command five
		while( ! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));	// Runs the next line only when the button is pressed , else it pauses.
 8000db8:	bf00      	nop
 8000dba:	2100      	movs	r1, #0
 8000dbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc0:	f7ff fc84 	bl	80006cc <GPIO_ReadFromInputPin>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0f7      	beq.n	8000dba <main+0x30a>

		//5. COMMAND_ID_READ
		delay();
 8000dca:	f7ff fde7 	bl	800099c <delay>

		//command code
		commandcode = COMMAND_ID_READ;
 8000dce:	2354      	movs	r3, #84	; 0x54
 8000dd0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		//Send Command
		SPI_SendData(SPI2, &commandcode, 1);
 8000dd4:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 8000dd8:	2201      	movs	r2, #1
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4814      	ldr	r0, [pc, #80]	; (8000e30 <main+0x380>)
 8000dde:	f7ff fd4a 	bl	8000876 <SPI_SendData>

		//do dummy read to clear RXNE
		SPI_RecieveData(SPI2, &dummy_read, 1);
 8000de2:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8000de6:	2201      	movs	r2, #1
 8000de8:	4619      	mov	r1, r3
 8000dea:	4811      	ldr	r0, [pc, #68]	; (8000e30 <main+0x380>)
 8000dec:	f7ff fd66 	bl	80008bc <SPI_RecieveData>

		// Now send some dummy data to fetch response from the slave
		SPI_SendData(SPI2, &dummy_write, 1);
 8000df0:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000df4:	2201      	movs	r2, #1
 8000df6:	4619      	mov	r1, r3
 8000df8:	480d      	ldr	r0, [pc, #52]	; (8000e30 <main+0x380>)
 8000dfa:	f7ff fd3c 	bl	8000876 <SPI_SendData>

		// Read the ack byte recieved
		SPI_RecieveData(SPI2, &ackbyte, 1);
 8000dfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e02:	2201      	movs	r2, #1
 8000e04:	4619      	mov	r1, r3
 8000e06:	480a      	ldr	r0, [pc, #40]	; (8000e30 <main+0x380>)
 8000e08:	f7ff fd58 	bl	80008bc <SPI_RecieveData>

		uint8_t id[11];
		uint32_t i=0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	633b      	str	r3, [r7, #48]	; 0x30

		if( SPI_VerifyResponse(ackbyte))
 8000e10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fe39 	bl	8000a8c <SPI_VerifyResponse>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d02f      	beq.n	8000e80 <main+0x3d0>
		{
			// read 10 bytes from the slave
			for(i = 0 ; i < 10 ; i++)
 8000e20:	2300      	movs	r3, #0
 8000e22:	633b      	str	r3, [r7, #48]	; 0x30
 8000e24:	e022      	b.n	8000e6c <main+0x3bc>
 8000e26:	bf00      	nop
 8000e28:	08001f60 	.word	0x08001f60
 8000e2c:	08001f78 	.word	0x08001f78
 8000e30:	40003800 	.word	0x40003800
 8000e34:	08001f88 	.word	0x08001f88
 8000e38:	08001fa4 	.word	0x08001fa4
 8000e3c:	08001fc0 	.word	0x08001fc0
 8000e40:	08002020 	.word	0x08002020
 8000e44:	08001fd8 	.word	0x08001fd8
			{
				//send dummy byte to fetch data from slave
				SPI_SendData(SPI2,&dummy_write,1);
 8000e48:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4813      	ldr	r0, [pc, #76]	; (8000ea0 <main+0x3f0>)
 8000e52:	f7ff fd10 	bl	8000876 <SPI_SendData>
				SPI_RecieveData(SPI2,&id[i],1);
 8000e56:	1d3a      	adds	r2, r7, #4
 8000e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e5a:	4413      	add	r3, r2
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	4619      	mov	r1, r3
 8000e60:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <main+0x3f0>)
 8000e62:	f7ff fd2b 	bl	80008bc <SPI_RecieveData>
			for(i = 0 ; i < 10 ; i++)
 8000e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e68:	3301      	adds	r3, #1
 8000e6a:	633b      	str	r3, [r7, #48]	; 0x30
 8000e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e6e:	2b09      	cmp	r3, #9
 8000e70:	d9ea      	bls.n	8000e48 <main+0x398>
			}

			id[10] = '\0';
 8000e72:	2300      	movs	r3, #0
 8000e74:	73bb      	strb	r3, [r7, #14]

			printf("COMMAND_ID : %s \n",id);
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	4619      	mov	r1, r3
 8000e7a:	480a      	ldr	r0, [pc, #40]	; (8000ea4 <main+0x3f4>)
 8000e7c:	f000 f91c 	bl	80010b8 <iprintf>
		}
			// End of Command five
//--------------------------------------------------------------------------

		//Check if SPI is busy or not
		while( SPI_GetFlagStatus(SPI2, SPI_FLAG_BUSY));
 8000e80:	bf00      	nop
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	4806      	ldr	r0, [pc, #24]	; (8000ea0 <main+0x3f0>)
 8000e86:	f7ff fd74 	bl	8000972 <SPI_GetFlagStatus>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d1f8      	bne.n	8000e82 <main+0x3d2>

		// Disable the peripheral after the last byte has been sent
		SPI_PeripheralControl(SPI2, DISABLE);
 8000e90:	2100      	movs	r1, #0
 8000e92:	4803      	ldr	r0, [pc, #12]	; (8000ea0 <main+0x3f0>)
 8000e94:	f7ff fd35 	bl	8000902 <SPI_PeripheralControl>

		printf("SPI Communication Closed\n");
 8000e98:	4803      	ldr	r0, [pc, #12]	; (8000ea8 <main+0x3f8>)
 8000e9a:	f000 f981 	bl	80011a0 <puts>
	{
 8000e9e:	e61f      	b.n	8000ae0 <main+0x30>
 8000ea0:	40003800 	.word	0x40003800
 8000ea4:	08001ff0 	.word	0x08001ff0
 8000ea8:	08002004 	.word	0x08002004

08000eac <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	60f8      	str	r0, [r7, #12]
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	e00a      	b.n	8000ee2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ecc:	f3af 8000 	nop.w
 8000ed0:	4601      	mov	r1, r0
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	1c5a      	adds	r2, r3, #1
 8000ed6:	60ba      	str	r2, [r7, #8]
 8000ed8:	b2ca      	uxtb	r2, r1
 8000eda:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	617b      	str	r3, [r7, #20]
 8000ee2:	697a      	ldr	r2, [r7, #20]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	dbf0      	blt.n	8000ecc <_read+0x12>
	}

return len;
 8000eea:	687b      	ldr	r3, [r7, #4]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3718      	adds	r7, #24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	e009      	b.n	8000f1a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	60ba      	str	r2, [r7, #8]
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	3301      	adds	r3, #1
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	697a      	ldr	r2, [r7, #20]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	dbf1      	blt.n	8000f06 <_write+0x12>
	}
	return len;
 8000f22:	687b      	ldr	r3, [r7, #4]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <_close>:

int _close(int file)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	return -1;
 8000f34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f54:	605a      	str	r2, [r3, #4]
	return 0;
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <_isatty>:

int _isatty(int file)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	return 1;
 8000f6c:	2301      	movs	r3, #1
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	b085      	sub	sp, #20
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	60f8      	str	r0, [r7, #12]
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
	return 0;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f9c:	4a14      	ldr	r2, [pc, #80]	; (8000ff0 <_sbrk+0x5c>)
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <_sbrk+0x60>)
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa8:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <_sbrk+0x64>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d102      	bne.n	8000fb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <_sbrk+0x64>)
 8000fb2:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <_sbrk+0x68>)
 8000fb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <_sbrk+0x64>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d207      	bcs.n	8000fd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc4:	f000 f846 	bl	8001054 <__errno>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	230c      	movs	r3, #12
 8000fcc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd2:	e009      	b.n	8000fe8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <_sbrk+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fda:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <_sbrk+0x64>)
 8000fe4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	2000a000 	.word	0x2000a000
 8000ff4:	00000400 	.word	0x00000400
 8000ff8:	20000080 	.word	0x20000080
 8000ffc:	20000090 	.word	0x20000090

08001000 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001002:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001004:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001008:	480c      	ldr	r0, [pc, #48]	; (800103c <LoopForever+0x6>)
  ldr r1, =_edata
 800100a:	490d      	ldr	r1, [pc, #52]	; (8001040 <LoopForever+0xa>)
  ldr r2, =_sidata
 800100c:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <LoopForever+0xe>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001010:	e002      	b.n	8001018 <LoopCopyDataInit>

08001012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001016:	3304      	adds	r3, #4

08001018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800101c:	d3f9      	bcc.n	8001012 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001020:	4c0a      	ldr	r4, [pc, #40]	; (800104c <LoopForever+0x16>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001024:	e001      	b.n	800102a <LoopFillZerobss>

08001026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001028:	3204      	adds	r2, #4

0800102a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800102c:	d3fb      	bcc.n	8001026 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800102e:	f000 f817 	bl	8001060 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001032:	f7ff fd3d 	bl	8000ab0 <main>

08001036 <LoopForever>:

LoopForever:
    b LoopForever
 8001036:	e7fe      	b.n	8001036 <LoopForever>
  ldr   r0, =_estack
 8001038:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001040:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001044:	080020d8 	.word	0x080020d8
  ldr r2, =_sbss
 8001048:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800104c:	20000090 	.word	0x20000090

08001050 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC1_2_IRQHandler>
	...

08001054 <__errno>:
 8001054:	4b01      	ldr	r3, [pc, #4]	; (800105c <__errno+0x8>)
 8001056:	6818      	ldr	r0, [r3, #0]
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000000 	.word	0x20000000

08001060 <__libc_init_array>:
 8001060:	b570      	push	{r4, r5, r6, lr}
 8001062:	4e0d      	ldr	r6, [pc, #52]	; (8001098 <__libc_init_array+0x38>)
 8001064:	4c0d      	ldr	r4, [pc, #52]	; (800109c <__libc_init_array+0x3c>)
 8001066:	1ba4      	subs	r4, r4, r6
 8001068:	10a4      	asrs	r4, r4, #2
 800106a:	2500      	movs	r5, #0
 800106c:	42a5      	cmp	r5, r4
 800106e:	d109      	bne.n	8001084 <__libc_init_array+0x24>
 8001070:	4e0b      	ldr	r6, [pc, #44]	; (80010a0 <__libc_init_array+0x40>)
 8001072:	4c0c      	ldr	r4, [pc, #48]	; (80010a4 <__libc_init_array+0x44>)
 8001074:	f000 ff68 	bl	8001f48 <_init>
 8001078:	1ba4      	subs	r4, r4, r6
 800107a:	10a4      	asrs	r4, r4, #2
 800107c:	2500      	movs	r5, #0
 800107e:	42a5      	cmp	r5, r4
 8001080:	d105      	bne.n	800108e <__libc_init_array+0x2e>
 8001082:	bd70      	pop	{r4, r5, r6, pc}
 8001084:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001088:	4798      	blx	r3
 800108a:	3501      	adds	r5, #1
 800108c:	e7ee      	b.n	800106c <__libc_init_array+0xc>
 800108e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001092:	4798      	blx	r3
 8001094:	3501      	adds	r5, #1
 8001096:	e7f2      	b.n	800107e <__libc_init_array+0x1e>
 8001098:	080020d0 	.word	0x080020d0
 800109c:	080020d0 	.word	0x080020d0
 80010a0:	080020d0 	.word	0x080020d0
 80010a4:	080020d4 	.word	0x080020d4

080010a8 <memset>:
 80010a8:	4402      	add	r2, r0
 80010aa:	4603      	mov	r3, r0
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d100      	bne.n	80010b2 <memset+0xa>
 80010b0:	4770      	bx	lr
 80010b2:	f803 1b01 	strb.w	r1, [r3], #1
 80010b6:	e7f9      	b.n	80010ac <memset+0x4>

080010b8 <iprintf>:
 80010b8:	b40f      	push	{r0, r1, r2, r3}
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <iprintf+0x2c>)
 80010bc:	b513      	push	{r0, r1, r4, lr}
 80010be:	681c      	ldr	r4, [r3, #0]
 80010c0:	b124      	cbz	r4, 80010cc <iprintf+0x14>
 80010c2:	69a3      	ldr	r3, [r4, #24]
 80010c4:	b913      	cbnz	r3, 80010cc <iprintf+0x14>
 80010c6:	4620      	mov	r0, r4
 80010c8:	f000 fa22 	bl	8001510 <__sinit>
 80010cc:	ab05      	add	r3, sp, #20
 80010ce:	9a04      	ldr	r2, [sp, #16]
 80010d0:	68a1      	ldr	r1, [r4, #8]
 80010d2:	9301      	str	r3, [sp, #4]
 80010d4:	4620      	mov	r0, r4
 80010d6:	f000 fbdb 	bl	8001890 <_vfiprintf_r>
 80010da:	b002      	add	sp, #8
 80010dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010e0:	b004      	add	sp, #16
 80010e2:	4770      	bx	lr
 80010e4:	20000000 	.word	0x20000000

080010e8 <_puts_r>:
 80010e8:	b570      	push	{r4, r5, r6, lr}
 80010ea:	460e      	mov	r6, r1
 80010ec:	4605      	mov	r5, r0
 80010ee:	b118      	cbz	r0, 80010f8 <_puts_r+0x10>
 80010f0:	6983      	ldr	r3, [r0, #24]
 80010f2:	b90b      	cbnz	r3, 80010f8 <_puts_r+0x10>
 80010f4:	f000 fa0c 	bl	8001510 <__sinit>
 80010f8:	69ab      	ldr	r3, [r5, #24]
 80010fa:	68ac      	ldr	r4, [r5, #8]
 80010fc:	b913      	cbnz	r3, 8001104 <_puts_r+0x1c>
 80010fe:	4628      	mov	r0, r5
 8001100:	f000 fa06 	bl	8001510 <__sinit>
 8001104:	4b23      	ldr	r3, [pc, #140]	; (8001194 <_puts_r+0xac>)
 8001106:	429c      	cmp	r4, r3
 8001108:	d117      	bne.n	800113a <_puts_r+0x52>
 800110a:	686c      	ldr	r4, [r5, #4]
 800110c:	89a3      	ldrh	r3, [r4, #12]
 800110e:	071b      	lsls	r3, r3, #28
 8001110:	d51d      	bpl.n	800114e <_puts_r+0x66>
 8001112:	6923      	ldr	r3, [r4, #16]
 8001114:	b1db      	cbz	r3, 800114e <_puts_r+0x66>
 8001116:	3e01      	subs	r6, #1
 8001118:	68a3      	ldr	r3, [r4, #8]
 800111a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800111e:	3b01      	subs	r3, #1
 8001120:	60a3      	str	r3, [r4, #8]
 8001122:	b9e9      	cbnz	r1, 8001160 <_puts_r+0x78>
 8001124:	2b00      	cmp	r3, #0
 8001126:	da2e      	bge.n	8001186 <_puts_r+0x9e>
 8001128:	4622      	mov	r2, r4
 800112a:	210a      	movs	r1, #10
 800112c:	4628      	mov	r0, r5
 800112e:	f000 f83f 	bl	80011b0 <__swbuf_r>
 8001132:	3001      	adds	r0, #1
 8001134:	d011      	beq.n	800115a <_puts_r+0x72>
 8001136:	200a      	movs	r0, #10
 8001138:	e011      	b.n	800115e <_puts_r+0x76>
 800113a:	4b17      	ldr	r3, [pc, #92]	; (8001198 <_puts_r+0xb0>)
 800113c:	429c      	cmp	r4, r3
 800113e:	d101      	bne.n	8001144 <_puts_r+0x5c>
 8001140:	68ac      	ldr	r4, [r5, #8]
 8001142:	e7e3      	b.n	800110c <_puts_r+0x24>
 8001144:	4b15      	ldr	r3, [pc, #84]	; (800119c <_puts_r+0xb4>)
 8001146:	429c      	cmp	r4, r3
 8001148:	bf08      	it	eq
 800114a:	68ec      	ldreq	r4, [r5, #12]
 800114c:	e7de      	b.n	800110c <_puts_r+0x24>
 800114e:	4621      	mov	r1, r4
 8001150:	4628      	mov	r0, r5
 8001152:	f000 f87f 	bl	8001254 <__swsetup_r>
 8001156:	2800      	cmp	r0, #0
 8001158:	d0dd      	beq.n	8001116 <_puts_r+0x2e>
 800115a:	f04f 30ff 	mov.w	r0, #4294967295
 800115e:	bd70      	pop	{r4, r5, r6, pc}
 8001160:	2b00      	cmp	r3, #0
 8001162:	da04      	bge.n	800116e <_puts_r+0x86>
 8001164:	69a2      	ldr	r2, [r4, #24]
 8001166:	429a      	cmp	r2, r3
 8001168:	dc06      	bgt.n	8001178 <_puts_r+0x90>
 800116a:	290a      	cmp	r1, #10
 800116c:	d004      	beq.n	8001178 <_puts_r+0x90>
 800116e:	6823      	ldr	r3, [r4, #0]
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	6022      	str	r2, [r4, #0]
 8001174:	7019      	strb	r1, [r3, #0]
 8001176:	e7cf      	b.n	8001118 <_puts_r+0x30>
 8001178:	4622      	mov	r2, r4
 800117a:	4628      	mov	r0, r5
 800117c:	f000 f818 	bl	80011b0 <__swbuf_r>
 8001180:	3001      	adds	r0, #1
 8001182:	d1c9      	bne.n	8001118 <_puts_r+0x30>
 8001184:	e7e9      	b.n	800115a <_puts_r+0x72>
 8001186:	6823      	ldr	r3, [r4, #0]
 8001188:	200a      	movs	r0, #10
 800118a:	1c5a      	adds	r2, r3, #1
 800118c:	6022      	str	r2, [r4, #0]
 800118e:	7018      	strb	r0, [r3, #0]
 8001190:	e7e5      	b.n	800115e <_puts_r+0x76>
 8001192:	bf00      	nop
 8001194:	0800205c 	.word	0x0800205c
 8001198:	0800207c 	.word	0x0800207c
 800119c:	0800203c 	.word	0x0800203c

080011a0 <puts>:
 80011a0:	4b02      	ldr	r3, [pc, #8]	; (80011ac <puts+0xc>)
 80011a2:	4601      	mov	r1, r0
 80011a4:	6818      	ldr	r0, [r3, #0]
 80011a6:	f7ff bf9f 	b.w	80010e8 <_puts_r>
 80011aa:	bf00      	nop
 80011ac:	20000000 	.word	0x20000000

080011b0 <__swbuf_r>:
 80011b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011b2:	460e      	mov	r6, r1
 80011b4:	4614      	mov	r4, r2
 80011b6:	4605      	mov	r5, r0
 80011b8:	b118      	cbz	r0, 80011c2 <__swbuf_r+0x12>
 80011ba:	6983      	ldr	r3, [r0, #24]
 80011bc:	b90b      	cbnz	r3, 80011c2 <__swbuf_r+0x12>
 80011be:	f000 f9a7 	bl	8001510 <__sinit>
 80011c2:	4b21      	ldr	r3, [pc, #132]	; (8001248 <__swbuf_r+0x98>)
 80011c4:	429c      	cmp	r4, r3
 80011c6:	d12a      	bne.n	800121e <__swbuf_r+0x6e>
 80011c8:	686c      	ldr	r4, [r5, #4]
 80011ca:	69a3      	ldr	r3, [r4, #24]
 80011cc:	60a3      	str	r3, [r4, #8]
 80011ce:	89a3      	ldrh	r3, [r4, #12]
 80011d0:	071a      	lsls	r2, r3, #28
 80011d2:	d52e      	bpl.n	8001232 <__swbuf_r+0x82>
 80011d4:	6923      	ldr	r3, [r4, #16]
 80011d6:	b363      	cbz	r3, 8001232 <__swbuf_r+0x82>
 80011d8:	6923      	ldr	r3, [r4, #16]
 80011da:	6820      	ldr	r0, [r4, #0]
 80011dc:	1ac0      	subs	r0, r0, r3
 80011de:	6963      	ldr	r3, [r4, #20]
 80011e0:	b2f6      	uxtb	r6, r6
 80011e2:	4283      	cmp	r3, r0
 80011e4:	4637      	mov	r7, r6
 80011e6:	dc04      	bgt.n	80011f2 <__swbuf_r+0x42>
 80011e8:	4621      	mov	r1, r4
 80011ea:	4628      	mov	r0, r5
 80011ec:	f000 f926 	bl	800143c <_fflush_r>
 80011f0:	bb28      	cbnz	r0, 800123e <__swbuf_r+0x8e>
 80011f2:	68a3      	ldr	r3, [r4, #8]
 80011f4:	3b01      	subs	r3, #1
 80011f6:	60a3      	str	r3, [r4, #8]
 80011f8:	6823      	ldr	r3, [r4, #0]
 80011fa:	1c5a      	adds	r2, r3, #1
 80011fc:	6022      	str	r2, [r4, #0]
 80011fe:	701e      	strb	r6, [r3, #0]
 8001200:	6963      	ldr	r3, [r4, #20]
 8001202:	3001      	adds	r0, #1
 8001204:	4283      	cmp	r3, r0
 8001206:	d004      	beq.n	8001212 <__swbuf_r+0x62>
 8001208:	89a3      	ldrh	r3, [r4, #12]
 800120a:	07db      	lsls	r3, r3, #31
 800120c:	d519      	bpl.n	8001242 <__swbuf_r+0x92>
 800120e:	2e0a      	cmp	r6, #10
 8001210:	d117      	bne.n	8001242 <__swbuf_r+0x92>
 8001212:	4621      	mov	r1, r4
 8001214:	4628      	mov	r0, r5
 8001216:	f000 f911 	bl	800143c <_fflush_r>
 800121a:	b190      	cbz	r0, 8001242 <__swbuf_r+0x92>
 800121c:	e00f      	b.n	800123e <__swbuf_r+0x8e>
 800121e:	4b0b      	ldr	r3, [pc, #44]	; (800124c <__swbuf_r+0x9c>)
 8001220:	429c      	cmp	r4, r3
 8001222:	d101      	bne.n	8001228 <__swbuf_r+0x78>
 8001224:	68ac      	ldr	r4, [r5, #8]
 8001226:	e7d0      	b.n	80011ca <__swbuf_r+0x1a>
 8001228:	4b09      	ldr	r3, [pc, #36]	; (8001250 <__swbuf_r+0xa0>)
 800122a:	429c      	cmp	r4, r3
 800122c:	bf08      	it	eq
 800122e:	68ec      	ldreq	r4, [r5, #12]
 8001230:	e7cb      	b.n	80011ca <__swbuf_r+0x1a>
 8001232:	4621      	mov	r1, r4
 8001234:	4628      	mov	r0, r5
 8001236:	f000 f80d 	bl	8001254 <__swsetup_r>
 800123a:	2800      	cmp	r0, #0
 800123c:	d0cc      	beq.n	80011d8 <__swbuf_r+0x28>
 800123e:	f04f 37ff 	mov.w	r7, #4294967295
 8001242:	4638      	mov	r0, r7
 8001244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001246:	bf00      	nop
 8001248:	0800205c 	.word	0x0800205c
 800124c:	0800207c 	.word	0x0800207c
 8001250:	0800203c 	.word	0x0800203c

08001254 <__swsetup_r>:
 8001254:	4b32      	ldr	r3, [pc, #200]	; (8001320 <__swsetup_r+0xcc>)
 8001256:	b570      	push	{r4, r5, r6, lr}
 8001258:	681d      	ldr	r5, [r3, #0]
 800125a:	4606      	mov	r6, r0
 800125c:	460c      	mov	r4, r1
 800125e:	b125      	cbz	r5, 800126a <__swsetup_r+0x16>
 8001260:	69ab      	ldr	r3, [r5, #24]
 8001262:	b913      	cbnz	r3, 800126a <__swsetup_r+0x16>
 8001264:	4628      	mov	r0, r5
 8001266:	f000 f953 	bl	8001510 <__sinit>
 800126a:	4b2e      	ldr	r3, [pc, #184]	; (8001324 <__swsetup_r+0xd0>)
 800126c:	429c      	cmp	r4, r3
 800126e:	d10f      	bne.n	8001290 <__swsetup_r+0x3c>
 8001270:	686c      	ldr	r4, [r5, #4]
 8001272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001276:	b29a      	uxth	r2, r3
 8001278:	0715      	lsls	r5, r2, #28
 800127a:	d42c      	bmi.n	80012d6 <__swsetup_r+0x82>
 800127c:	06d0      	lsls	r0, r2, #27
 800127e:	d411      	bmi.n	80012a4 <__swsetup_r+0x50>
 8001280:	2209      	movs	r2, #9
 8001282:	6032      	str	r2, [r6, #0]
 8001284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001288:	81a3      	strh	r3, [r4, #12]
 800128a:	f04f 30ff 	mov.w	r0, #4294967295
 800128e:	e03e      	b.n	800130e <__swsetup_r+0xba>
 8001290:	4b25      	ldr	r3, [pc, #148]	; (8001328 <__swsetup_r+0xd4>)
 8001292:	429c      	cmp	r4, r3
 8001294:	d101      	bne.n	800129a <__swsetup_r+0x46>
 8001296:	68ac      	ldr	r4, [r5, #8]
 8001298:	e7eb      	b.n	8001272 <__swsetup_r+0x1e>
 800129a:	4b24      	ldr	r3, [pc, #144]	; (800132c <__swsetup_r+0xd8>)
 800129c:	429c      	cmp	r4, r3
 800129e:	bf08      	it	eq
 80012a0:	68ec      	ldreq	r4, [r5, #12]
 80012a2:	e7e6      	b.n	8001272 <__swsetup_r+0x1e>
 80012a4:	0751      	lsls	r1, r2, #29
 80012a6:	d512      	bpl.n	80012ce <__swsetup_r+0x7a>
 80012a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012aa:	b141      	cbz	r1, 80012be <__swsetup_r+0x6a>
 80012ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012b0:	4299      	cmp	r1, r3
 80012b2:	d002      	beq.n	80012ba <__swsetup_r+0x66>
 80012b4:	4630      	mov	r0, r6
 80012b6:	f000 fa19 	bl	80016ec <_free_r>
 80012ba:	2300      	movs	r3, #0
 80012bc:	6363      	str	r3, [r4, #52]	; 0x34
 80012be:	89a3      	ldrh	r3, [r4, #12]
 80012c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80012c4:	81a3      	strh	r3, [r4, #12]
 80012c6:	2300      	movs	r3, #0
 80012c8:	6063      	str	r3, [r4, #4]
 80012ca:	6923      	ldr	r3, [r4, #16]
 80012cc:	6023      	str	r3, [r4, #0]
 80012ce:	89a3      	ldrh	r3, [r4, #12]
 80012d0:	f043 0308 	orr.w	r3, r3, #8
 80012d4:	81a3      	strh	r3, [r4, #12]
 80012d6:	6923      	ldr	r3, [r4, #16]
 80012d8:	b94b      	cbnz	r3, 80012ee <__swsetup_r+0x9a>
 80012da:	89a3      	ldrh	r3, [r4, #12]
 80012dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80012e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012e4:	d003      	beq.n	80012ee <__swsetup_r+0x9a>
 80012e6:	4621      	mov	r1, r4
 80012e8:	4630      	mov	r0, r6
 80012ea:	f000 f9bf 	bl	800166c <__smakebuf_r>
 80012ee:	89a2      	ldrh	r2, [r4, #12]
 80012f0:	f012 0301 	ands.w	r3, r2, #1
 80012f4:	d00c      	beq.n	8001310 <__swsetup_r+0xbc>
 80012f6:	2300      	movs	r3, #0
 80012f8:	60a3      	str	r3, [r4, #8]
 80012fa:	6963      	ldr	r3, [r4, #20]
 80012fc:	425b      	negs	r3, r3
 80012fe:	61a3      	str	r3, [r4, #24]
 8001300:	6923      	ldr	r3, [r4, #16]
 8001302:	b953      	cbnz	r3, 800131a <__swsetup_r+0xc6>
 8001304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001308:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800130c:	d1ba      	bne.n	8001284 <__swsetup_r+0x30>
 800130e:	bd70      	pop	{r4, r5, r6, pc}
 8001310:	0792      	lsls	r2, r2, #30
 8001312:	bf58      	it	pl
 8001314:	6963      	ldrpl	r3, [r4, #20]
 8001316:	60a3      	str	r3, [r4, #8]
 8001318:	e7f2      	b.n	8001300 <__swsetup_r+0xac>
 800131a:	2000      	movs	r0, #0
 800131c:	e7f7      	b.n	800130e <__swsetup_r+0xba>
 800131e:	bf00      	nop
 8001320:	20000000 	.word	0x20000000
 8001324:	0800205c 	.word	0x0800205c
 8001328:	0800207c 	.word	0x0800207c
 800132c:	0800203c 	.word	0x0800203c

08001330 <__sflush_r>:
 8001330:	898a      	ldrh	r2, [r1, #12]
 8001332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001336:	4605      	mov	r5, r0
 8001338:	0710      	lsls	r0, r2, #28
 800133a:	460c      	mov	r4, r1
 800133c:	d458      	bmi.n	80013f0 <__sflush_r+0xc0>
 800133e:	684b      	ldr	r3, [r1, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	dc05      	bgt.n	8001350 <__sflush_r+0x20>
 8001344:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001346:	2b00      	cmp	r3, #0
 8001348:	dc02      	bgt.n	8001350 <__sflush_r+0x20>
 800134a:	2000      	movs	r0, #0
 800134c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001350:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001352:	2e00      	cmp	r6, #0
 8001354:	d0f9      	beq.n	800134a <__sflush_r+0x1a>
 8001356:	2300      	movs	r3, #0
 8001358:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800135c:	682f      	ldr	r7, [r5, #0]
 800135e:	6a21      	ldr	r1, [r4, #32]
 8001360:	602b      	str	r3, [r5, #0]
 8001362:	d032      	beq.n	80013ca <__sflush_r+0x9a>
 8001364:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001366:	89a3      	ldrh	r3, [r4, #12]
 8001368:	075a      	lsls	r2, r3, #29
 800136a:	d505      	bpl.n	8001378 <__sflush_r+0x48>
 800136c:	6863      	ldr	r3, [r4, #4]
 800136e:	1ac0      	subs	r0, r0, r3
 8001370:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001372:	b10b      	cbz	r3, 8001378 <__sflush_r+0x48>
 8001374:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001376:	1ac0      	subs	r0, r0, r3
 8001378:	2300      	movs	r3, #0
 800137a:	4602      	mov	r2, r0
 800137c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800137e:	6a21      	ldr	r1, [r4, #32]
 8001380:	4628      	mov	r0, r5
 8001382:	47b0      	blx	r6
 8001384:	1c43      	adds	r3, r0, #1
 8001386:	89a3      	ldrh	r3, [r4, #12]
 8001388:	d106      	bne.n	8001398 <__sflush_r+0x68>
 800138a:	6829      	ldr	r1, [r5, #0]
 800138c:	291d      	cmp	r1, #29
 800138e:	d848      	bhi.n	8001422 <__sflush_r+0xf2>
 8001390:	4a29      	ldr	r2, [pc, #164]	; (8001438 <__sflush_r+0x108>)
 8001392:	40ca      	lsrs	r2, r1
 8001394:	07d6      	lsls	r6, r2, #31
 8001396:	d544      	bpl.n	8001422 <__sflush_r+0xf2>
 8001398:	2200      	movs	r2, #0
 800139a:	6062      	str	r2, [r4, #4]
 800139c:	04d9      	lsls	r1, r3, #19
 800139e:	6922      	ldr	r2, [r4, #16]
 80013a0:	6022      	str	r2, [r4, #0]
 80013a2:	d504      	bpl.n	80013ae <__sflush_r+0x7e>
 80013a4:	1c42      	adds	r2, r0, #1
 80013a6:	d101      	bne.n	80013ac <__sflush_r+0x7c>
 80013a8:	682b      	ldr	r3, [r5, #0]
 80013aa:	b903      	cbnz	r3, 80013ae <__sflush_r+0x7e>
 80013ac:	6560      	str	r0, [r4, #84]	; 0x54
 80013ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013b0:	602f      	str	r7, [r5, #0]
 80013b2:	2900      	cmp	r1, #0
 80013b4:	d0c9      	beq.n	800134a <__sflush_r+0x1a>
 80013b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80013ba:	4299      	cmp	r1, r3
 80013bc:	d002      	beq.n	80013c4 <__sflush_r+0x94>
 80013be:	4628      	mov	r0, r5
 80013c0:	f000 f994 	bl	80016ec <_free_r>
 80013c4:	2000      	movs	r0, #0
 80013c6:	6360      	str	r0, [r4, #52]	; 0x34
 80013c8:	e7c0      	b.n	800134c <__sflush_r+0x1c>
 80013ca:	2301      	movs	r3, #1
 80013cc:	4628      	mov	r0, r5
 80013ce:	47b0      	blx	r6
 80013d0:	1c41      	adds	r1, r0, #1
 80013d2:	d1c8      	bne.n	8001366 <__sflush_r+0x36>
 80013d4:	682b      	ldr	r3, [r5, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0c5      	beq.n	8001366 <__sflush_r+0x36>
 80013da:	2b1d      	cmp	r3, #29
 80013dc:	d001      	beq.n	80013e2 <__sflush_r+0xb2>
 80013de:	2b16      	cmp	r3, #22
 80013e0:	d101      	bne.n	80013e6 <__sflush_r+0xb6>
 80013e2:	602f      	str	r7, [r5, #0]
 80013e4:	e7b1      	b.n	800134a <__sflush_r+0x1a>
 80013e6:	89a3      	ldrh	r3, [r4, #12]
 80013e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013ec:	81a3      	strh	r3, [r4, #12]
 80013ee:	e7ad      	b.n	800134c <__sflush_r+0x1c>
 80013f0:	690f      	ldr	r7, [r1, #16]
 80013f2:	2f00      	cmp	r7, #0
 80013f4:	d0a9      	beq.n	800134a <__sflush_r+0x1a>
 80013f6:	0793      	lsls	r3, r2, #30
 80013f8:	680e      	ldr	r6, [r1, #0]
 80013fa:	bf08      	it	eq
 80013fc:	694b      	ldreq	r3, [r1, #20]
 80013fe:	600f      	str	r7, [r1, #0]
 8001400:	bf18      	it	ne
 8001402:	2300      	movne	r3, #0
 8001404:	eba6 0807 	sub.w	r8, r6, r7
 8001408:	608b      	str	r3, [r1, #8]
 800140a:	f1b8 0f00 	cmp.w	r8, #0
 800140e:	dd9c      	ble.n	800134a <__sflush_r+0x1a>
 8001410:	4643      	mov	r3, r8
 8001412:	463a      	mov	r2, r7
 8001414:	6a21      	ldr	r1, [r4, #32]
 8001416:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001418:	4628      	mov	r0, r5
 800141a:	47b0      	blx	r6
 800141c:	2800      	cmp	r0, #0
 800141e:	dc06      	bgt.n	800142e <__sflush_r+0xfe>
 8001420:	89a3      	ldrh	r3, [r4, #12]
 8001422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001426:	81a3      	strh	r3, [r4, #12]
 8001428:	f04f 30ff 	mov.w	r0, #4294967295
 800142c:	e78e      	b.n	800134c <__sflush_r+0x1c>
 800142e:	4407      	add	r7, r0
 8001430:	eba8 0800 	sub.w	r8, r8, r0
 8001434:	e7e9      	b.n	800140a <__sflush_r+0xda>
 8001436:	bf00      	nop
 8001438:	20400001 	.word	0x20400001

0800143c <_fflush_r>:
 800143c:	b538      	push	{r3, r4, r5, lr}
 800143e:	690b      	ldr	r3, [r1, #16]
 8001440:	4605      	mov	r5, r0
 8001442:	460c      	mov	r4, r1
 8001444:	b1db      	cbz	r3, 800147e <_fflush_r+0x42>
 8001446:	b118      	cbz	r0, 8001450 <_fflush_r+0x14>
 8001448:	6983      	ldr	r3, [r0, #24]
 800144a:	b90b      	cbnz	r3, 8001450 <_fflush_r+0x14>
 800144c:	f000 f860 	bl	8001510 <__sinit>
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <_fflush_r+0x48>)
 8001452:	429c      	cmp	r4, r3
 8001454:	d109      	bne.n	800146a <_fflush_r+0x2e>
 8001456:	686c      	ldr	r4, [r5, #4]
 8001458:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800145c:	b17b      	cbz	r3, 800147e <_fflush_r+0x42>
 800145e:	4621      	mov	r1, r4
 8001460:	4628      	mov	r0, r5
 8001462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001466:	f7ff bf63 	b.w	8001330 <__sflush_r>
 800146a:	4b07      	ldr	r3, [pc, #28]	; (8001488 <_fflush_r+0x4c>)
 800146c:	429c      	cmp	r4, r3
 800146e:	d101      	bne.n	8001474 <_fflush_r+0x38>
 8001470:	68ac      	ldr	r4, [r5, #8]
 8001472:	e7f1      	b.n	8001458 <_fflush_r+0x1c>
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <_fflush_r+0x50>)
 8001476:	429c      	cmp	r4, r3
 8001478:	bf08      	it	eq
 800147a:	68ec      	ldreq	r4, [r5, #12]
 800147c:	e7ec      	b.n	8001458 <_fflush_r+0x1c>
 800147e:	2000      	movs	r0, #0
 8001480:	bd38      	pop	{r3, r4, r5, pc}
 8001482:	bf00      	nop
 8001484:	0800205c 	.word	0x0800205c
 8001488:	0800207c 	.word	0x0800207c
 800148c:	0800203c 	.word	0x0800203c

08001490 <std>:
 8001490:	2300      	movs	r3, #0
 8001492:	b510      	push	{r4, lr}
 8001494:	4604      	mov	r4, r0
 8001496:	e9c0 3300 	strd	r3, r3, [r0]
 800149a:	6083      	str	r3, [r0, #8]
 800149c:	8181      	strh	r1, [r0, #12]
 800149e:	6643      	str	r3, [r0, #100]	; 0x64
 80014a0:	81c2      	strh	r2, [r0, #14]
 80014a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80014a6:	6183      	str	r3, [r0, #24]
 80014a8:	4619      	mov	r1, r3
 80014aa:	2208      	movs	r2, #8
 80014ac:	305c      	adds	r0, #92	; 0x5c
 80014ae:	f7ff fdfb 	bl	80010a8 <memset>
 80014b2:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <std+0x38>)
 80014b4:	6263      	str	r3, [r4, #36]	; 0x24
 80014b6:	4b05      	ldr	r3, [pc, #20]	; (80014cc <std+0x3c>)
 80014b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80014ba:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <std+0x40>)
 80014bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80014be:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <std+0x44>)
 80014c0:	6224      	str	r4, [r4, #32]
 80014c2:	6323      	str	r3, [r4, #48]	; 0x30
 80014c4:	bd10      	pop	{r4, pc}
 80014c6:	bf00      	nop
 80014c8:	08001ded 	.word	0x08001ded
 80014cc:	08001e0f 	.word	0x08001e0f
 80014d0:	08001e47 	.word	0x08001e47
 80014d4:	08001e6b 	.word	0x08001e6b

080014d8 <_cleanup_r>:
 80014d8:	4901      	ldr	r1, [pc, #4]	; (80014e0 <_cleanup_r+0x8>)
 80014da:	f000 b885 	b.w	80015e8 <_fwalk_reent>
 80014de:	bf00      	nop
 80014e0:	0800143d 	.word	0x0800143d

080014e4 <__sfmoreglue>:
 80014e4:	b570      	push	{r4, r5, r6, lr}
 80014e6:	1e4a      	subs	r2, r1, #1
 80014e8:	2568      	movs	r5, #104	; 0x68
 80014ea:	4355      	muls	r5, r2
 80014ec:	460e      	mov	r6, r1
 80014ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80014f2:	f000 f949 	bl	8001788 <_malloc_r>
 80014f6:	4604      	mov	r4, r0
 80014f8:	b140      	cbz	r0, 800150c <__sfmoreglue+0x28>
 80014fa:	2100      	movs	r1, #0
 80014fc:	e9c0 1600 	strd	r1, r6, [r0]
 8001500:	300c      	adds	r0, #12
 8001502:	60a0      	str	r0, [r4, #8]
 8001504:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001508:	f7ff fdce 	bl	80010a8 <memset>
 800150c:	4620      	mov	r0, r4
 800150e:	bd70      	pop	{r4, r5, r6, pc}

08001510 <__sinit>:
 8001510:	6983      	ldr	r3, [r0, #24]
 8001512:	b510      	push	{r4, lr}
 8001514:	4604      	mov	r4, r0
 8001516:	bb33      	cbnz	r3, 8001566 <__sinit+0x56>
 8001518:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800151c:	6503      	str	r3, [r0, #80]	; 0x50
 800151e:	4b12      	ldr	r3, [pc, #72]	; (8001568 <__sinit+0x58>)
 8001520:	4a12      	ldr	r2, [pc, #72]	; (800156c <__sinit+0x5c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6282      	str	r2, [r0, #40]	; 0x28
 8001526:	4298      	cmp	r0, r3
 8001528:	bf04      	itt	eq
 800152a:	2301      	moveq	r3, #1
 800152c:	6183      	streq	r3, [r0, #24]
 800152e:	f000 f81f 	bl	8001570 <__sfp>
 8001532:	6060      	str	r0, [r4, #4]
 8001534:	4620      	mov	r0, r4
 8001536:	f000 f81b 	bl	8001570 <__sfp>
 800153a:	60a0      	str	r0, [r4, #8]
 800153c:	4620      	mov	r0, r4
 800153e:	f000 f817 	bl	8001570 <__sfp>
 8001542:	2200      	movs	r2, #0
 8001544:	60e0      	str	r0, [r4, #12]
 8001546:	2104      	movs	r1, #4
 8001548:	6860      	ldr	r0, [r4, #4]
 800154a:	f7ff ffa1 	bl	8001490 <std>
 800154e:	2201      	movs	r2, #1
 8001550:	2109      	movs	r1, #9
 8001552:	68a0      	ldr	r0, [r4, #8]
 8001554:	f7ff ff9c 	bl	8001490 <std>
 8001558:	2202      	movs	r2, #2
 800155a:	2112      	movs	r1, #18
 800155c:	68e0      	ldr	r0, [r4, #12]
 800155e:	f7ff ff97 	bl	8001490 <std>
 8001562:	2301      	movs	r3, #1
 8001564:	61a3      	str	r3, [r4, #24]
 8001566:	bd10      	pop	{r4, pc}
 8001568:	08002038 	.word	0x08002038
 800156c:	080014d9 	.word	0x080014d9

08001570 <__sfp>:
 8001570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001572:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <__sfp+0x70>)
 8001574:	681e      	ldr	r6, [r3, #0]
 8001576:	69b3      	ldr	r3, [r6, #24]
 8001578:	4607      	mov	r7, r0
 800157a:	b913      	cbnz	r3, 8001582 <__sfp+0x12>
 800157c:	4630      	mov	r0, r6
 800157e:	f7ff ffc7 	bl	8001510 <__sinit>
 8001582:	3648      	adds	r6, #72	; 0x48
 8001584:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001588:	3b01      	subs	r3, #1
 800158a:	d503      	bpl.n	8001594 <__sfp+0x24>
 800158c:	6833      	ldr	r3, [r6, #0]
 800158e:	b133      	cbz	r3, 800159e <__sfp+0x2e>
 8001590:	6836      	ldr	r6, [r6, #0]
 8001592:	e7f7      	b.n	8001584 <__sfp+0x14>
 8001594:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001598:	b16d      	cbz	r5, 80015b6 <__sfp+0x46>
 800159a:	3468      	adds	r4, #104	; 0x68
 800159c:	e7f4      	b.n	8001588 <__sfp+0x18>
 800159e:	2104      	movs	r1, #4
 80015a0:	4638      	mov	r0, r7
 80015a2:	f7ff ff9f 	bl	80014e4 <__sfmoreglue>
 80015a6:	6030      	str	r0, [r6, #0]
 80015a8:	2800      	cmp	r0, #0
 80015aa:	d1f1      	bne.n	8001590 <__sfp+0x20>
 80015ac:	230c      	movs	r3, #12
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	4604      	mov	r4, r0
 80015b2:	4620      	mov	r0, r4
 80015b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <__sfp+0x74>)
 80015b8:	6665      	str	r5, [r4, #100]	; 0x64
 80015ba:	e9c4 5500 	strd	r5, r5, [r4]
 80015be:	60a5      	str	r5, [r4, #8]
 80015c0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80015c4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80015c8:	2208      	movs	r2, #8
 80015ca:	4629      	mov	r1, r5
 80015cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80015d0:	f7ff fd6a 	bl	80010a8 <memset>
 80015d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80015d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80015dc:	e7e9      	b.n	80015b2 <__sfp+0x42>
 80015de:	bf00      	nop
 80015e0:	08002038 	.word	0x08002038
 80015e4:	ffff0001 	.word	0xffff0001

080015e8 <_fwalk_reent>:
 80015e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015ec:	4680      	mov	r8, r0
 80015ee:	4689      	mov	r9, r1
 80015f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80015f4:	2600      	movs	r6, #0
 80015f6:	b914      	cbnz	r4, 80015fe <_fwalk_reent+0x16>
 80015f8:	4630      	mov	r0, r6
 80015fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80015fe:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001602:	3f01      	subs	r7, #1
 8001604:	d501      	bpl.n	800160a <_fwalk_reent+0x22>
 8001606:	6824      	ldr	r4, [r4, #0]
 8001608:	e7f5      	b.n	80015f6 <_fwalk_reent+0xe>
 800160a:	89ab      	ldrh	r3, [r5, #12]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d907      	bls.n	8001620 <_fwalk_reent+0x38>
 8001610:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001614:	3301      	adds	r3, #1
 8001616:	d003      	beq.n	8001620 <_fwalk_reent+0x38>
 8001618:	4629      	mov	r1, r5
 800161a:	4640      	mov	r0, r8
 800161c:	47c8      	blx	r9
 800161e:	4306      	orrs	r6, r0
 8001620:	3568      	adds	r5, #104	; 0x68
 8001622:	e7ee      	b.n	8001602 <_fwalk_reent+0x1a>

08001624 <__swhatbuf_r>:
 8001624:	b570      	push	{r4, r5, r6, lr}
 8001626:	460e      	mov	r6, r1
 8001628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800162c:	2900      	cmp	r1, #0
 800162e:	b096      	sub	sp, #88	; 0x58
 8001630:	4614      	mov	r4, r2
 8001632:	461d      	mov	r5, r3
 8001634:	da07      	bge.n	8001646 <__swhatbuf_r+0x22>
 8001636:	2300      	movs	r3, #0
 8001638:	602b      	str	r3, [r5, #0]
 800163a:	89b3      	ldrh	r3, [r6, #12]
 800163c:	061a      	lsls	r2, r3, #24
 800163e:	d410      	bmi.n	8001662 <__swhatbuf_r+0x3e>
 8001640:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001644:	e00e      	b.n	8001664 <__swhatbuf_r+0x40>
 8001646:	466a      	mov	r2, sp
 8001648:	f000 fc36 	bl	8001eb8 <_fstat_r>
 800164c:	2800      	cmp	r0, #0
 800164e:	dbf2      	blt.n	8001636 <__swhatbuf_r+0x12>
 8001650:	9a01      	ldr	r2, [sp, #4]
 8001652:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001656:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800165a:	425a      	negs	r2, r3
 800165c:	415a      	adcs	r2, r3
 800165e:	602a      	str	r2, [r5, #0]
 8001660:	e7ee      	b.n	8001640 <__swhatbuf_r+0x1c>
 8001662:	2340      	movs	r3, #64	; 0x40
 8001664:	2000      	movs	r0, #0
 8001666:	6023      	str	r3, [r4, #0]
 8001668:	b016      	add	sp, #88	; 0x58
 800166a:	bd70      	pop	{r4, r5, r6, pc}

0800166c <__smakebuf_r>:
 800166c:	898b      	ldrh	r3, [r1, #12]
 800166e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001670:	079d      	lsls	r5, r3, #30
 8001672:	4606      	mov	r6, r0
 8001674:	460c      	mov	r4, r1
 8001676:	d507      	bpl.n	8001688 <__smakebuf_r+0x1c>
 8001678:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800167c:	6023      	str	r3, [r4, #0]
 800167e:	6123      	str	r3, [r4, #16]
 8001680:	2301      	movs	r3, #1
 8001682:	6163      	str	r3, [r4, #20]
 8001684:	b002      	add	sp, #8
 8001686:	bd70      	pop	{r4, r5, r6, pc}
 8001688:	ab01      	add	r3, sp, #4
 800168a:	466a      	mov	r2, sp
 800168c:	f7ff ffca 	bl	8001624 <__swhatbuf_r>
 8001690:	9900      	ldr	r1, [sp, #0]
 8001692:	4605      	mov	r5, r0
 8001694:	4630      	mov	r0, r6
 8001696:	f000 f877 	bl	8001788 <_malloc_r>
 800169a:	b948      	cbnz	r0, 80016b0 <__smakebuf_r+0x44>
 800169c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016a0:	059a      	lsls	r2, r3, #22
 80016a2:	d4ef      	bmi.n	8001684 <__smakebuf_r+0x18>
 80016a4:	f023 0303 	bic.w	r3, r3, #3
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	81a3      	strh	r3, [r4, #12]
 80016ae:	e7e3      	b.n	8001678 <__smakebuf_r+0xc>
 80016b0:	4b0d      	ldr	r3, [pc, #52]	; (80016e8 <__smakebuf_r+0x7c>)
 80016b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80016b4:	89a3      	ldrh	r3, [r4, #12]
 80016b6:	6020      	str	r0, [r4, #0]
 80016b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016bc:	81a3      	strh	r3, [r4, #12]
 80016be:	9b00      	ldr	r3, [sp, #0]
 80016c0:	6163      	str	r3, [r4, #20]
 80016c2:	9b01      	ldr	r3, [sp, #4]
 80016c4:	6120      	str	r0, [r4, #16]
 80016c6:	b15b      	cbz	r3, 80016e0 <__smakebuf_r+0x74>
 80016c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016cc:	4630      	mov	r0, r6
 80016ce:	f000 fc05 	bl	8001edc <_isatty_r>
 80016d2:	b128      	cbz	r0, 80016e0 <__smakebuf_r+0x74>
 80016d4:	89a3      	ldrh	r3, [r4, #12]
 80016d6:	f023 0303 	bic.w	r3, r3, #3
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	81a3      	strh	r3, [r4, #12]
 80016e0:	89a3      	ldrh	r3, [r4, #12]
 80016e2:	431d      	orrs	r5, r3
 80016e4:	81a5      	strh	r5, [r4, #12]
 80016e6:	e7cd      	b.n	8001684 <__smakebuf_r+0x18>
 80016e8:	080014d9 	.word	0x080014d9

080016ec <_free_r>:
 80016ec:	b538      	push	{r3, r4, r5, lr}
 80016ee:	4605      	mov	r5, r0
 80016f0:	2900      	cmp	r1, #0
 80016f2:	d045      	beq.n	8001780 <_free_r+0x94>
 80016f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016f8:	1f0c      	subs	r4, r1, #4
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	bfb8      	it	lt
 80016fe:	18e4      	addlt	r4, r4, r3
 8001700:	f000 fc0e 	bl	8001f20 <__malloc_lock>
 8001704:	4a1f      	ldr	r2, [pc, #124]	; (8001784 <_free_r+0x98>)
 8001706:	6813      	ldr	r3, [r2, #0]
 8001708:	4610      	mov	r0, r2
 800170a:	b933      	cbnz	r3, 800171a <_free_r+0x2e>
 800170c:	6063      	str	r3, [r4, #4]
 800170e:	6014      	str	r4, [r2, #0]
 8001710:	4628      	mov	r0, r5
 8001712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001716:	f000 bc04 	b.w	8001f22 <__malloc_unlock>
 800171a:	42a3      	cmp	r3, r4
 800171c:	d90c      	bls.n	8001738 <_free_r+0x4c>
 800171e:	6821      	ldr	r1, [r4, #0]
 8001720:	1862      	adds	r2, r4, r1
 8001722:	4293      	cmp	r3, r2
 8001724:	bf04      	itt	eq
 8001726:	681a      	ldreq	r2, [r3, #0]
 8001728:	685b      	ldreq	r3, [r3, #4]
 800172a:	6063      	str	r3, [r4, #4]
 800172c:	bf04      	itt	eq
 800172e:	1852      	addeq	r2, r2, r1
 8001730:	6022      	streq	r2, [r4, #0]
 8001732:	6004      	str	r4, [r0, #0]
 8001734:	e7ec      	b.n	8001710 <_free_r+0x24>
 8001736:	4613      	mov	r3, r2
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	b10a      	cbz	r2, 8001740 <_free_r+0x54>
 800173c:	42a2      	cmp	r2, r4
 800173e:	d9fa      	bls.n	8001736 <_free_r+0x4a>
 8001740:	6819      	ldr	r1, [r3, #0]
 8001742:	1858      	adds	r0, r3, r1
 8001744:	42a0      	cmp	r0, r4
 8001746:	d10b      	bne.n	8001760 <_free_r+0x74>
 8001748:	6820      	ldr	r0, [r4, #0]
 800174a:	4401      	add	r1, r0
 800174c:	1858      	adds	r0, r3, r1
 800174e:	4282      	cmp	r2, r0
 8001750:	6019      	str	r1, [r3, #0]
 8001752:	d1dd      	bne.n	8001710 <_free_r+0x24>
 8001754:	6810      	ldr	r0, [r2, #0]
 8001756:	6852      	ldr	r2, [r2, #4]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	4401      	add	r1, r0
 800175c:	6019      	str	r1, [r3, #0]
 800175e:	e7d7      	b.n	8001710 <_free_r+0x24>
 8001760:	d902      	bls.n	8001768 <_free_r+0x7c>
 8001762:	230c      	movs	r3, #12
 8001764:	602b      	str	r3, [r5, #0]
 8001766:	e7d3      	b.n	8001710 <_free_r+0x24>
 8001768:	6820      	ldr	r0, [r4, #0]
 800176a:	1821      	adds	r1, r4, r0
 800176c:	428a      	cmp	r2, r1
 800176e:	bf04      	itt	eq
 8001770:	6811      	ldreq	r1, [r2, #0]
 8001772:	6852      	ldreq	r2, [r2, #4]
 8001774:	6062      	str	r2, [r4, #4]
 8001776:	bf04      	itt	eq
 8001778:	1809      	addeq	r1, r1, r0
 800177a:	6021      	streq	r1, [r4, #0]
 800177c:	605c      	str	r4, [r3, #4]
 800177e:	e7c7      	b.n	8001710 <_free_r+0x24>
 8001780:	bd38      	pop	{r3, r4, r5, pc}
 8001782:	bf00      	nop
 8001784:	20000084 	.word	0x20000084

08001788 <_malloc_r>:
 8001788:	b570      	push	{r4, r5, r6, lr}
 800178a:	1ccd      	adds	r5, r1, #3
 800178c:	f025 0503 	bic.w	r5, r5, #3
 8001790:	3508      	adds	r5, #8
 8001792:	2d0c      	cmp	r5, #12
 8001794:	bf38      	it	cc
 8001796:	250c      	movcc	r5, #12
 8001798:	2d00      	cmp	r5, #0
 800179a:	4606      	mov	r6, r0
 800179c:	db01      	blt.n	80017a2 <_malloc_r+0x1a>
 800179e:	42a9      	cmp	r1, r5
 80017a0:	d903      	bls.n	80017aa <_malloc_r+0x22>
 80017a2:	230c      	movs	r3, #12
 80017a4:	6033      	str	r3, [r6, #0]
 80017a6:	2000      	movs	r0, #0
 80017a8:	bd70      	pop	{r4, r5, r6, pc}
 80017aa:	f000 fbb9 	bl	8001f20 <__malloc_lock>
 80017ae:	4a21      	ldr	r2, [pc, #132]	; (8001834 <_malloc_r+0xac>)
 80017b0:	6814      	ldr	r4, [r2, #0]
 80017b2:	4621      	mov	r1, r4
 80017b4:	b991      	cbnz	r1, 80017dc <_malloc_r+0x54>
 80017b6:	4c20      	ldr	r4, [pc, #128]	; (8001838 <_malloc_r+0xb0>)
 80017b8:	6823      	ldr	r3, [r4, #0]
 80017ba:	b91b      	cbnz	r3, 80017c4 <_malloc_r+0x3c>
 80017bc:	4630      	mov	r0, r6
 80017be:	f000 fb05 	bl	8001dcc <_sbrk_r>
 80017c2:	6020      	str	r0, [r4, #0]
 80017c4:	4629      	mov	r1, r5
 80017c6:	4630      	mov	r0, r6
 80017c8:	f000 fb00 	bl	8001dcc <_sbrk_r>
 80017cc:	1c43      	adds	r3, r0, #1
 80017ce:	d124      	bne.n	800181a <_malloc_r+0x92>
 80017d0:	230c      	movs	r3, #12
 80017d2:	6033      	str	r3, [r6, #0]
 80017d4:	4630      	mov	r0, r6
 80017d6:	f000 fba4 	bl	8001f22 <__malloc_unlock>
 80017da:	e7e4      	b.n	80017a6 <_malloc_r+0x1e>
 80017dc:	680b      	ldr	r3, [r1, #0]
 80017de:	1b5b      	subs	r3, r3, r5
 80017e0:	d418      	bmi.n	8001814 <_malloc_r+0x8c>
 80017e2:	2b0b      	cmp	r3, #11
 80017e4:	d90f      	bls.n	8001806 <_malloc_r+0x7e>
 80017e6:	600b      	str	r3, [r1, #0]
 80017e8:	50cd      	str	r5, [r1, r3]
 80017ea:	18cc      	adds	r4, r1, r3
 80017ec:	4630      	mov	r0, r6
 80017ee:	f000 fb98 	bl	8001f22 <__malloc_unlock>
 80017f2:	f104 000b 	add.w	r0, r4, #11
 80017f6:	1d23      	adds	r3, r4, #4
 80017f8:	f020 0007 	bic.w	r0, r0, #7
 80017fc:	1ac3      	subs	r3, r0, r3
 80017fe:	d0d3      	beq.n	80017a8 <_malloc_r+0x20>
 8001800:	425a      	negs	r2, r3
 8001802:	50e2      	str	r2, [r4, r3]
 8001804:	e7d0      	b.n	80017a8 <_malloc_r+0x20>
 8001806:	428c      	cmp	r4, r1
 8001808:	684b      	ldr	r3, [r1, #4]
 800180a:	bf16      	itet	ne
 800180c:	6063      	strne	r3, [r4, #4]
 800180e:	6013      	streq	r3, [r2, #0]
 8001810:	460c      	movne	r4, r1
 8001812:	e7eb      	b.n	80017ec <_malloc_r+0x64>
 8001814:	460c      	mov	r4, r1
 8001816:	6849      	ldr	r1, [r1, #4]
 8001818:	e7cc      	b.n	80017b4 <_malloc_r+0x2c>
 800181a:	1cc4      	adds	r4, r0, #3
 800181c:	f024 0403 	bic.w	r4, r4, #3
 8001820:	42a0      	cmp	r0, r4
 8001822:	d005      	beq.n	8001830 <_malloc_r+0xa8>
 8001824:	1a21      	subs	r1, r4, r0
 8001826:	4630      	mov	r0, r6
 8001828:	f000 fad0 	bl	8001dcc <_sbrk_r>
 800182c:	3001      	adds	r0, #1
 800182e:	d0cf      	beq.n	80017d0 <_malloc_r+0x48>
 8001830:	6025      	str	r5, [r4, #0]
 8001832:	e7db      	b.n	80017ec <_malloc_r+0x64>
 8001834:	20000084 	.word	0x20000084
 8001838:	20000088 	.word	0x20000088

0800183c <__sfputc_r>:
 800183c:	6893      	ldr	r3, [r2, #8]
 800183e:	3b01      	subs	r3, #1
 8001840:	2b00      	cmp	r3, #0
 8001842:	b410      	push	{r4}
 8001844:	6093      	str	r3, [r2, #8]
 8001846:	da08      	bge.n	800185a <__sfputc_r+0x1e>
 8001848:	6994      	ldr	r4, [r2, #24]
 800184a:	42a3      	cmp	r3, r4
 800184c:	db01      	blt.n	8001852 <__sfputc_r+0x16>
 800184e:	290a      	cmp	r1, #10
 8001850:	d103      	bne.n	800185a <__sfputc_r+0x1e>
 8001852:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001856:	f7ff bcab 	b.w	80011b0 <__swbuf_r>
 800185a:	6813      	ldr	r3, [r2, #0]
 800185c:	1c58      	adds	r0, r3, #1
 800185e:	6010      	str	r0, [r2, #0]
 8001860:	7019      	strb	r1, [r3, #0]
 8001862:	4608      	mov	r0, r1
 8001864:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001868:	4770      	bx	lr

0800186a <__sfputs_r>:
 800186a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800186c:	4606      	mov	r6, r0
 800186e:	460f      	mov	r7, r1
 8001870:	4614      	mov	r4, r2
 8001872:	18d5      	adds	r5, r2, r3
 8001874:	42ac      	cmp	r4, r5
 8001876:	d101      	bne.n	800187c <__sfputs_r+0x12>
 8001878:	2000      	movs	r0, #0
 800187a:	e007      	b.n	800188c <__sfputs_r+0x22>
 800187c:	463a      	mov	r2, r7
 800187e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001882:	4630      	mov	r0, r6
 8001884:	f7ff ffda 	bl	800183c <__sfputc_r>
 8001888:	1c43      	adds	r3, r0, #1
 800188a:	d1f3      	bne.n	8001874 <__sfputs_r+0xa>
 800188c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001890 <_vfiprintf_r>:
 8001890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001894:	460c      	mov	r4, r1
 8001896:	b09d      	sub	sp, #116	; 0x74
 8001898:	4617      	mov	r7, r2
 800189a:	461d      	mov	r5, r3
 800189c:	4606      	mov	r6, r0
 800189e:	b118      	cbz	r0, 80018a8 <_vfiprintf_r+0x18>
 80018a0:	6983      	ldr	r3, [r0, #24]
 80018a2:	b90b      	cbnz	r3, 80018a8 <_vfiprintf_r+0x18>
 80018a4:	f7ff fe34 	bl	8001510 <__sinit>
 80018a8:	4b7c      	ldr	r3, [pc, #496]	; (8001a9c <_vfiprintf_r+0x20c>)
 80018aa:	429c      	cmp	r4, r3
 80018ac:	d158      	bne.n	8001960 <_vfiprintf_r+0xd0>
 80018ae:	6874      	ldr	r4, [r6, #4]
 80018b0:	89a3      	ldrh	r3, [r4, #12]
 80018b2:	0718      	lsls	r0, r3, #28
 80018b4:	d55e      	bpl.n	8001974 <_vfiprintf_r+0xe4>
 80018b6:	6923      	ldr	r3, [r4, #16]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d05b      	beq.n	8001974 <_vfiprintf_r+0xe4>
 80018bc:	2300      	movs	r3, #0
 80018be:	9309      	str	r3, [sp, #36]	; 0x24
 80018c0:	2320      	movs	r3, #32
 80018c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80018c6:	2330      	movs	r3, #48	; 0x30
 80018c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80018cc:	9503      	str	r5, [sp, #12]
 80018ce:	f04f 0b01 	mov.w	fp, #1
 80018d2:	46b8      	mov	r8, r7
 80018d4:	4645      	mov	r5, r8
 80018d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80018da:	b10b      	cbz	r3, 80018e0 <_vfiprintf_r+0x50>
 80018dc:	2b25      	cmp	r3, #37	; 0x25
 80018de:	d154      	bne.n	800198a <_vfiprintf_r+0xfa>
 80018e0:	ebb8 0a07 	subs.w	sl, r8, r7
 80018e4:	d00b      	beq.n	80018fe <_vfiprintf_r+0x6e>
 80018e6:	4653      	mov	r3, sl
 80018e8:	463a      	mov	r2, r7
 80018ea:	4621      	mov	r1, r4
 80018ec:	4630      	mov	r0, r6
 80018ee:	f7ff ffbc 	bl	800186a <__sfputs_r>
 80018f2:	3001      	adds	r0, #1
 80018f4:	f000 80c2 	beq.w	8001a7c <_vfiprintf_r+0x1ec>
 80018f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018fa:	4453      	add	r3, sl
 80018fc:	9309      	str	r3, [sp, #36]	; 0x24
 80018fe:	f898 3000 	ldrb.w	r3, [r8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	f000 80ba 	beq.w	8001a7c <_vfiprintf_r+0x1ec>
 8001908:	2300      	movs	r3, #0
 800190a:	f04f 32ff 	mov.w	r2, #4294967295
 800190e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001912:	9304      	str	r3, [sp, #16]
 8001914:	9307      	str	r3, [sp, #28]
 8001916:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800191a:	931a      	str	r3, [sp, #104]	; 0x68
 800191c:	46a8      	mov	r8, r5
 800191e:	2205      	movs	r2, #5
 8001920:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001924:	485e      	ldr	r0, [pc, #376]	; (8001aa0 <_vfiprintf_r+0x210>)
 8001926:	f7fe fc63 	bl	80001f0 <memchr>
 800192a:	9b04      	ldr	r3, [sp, #16]
 800192c:	bb78      	cbnz	r0, 800198e <_vfiprintf_r+0xfe>
 800192e:	06d9      	lsls	r1, r3, #27
 8001930:	bf44      	itt	mi
 8001932:	2220      	movmi	r2, #32
 8001934:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001938:	071a      	lsls	r2, r3, #28
 800193a:	bf44      	itt	mi
 800193c:	222b      	movmi	r2, #43	; 0x2b
 800193e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001942:	782a      	ldrb	r2, [r5, #0]
 8001944:	2a2a      	cmp	r2, #42	; 0x2a
 8001946:	d02a      	beq.n	800199e <_vfiprintf_r+0x10e>
 8001948:	9a07      	ldr	r2, [sp, #28]
 800194a:	46a8      	mov	r8, r5
 800194c:	2000      	movs	r0, #0
 800194e:	250a      	movs	r5, #10
 8001950:	4641      	mov	r1, r8
 8001952:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001956:	3b30      	subs	r3, #48	; 0x30
 8001958:	2b09      	cmp	r3, #9
 800195a:	d969      	bls.n	8001a30 <_vfiprintf_r+0x1a0>
 800195c:	b360      	cbz	r0, 80019b8 <_vfiprintf_r+0x128>
 800195e:	e024      	b.n	80019aa <_vfiprintf_r+0x11a>
 8001960:	4b50      	ldr	r3, [pc, #320]	; (8001aa4 <_vfiprintf_r+0x214>)
 8001962:	429c      	cmp	r4, r3
 8001964:	d101      	bne.n	800196a <_vfiprintf_r+0xda>
 8001966:	68b4      	ldr	r4, [r6, #8]
 8001968:	e7a2      	b.n	80018b0 <_vfiprintf_r+0x20>
 800196a:	4b4f      	ldr	r3, [pc, #316]	; (8001aa8 <_vfiprintf_r+0x218>)
 800196c:	429c      	cmp	r4, r3
 800196e:	bf08      	it	eq
 8001970:	68f4      	ldreq	r4, [r6, #12]
 8001972:	e79d      	b.n	80018b0 <_vfiprintf_r+0x20>
 8001974:	4621      	mov	r1, r4
 8001976:	4630      	mov	r0, r6
 8001978:	f7ff fc6c 	bl	8001254 <__swsetup_r>
 800197c:	2800      	cmp	r0, #0
 800197e:	d09d      	beq.n	80018bc <_vfiprintf_r+0x2c>
 8001980:	f04f 30ff 	mov.w	r0, #4294967295
 8001984:	b01d      	add	sp, #116	; 0x74
 8001986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800198a:	46a8      	mov	r8, r5
 800198c:	e7a2      	b.n	80018d4 <_vfiprintf_r+0x44>
 800198e:	4a44      	ldr	r2, [pc, #272]	; (8001aa0 <_vfiprintf_r+0x210>)
 8001990:	1a80      	subs	r0, r0, r2
 8001992:	fa0b f000 	lsl.w	r0, fp, r0
 8001996:	4318      	orrs	r0, r3
 8001998:	9004      	str	r0, [sp, #16]
 800199a:	4645      	mov	r5, r8
 800199c:	e7be      	b.n	800191c <_vfiprintf_r+0x8c>
 800199e:	9a03      	ldr	r2, [sp, #12]
 80019a0:	1d11      	adds	r1, r2, #4
 80019a2:	6812      	ldr	r2, [r2, #0]
 80019a4:	9103      	str	r1, [sp, #12]
 80019a6:	2a00      	cmp	r2, #0
 80019a8:	db01      	blt.n	80019ae <_vfiprintf_r+0x11e>
 80019aa:	9207      	str	r2, [sp, #28]
 80019ac:	e004      	b.n	80019b8 <_vfiprintf_r+0x128>
 80019ae:	4252      	negs	r2, r2
 80019b0:	f043 0302 	orr.w	r3, r3, #2
 80019b4:	9207      	str	r2, [sp, #28]
 80019b6:	9304      	str	r3, [sp, #16]
 80019b8:	f898 3000 	ldrb.w	r3, [r8]
 80019bc:	2b2e      	cmp	r3, #46	; 0x2e
 80019be:	d10e      	bne.n	80019de <_vfiprintf_r+0x14e>
 80019c0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80019c4:	2b2a      	cmp	r3, #42	; 0x2a
 80019c6:	d138      	bne.n	8001a3a <_vfiprintf_r+0x1aa>
 80019c8:	9b03      	ldr	r3, [sp, #12]
 80019ca:	1d1a      	adds	r2, r3, #4
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	9203      	str	r2, [sp, #12]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	bfb8      	it	lt
 80019d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80019d8:	f108 0802 	add.w	r8, r8, #2
 80019dc:	9305      	str	r3, [sp, #20]
 80019de:	4d33      	ldr	r5, [pc, #204]	; (8001aac <_vfiprintf_r+0x21c>)
 80019e0:	f898 1000 	ldrb.w	r1, [r8]
 80019e4:	2203      	movs	r2, #3
 80019e6:	4628      	mov	r0, r5
 80019e8:	f7fe fc02 	bl	80001f0 <memchr>
 80019ec:	b140      	cbz	r0, 8001a00 <_vfiprintf_r+0x170>
 80019ee:	2340      	movs	r3, #64	; 0x40
 80019f0:	1b40      	subs	r0, r0, r5
 80019f2:	fa03 f000 	lsl.w	r0, r3, r0
 80019f6:	9b04      	ldr	r3, [sp, #16]
 80019f8:	4303      	orrs	r3, r0
 80019fa:	f108 0801 	add.w	r8, r8, #1
 80019fe:	9304      	str	r3, [sp, #16]
 8001a00:	f898 1000 	ldrb.w	r1, [r8]
 8001a04:	482a      	ldr	r0, [pc, #168]	; (8001ab0 <_vfiprintf_r+0x220>)
 8001a06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001a0a:	2206      	movs	r2, #6
 8001a0c:	f108 0701 	add.w	r7, r8, #1
 8001a10:	f7fe fbee 	bl	80001f0 <memchr>
 8001a14:	2800      	cmp	r0, #0
 8001a16:	d037      	beq.n	8001a88 <_vfiprintf_r+0x1f8>
 8001a18:	4b26      	ldr	r3, [pc, #152]	; (8001ab4 <_vfiprintf_r+0x224>)
 8001a1a:	bb1b      	cbnz	r3, 8001a64 <_vfiprintf_r+0x1d4>
 8001a1c:	9b03      	ldr	r3, [sp, #12]
 8001a1e:	3307      	adds	r3, #7
 8001a20:	f023 0307 	bic.w	r3, r3, #7
 8001a24:	3308      	adds	r3, #8
 8001a26:	9303      	str	r3, [sp, #12]
 8001a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a2a:	444b      	add	r3, r9
 8001a2c:	9309      	str	r3, [sp, #36]	; 0x24
 8001a2e:	e750      	b.n	80018d2 <_vfiprintf_r+0x42>
 8001a30:	fb05 3202 	mla	r2, r5, r2, r3
 8001a34:	2001      	movs	r0, #1
 8001a36:	4688      	mov	r8, r1
 8001a38:	e78a      	b.n	8001950 <_vfiprintf_r+0xc0>
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f108 0801 	add.w	r8, r8, #1
 8001a40:	9305      	str	r3, [sp, #20]
 8001a42:	4619      	mov	r1, r3
 8001a44:	250a      	movs	r5, #10
 8001a46:	4640      	mov	r0, r8
 8001a48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a4c:	3a30      	subs	r2, #48	; 0x30
 8001a4e:	2a09      	cmp	r2, #9
 8001a50:	d903      	bls.n	8001a5a <_vfiprintf_r+0x1ca>
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0c3      	beq.n	80019de <_vfiprintf_r+0x14e>
 8001a56:	9105      	str	r1, [sp, #20]
 8001a58:	e7c1      	b.n	80019de <_vfiprintf_r+0x14e>
 8001a5a:	fb05 2101 	mla	r1, r5, r1, r2
 8001a5e:	2301      	movs	r3, #1
 8001a60:	4680      	mov	r8, r0
 8001a62:	e7f0      	b.n	8001a46 <_vfiprintf_r+0x1b6>
 8001a64:	ab03      	add	r3, sp, #12
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	4622      	mov	r2, r4
 8001a6a:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <_vfiprintf_r+0x228>)
 8001a6c:	a904      	add	r1, sp, #16
 8001a6e:	4630      	mov	r0, r6
 8001a70:	f3af 8000 	nop.w
 8001a74:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001a78:	4681      	mov	r9, r0
 8001a7a:	d1d5      	bne.n	8001a28 <_vfiprintf_r+0x198>
 8001a7c:	89a3      	ldrh	r3, [r4, #12]
 8001a7e:	065b      	lsls	r3, r3, #25
 8001a80:	f53f af7e 	bmi.w	8001980 <_vfiprintf_r+0xf0>
 8001a84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a86:	e77d      	b.n	8001984 <_vfiprintf_r+0xf4>
 8001a88:	ab03      	add	r3, sp, #12
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	4622      	mov	r2, r4
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <_vfiprintf_r+0x228>)
 8001a90:	a904      	add	r1, sp, #16
 8001a92:	4630      	mov	r0, r6
 8001a94:	f000 f888 	bl	8001ba8 <_printf_i>
 8001a98:	e7ec      	b.n	8001a74 <_vfiprintf_r+0x1e4>
 8001a9a:	bf00      	nop
 8001a9c:	0800205c 	.word	0x0800205c
 8001aa0:	0800209c 	.word	0x0800209c
 8001aa4:	0800207c 	.word	0x0800207c
 8001aa8:	0800203c 	.word	0x0800203c
 8001aac:	080020a2 	.word	0x080020a2
 8001ab0:	080020a6 	.word	0x080020a6
 8001ab4:	00000000 	.word	0x00000000
 8001ab8:	0800186b 	.word	0x0800186b

08001abc <_printf_common>:
 8001abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ac0:	4691      	mov	r9, r2
 8001ac2:	461f      	mov	r7, r3
 8001ac4:	688a      	ldr	r2, [r1, #8]
 8001ac6:	690b      	ldr	r3, [r1, #16]
 8001ac8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001acc:	4293      	cmp	r3, r2
 8001ace:	bfb8      	it	lt
 8001ad0:	4613      	movlt	r3, r2
 8001ad2:	f8c9 3000 	str.w	r3, [r9]
 8001ad6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001ada:	4606      	mov	r6, r0
 8001adc:	460c      	mov	r4, r1
 8001ade:	b112      	cbz	r2, 8001ae6 <_printf_common+0x2a>
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	f8c9 3000 	str.w	r3, [r9]
 8001ae6:	6823      	ldr	r3, [r4, #0]
 8001ae8:	0699      	lsls	r1, r3, #26
 8001aea:	bf42      	ittt	mi
 8001aec:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001af0:	3302      	addmi	r3, #2
 8001af2:	f8c9 3000 	strmi.w	r3, [r9]
 8001af6:	6825      	ldr	r5, [r4, #0]
 8001af8:	f015 0506 	ands.w	r5, r5, #6
 8001afc:	d107      	bne.n	8001b0e <_printf_common+0x52>
 8001afe:	f104 0a19 	add.w	sl, r4, #25
 8001b02:	68e3      	ldr	r3, [r4, #12]
 8001b04:	f8d9 2000 	ldr.w	r2, [r9]
 8001b08:	1a9b      	subs	r3, r3, r2
 8001b0a:	42ab      	cmp	r3, r5
 8001b0c:	dc28      	bgt.n	8001b60 <_printf_common+0xa4>
 8001b0e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001b12:	6822      	ldr	r2, [r4, #0]
 8001b14:	3300      	adds	r3, #0
 8001b16:	bf18      	it	ne
 8001b18:	2301      	movne	r3, #1
 8001b1a:	0692      	lsls	r2, r2, #26
 8001b1c:	d42d      	bmi.n	8001b7a <_printf_common+0xbe>
 8001b1e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001b22:	4639      	mov	r1, r7
 8001b24:	4630      	mov	r0, r6
 8001b26:	47c0      	blx	r8
 8001b28:	3001      	adds	r0, #1
 8001b2a:	d020      	beq.n	8001b6e <_printf_common+0xb2>
 8001b2c:	6823      	ldr	r3, [r4, #0]
 8001b2e:	68e5      	ldr	r5, [r4, #12]
 8001b30:	f8d9 2000 	ldr.w	r2, [r9]
 8001b34:	f003 0306 	and.w	r3, r3, #6
 8001b38:	2b04      	cmp	r3, #4
 8001b3a:	bf08      	it	eq
 8001b3c:	1aad      	subeq	r5, r5, r2
 8001b3e:	68a3      	ldr	r3, [r4, #8]
 8001b40:	6922      	ldr	r2, [r4, #16]
 8001b42:	bf0c      	ite	eq
 8001b44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b48:	2500      	movne	r5, #0
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	bfc4      	itt	gt
 8001b4e:	1a9b      	subgt	r3, r3, r2
 8001b50:	18ed      	addgt	r5, r5, r3
 8001b52:	f04f 0900 	mov.w	r9, #0
 8001b56:	341a      	adds	r4, #26
 8001b58:	454d      	cmp	r5, r9
 8001b5a:	d11a      	bne.n	8001b92 <_printf_common+0xd6>
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	e008      	b.n	8001b72 <_printf_common+0xb6>
 8001b60:	2301      	movs	r3, #1
 8001b62:	4652      	mov	r2, sl
 8001b64:	4639      	mov	r1, r7
 8001b66:	4630      	mov	r0, r6
 8001b68:	47c0      	blx	r8
 8001b6a:	3001      	adds	r0, #1
 8001b6c:	d103      	bne.n	8001b76 <_printf_common+0xba>
 8001b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8001b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b76:	3501      	adds	r5, #1
 8001b78:	e7c3      	b.n	8001b02 <_printf_common+0x46>
 8001b7a:	18e1      	adds	r1, r4, r3
 8001b7c:	1c5a      	adds	r2, r3, #1
 8001b7e:	2030      	movs	r0, #48	; 0x30
 8001b80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b84:	4422      	add	r2, r4
 8001b86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b8e:	3302      	adds	r3, #2
 8001b90:	e7c5      	b.n	8001b1e <_printf_common+0x62>
 8001b92:	2301      	movs	r3, #1
 8001b94:	4622      	mov	r2, r4
 8001b96:	4639      	mov	r1, r7
 8001b98:	4630      	mov	r0, r6
 8001b9a:	47c0      	blx	r8
 8001b9c:	3001      	adds	r0, #1
 8001b9e:	d0e6      	beq.n	8001b6e <_printf_common+0xb2>
 8001ba0:	f109 0901 	add.w	r9, r9, #1
 8001ba4:	e7d8      	b.n	8001b58 <_printf_common+0x9c>
	...

08001ba8 <_printf_i>:
 8001ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001bb0:	460c      	mov	r4, r1
 8001bb2:	7e09      	ldrb	r1, [r1, #24]
 8001bb4:	b085      	sub	sp, #20
 8001bb6:	296e      	cmp	r1, #110	; 0x6e
 8001bb8:	4617      	mov	r7, r2
 8001bba:	4606      	mov	r6, r0
 8001bbc:	4698      	mov	r8, r3
 8001bbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001bc0:	f000 80b3 	beq.w	8001d2a <_printf_i+0x182>
 8001bc4:	d822      	bhi.n	8001c0c <_printf_i+0x64>
 8001bc6:	2963      	cmp	r1, #99	; 0x63
 8001bc8:	d036      	beq.n	8001c38 <_printf_i+0x90>
 8001bca:	d80a      	bhi.n	8001be2 <_printf_i+0x3a>
 8001bcc:	2900      	cmp	r1, #0
 8001bce:	f000 80b9 	beq.w	8001d44 <_printf_i+0x19c>
 8001bd2:	2958      	cmp	r1, #88	; 0x58
 8001bd4:	f000 8083 	beq.w	8001cde <_printf_i+0x136>
 8001bd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001bdc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001be0:	e032      	b.n	8001c48 <_printf_i+0xa0>
 8001be2:	2964      	cmp	r1, #100	; 0x64
 8001be4:	d001      	beq.n	8001bea <_printf_i+0x42>
 8001be6:	2969      	cmp	r1, #105	; 0x69
 8001be8:	d1f6      	bne.n	8001bd8 <_printf_i+0x30>
 8001bea:	6820      	ldr	r0, [r4, #0]
 8001bec:	6813      	ldr	r3, [r2, #0]
 8001bee:	0605      	lsls	r5, r0, #24
 8001bf0:	f103 0104 	add.w	r1, r3, #4
 8001bf4:	d52a      	bpl.n	8001c4c <_printf_i+0xa4>
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6011      	str	r1, [r2, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	da03      	bge.n	8001c06 <_printf_i+0x5e>
 8001bfe:	222d      	movs	r2, #45	; 0x2d
 8001c00:	425b      	negs	r3, r3
 8001c02:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001c06:	486f      	ldr	r0, [pc, #444]	; (8001dc4 <_printf_i+0x21c>)
 8001c08:	220a      	movs	r2, #10
 8001c0a:	e039      	b.n	8001c80 <_printf_i+0xd8>
 8001c0c:	2973      	cmp	r1, #115	; 0x73
 8001c0e:	f000 809d 	beq.w	8001d4c <_printf_i+0x1a4>
 8001c12:	d808      	bhi.n	8001c26 <_printf_i+0x7e>
 8001c14:	296f      	cmp	r1, #111	; 0x6f
 8001c16:	d020      	beq.n	8001c5a <_printf_i+0xb2>
 8001c18:	2970      	cmp	r1, #112	; 0x70
 8001c1a:	d1dd      	bne.n	8001bd8 <_printf_i+0x30>
 8001c1c:	6823      	ldr	r3, [r4, #0]
 8001c1e:	f043 0320 	orr.w	r3, r3, #32
 8001c22:	6023      	str	r3, [r4, #0]
 8001c24:	e003      	b.n	8001c2e <_printf_i+0x86>
 8001c26:	2975      	cmp	r1, #117	; 0x75
 8001c28:	d017      	beq.n	8001c5a <_printf_i+0xb2>
 8001c2a:	2978      	cmp	r1, #120	; 0x78
 8001c2c:	d1d4      	bne.n	8001bd8 <_printf_i+0x30>
 8001c2e:	2378      	movs	r3, #120	; 0x78
 8001c30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001c34:	4864      	ldr	r0, [pc, #400]	; (8001dc8 <_printf_i+0x220>)
 8001c36:	e055      	b.n	8001ce4 <_printf_i+0x13c>
 8001c38:	6813      	ldr	r3, [r2, #0]
 8001c3a:	1d19      	adds	r1, r3, #4
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6011      	str	r1, [r2, #0]
 8001c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e08c      	b.n	8001d66 <_printf_i+0x1be>
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6011      	str	r1, [r2, #0]
 8001c50:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c54:	bf18      	it	ne
 8001c56:	b21b      	sxthne	r3, r3
 8001c58:	e7cf      	b.n	8001bfa <_printf_i+0x52>
 8001c5a:	6813      	ldr	r3, [r2, #0]
 8001c5c:	6825      	ldr	r5, [r4, #0]
 8001c5e:	1d18      	adds	r0, r3, #4
 8001c60:	6010      	str	r0, [r2, #0]
 8001c62:	0628      	lsls	r0, r5, #24
 8001c64:	d501      	bpl.n	8001c6a <_printf_i+0xc2>
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	e002      	b.n	8001c70 <_printf_i+0xc8>
 8001c6a:	0668      	lsls	r0, r5, #25
 8001c6c:	d5fb      	bpl.n	8001c66 <_printf_i+0xbe>
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	4854      	ldr	r0, [pc, #336]	; (8001dc4 <_printf_i+0x21c>)
 8001c72:	296f      	cmp	r1, #111	; 0x6f
 8001c74:	bf14      	ite	ne
 8001c76:	220a      	movne	r2, #10
 8001c78:	2208      	moveq	r2, #8
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c80:	6865      	ldr	r5, [r4, #4]
 8001c82:	60a5      	str	r5, [r4, #8]
 8001c84:	2d00      	cmp	r5, #0
 8001c86:	f2c0 8095 	blt.w	8001db4 <_printf_i+0x20c>
 8001c8a:	6821      	ldr	r1, [r4, #0]
 8001c8c:	f021 0104 	bic.w	r1, r1, #4
 8001c90:	6021      	str	r1, [r4, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d13d      	bne.n	8001d12 <_printf_i+0x16a>
 8001c96:	2d00      	cmp	r5, #0
 8001c98:	f040 808e 	bne.w	8001db8 <_printf_i+0x210>
 8001c9c:	4665      	mov	r5, ip
 8001c9e:	2a08      	cmp	r2, #8
 8001ca0:	d10b      	bne.n	8001cba <_printf_i+0x112>
 8001ca2:	6823      	ldr	r3, [r4, #0]
 8001ca4:	07db      	lsls	r3, r3, #31
 8001ca6:	d508      	bpl.n	8001cba <_printf_i+0x112>
 8001ca8:	6923      	ldr	r3, [r4, #16]
 8001caa:	6862      	ldr	r2, [r4, #4]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	bfde      	ittt	le
 8001cb0:	2330      	movle	r3, #48	; 0x30
 8001cb2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001cb6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001cba:	ebac 0305 	sub.w	r3, ip, r5
 8001cbe:	6123      	str	r3, [r4, #16]
 8001cc0:	f8cd 8000 	str.w	r8, [sp]
 8001cc4:	463b      	mov	r3, r7
 8001cc6:	aa03      	add	r2, sp, #12
 8001cc8:	4621      	mov	r1, r4
 8001cca:	4630      	mov	r0, r6
 8001ccc:	f7ff fef6 	bl	8001abc <_printf_common>
 8001cd0:	3001      	adds	r0, #1
 8001cd2:	d14d      	bne.n	8001d70 <_printf_i+0x1c8>
 8001cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd8:	b005      	add	sp, #20
 8001cda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001cde:	4839      	ldr	r0, [pc, #228]	; (8001dc4 <_printf_i+0x21c>)
 8001ce0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001ce4:	6813      	ldr	r3, [r2, #0]
 8001ce6:	6821      	ldr	r1, [r4, #0]
 8001ce8:	1d1d      	adds	r5, r3, #4
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6015      	str	r5, [r2, #0]
 8001cee:	060a      	lsls	r2, r1, #24
 8001cf0:	d50b      	bpl.n	8001d0a <_printf_i+0x162>
 8001cf2:	07ca      	lsls	r2, r1, #31
 8001cf4:	bf44      	itt	mi
 8001cf6:	f041 0120 	orrmi.w	r1, r1, #32
 8001cfa:	6021      	strmi	r1, [r4, #0]
 8001cfc:	b91b      	cbnz	r3, 8001d06 <_printf_i+0x15e>
 8001cfe:	6822      	ldr	r2, [r4, #0]
 8001d00:	f022 0220 	bic.w	r2, r2, #32
 8001d04:	6022      	str	r2, [r4, #0]
 8001d06:	2210      	movs	r2, #16
 8001d08:	e7b7      	b.n	8001c7a <_printf_i+0xd2>
 8001d0a:	064d      	lsls	r5, r1, #25
 8001d0c:	bf48      	it	mi
 8001d0e:	b29b      	uxthmi	r3, r3
 8001d10:	e7ef      	b.n	8001cf2 <_printf_i+0x14a>
 8001d12:	4665      	mov	r5, ip
 8001d14:	fbb3 f1f2 	udiv	r1, r3, r2
 8001d18:	fb02 3311 	mls	r3, r2, r1, r3
 8001d1c:	5cc3      	ldrb	r3, [r0, r3]
 8001d1e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001d22:	460b      	mov	r3, r1
 8001d24:	2900      	cmp	r1, #0
 8001d26:	d1f5      	bne.n	8001d14 <_printf_i+0x16c>
 8001d28:	e7b9      	b.n	8001c9e <_printf_i+0xf6>
 8001d2a:	6813      	ldr	r3, [r2, #0]
 8001d2c:	6825      	ldr	r5, [r4, #0]
 8001d2e:	6961      	ldr	r1, [r4, #20]
 8001d30:	1d18      	adds	r0, r3, #4
 8001d32:	6010      	str	r0, [r2, #0]
 8001d34:	0628      	lsls	r0, r5, #24
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	d501      	bpl.n	8001d3e <_printf_i+0x196>
 8001d3a:	6019      	str	r1, [r3, #0]
 8001d3c:	e002      	b.n	8001d44 <_printf_i+0x19c>
 8001d3e:	066a      	lsls	r2, r5, #25
 8001d40:	d5fb      	bpl.n	8001d3a <_printf_i+0x192>
 8001d42:	8019      	strh	r1, [r3, #0]
 8001d44:	2300      	movs	r3, #0
 8001d46:	6123      	str	r3, [r4, #16]
 8001d48:	4665      	mov	r5, ip
 8001d4a:	e7b9      	b.n	8001cc0 <_printf_i+0x118>
 8001d4c:	6813      	ldr	r3, [r2, #0]
 8001d4e:	1d19      	adds	r1, r3, #4
 8001d50:	6011      	str	r1, [r2, #0]
 8001d52:	681d      	ldr	r5, [r3, #0]
 8001d54:	6862      	ldr	r2, [r4, #4]
 8001d56:	2100      	movs	r1, #0
 8001d58:	4628      	mov	r0, r5
 8001d5a:	f7fe fa49 	bl	80001f0 <memchr>
 8001d5e:	b108      	cbz	r0, 8001d64 <_printf_i+0x1bc>
 8001d60:	1b40      	subs	r0, r0, r5
 8001d62:	6060      	str	r0, [r4, #4]
 8001d64:	6863      	ldr	r3, [r4, #4]
 8001d66:	6123      	str	r3, [r4, #16]
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d6e:	e7a7      	b.n	8001cc0 <_printf_i+0x118>
 8001d70:	6923      	ldr	r3, [r4, #16]
 8001d72:	462a      	mov	r2, r5
 8001d74:	4639      	mov	r1, r7
 8001d76:	4630      	mov	r0, r6
 8001d78:	47c0      	blx	r8
 8001d7a:	3001      	adds	r0, #1
 8001d7c:	d0aa      	beq.n	8001cd4 <_printf_i+0x12c>
 8001d7e:	6823      	ldr	r3, [r4, #0]
 8001d80:	079b      	lsls	r3, r3, #30
 8001d82:	d413      	bmi.n	8001dac <_printf_i+0x204>
 8001d84:	68e0      	ldr	r0, [r4, #12]
 8001d86:	9b03      	ldr	r3, [sp, #12]
 8001d88:	4298      	cmp	r0, r3
 8001d8a:	bfb8      	it	lt
 8001d8c:	4618      	movlt	r0, r3
 8001d8e:	e7a3      	b.n	8001cd8 <_printf_i+0x130>
 8001d90:	2301      	movs	r3, #1
 8001d92:	464a      	mov	r2, r9
 8001d94:	4639      	mov	r1, r7
 8001d96:	4630      	mov	r0, r6
 8001d98:	47c0      	blx	r8
 8001d9a:	3001      	adds	r0, #1
 8001d9c:	d09a      	beq.n	8001cd4 <_printf_i+0x12c>
 8001d9e:	3501      	adds	r5, #1
 8001da0:	68e3      	ldr	r3, [r4, #12]
 8001da2:	9a03      	ldr	r2, [sp, #12]
 8001da4:	1a9b      	subs	r3, r3, r2
 8001da6:	42ab      	cmp	r3, r5
 8001da8:	dcf2      	bgt.n	8001d90 <_printf_i+0x1e8>
 8001daa:	e7eb      	b.n	8001d84 <_printf_i+0x1dc>
 8001dac:	2500      	movs	r5, #0
 8001dae:	f104 0919 	add.w	r9, r4, #25
 8001db2:	e7f5      	b.n	8001da0 <_printf_i+0x1f8>
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1ac      	bne.n	8001d12 <_printf_i+0x16a>
 8001db8:	7803      	ldrb	r3, [r0, #0]
 8001dba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001dbe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001dc2:	e76c      	b.n	8001c9e <_printf_i+0xf6>
 8001dc4:	080020ad 	.word	0x080020ad
 8001dc8:	080020be 	.word	0x080020be

08001dcc <_sbrk_r>:
 8001dcc:	b538      	push	{r3, r4, r5, lr}
 8001dce:	4c06      	ldr	r4, [pc, #24]	; (8001de8 <_sbrk_r+0x1c>)
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	4605      	mov	r5, r0
 8001dd4:	4608      	mov	r0, r1
 8001dd6:	6023      	str	r3, [r4, #0]
 8001dd8:	f7ff f8dc 	bl	8000f94 <_sbrk>
 8001ddc:	1c43      	adds	r3, r0, #1
 8001dde:	d102      	bne.n	8001de6 <_sbrk_r+0x1a>
 8001de0:	6823      	ldr	r3, [r4, #0]
 8001de2:	b103      	cbz	r3, 8001de6 <_sbrk_r+0x1a>
 8001de4:	602b      	str	r3, [r5, #0]
 8001de6:	bd38      	pop	{r3, r4, r5, pc}
 8001de8:	2000008c 	.word	0x2000008c

08001dec <__sread>:
 8001dec:	b510      	push	{r4, lr}
 8001dee:	460c      	mov	r4, r1
 8001df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001df4:	f000 f896 	bl	8001f24 <_read_r>
 8001df8:	2800      	cmp	r0, #0
 8001dfa:	bfab      	itete	ge
 8001dfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001dfe:	89a3      	ldrhlt	r3, [r4, #12]
 8001e00:	181b      	addge	r3, r3, r0
 8001e02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001e06:	bfac      	ite	ge
 8001e08:	6563      	strge	r3, [r4, #84]	; 0x54
 8001e0a:	81a3      	strhlt	r3, [r4, #12]
 8001e0c:	bd10      	pop	{r4, pc}

08001e0e <__swrite>:
 8001e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e12:	461f      	mov	r7, r3
 8001e14:	898b      	ldrh	r3, [r1, #12]
 8001e16:	05db      	lsls	r3, r3, #23
 8001e18:	4605      	mov	r5, r0
 8001e1a:	460c      	mov	r4, r1
 8001e1c:	4616      	mov	r6, r2
 8001e1e:	d505      	bpl.n	8001e2c <__swrite+0x1e>
 8001e20:	2302      	movs	r3, #2
 8001e22:	2200      	movs	r2, #0
 8001e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e28:	f000 f868 	bl	8001efc <_lseek_r>
 8001e2c:	89a3      	ldrh	r3, [r4, #12]
 8001e2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e36:	81a3      	strh	r3, [r4, #12]
 8001e38:	4632      	mov	r2, r6
 8001e3a:	463b      	mov	r3, r7
 8001e3c:	4628      	mov	r0, r5
 8001e3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e42:	f000 b817 	b.w	8001e74 <_write_r>

08001e46 <__sseek>:
 8001e46:	b510      	push	{r4, lr}
 8001e48:	460c      	mov	r4, r1
 8001e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e4e:	f000 f855 	bl	8001efc <_lseek_r>
 8001e52:	1c43      	adds	r3, r0, #1
 8001e54:	89a3      	ldrh	r3, [r4, #12]
 8001e56:	bf15      	itete	ne
 8001e58:	6560      	strne	r0, [r4, #84]	; 0x54
 8001e5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001e5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001e62:	81a3      	strheq	r3, [r4, #12]
 8001e64:	bf18      	it	ne
 8001e66:	81a3      	strhne	r3, [r4, #12]
 8001e68:	bd10      	pop	{r4, pc}

08001e6a <__sclose>:
 8001e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e6e:	f000 b813 	b.w	8001e98 <_close_r>
	...

08001e74 <_write_r>:
 8001e74:	b538      	push	{r3, r4, r5, lr}
 8001e76:	4c07      	ldr	r4, [pc, #28]	; (8001e94 <_write_r+0x20>)
 8001e78:	4605      	mov	r5, r0
 8001e7a:	4608      	mov	r0, r1
 8001e7c:	4611      	mov	r1, r2
 8001e7e:	2200      	movs	r2, #0
 8001e80:	6022      	str	r2, [r4, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	f7ff f836 	bl	8000ef4 <_write>
 8001e88:	1c43      	adds	r3, r0, #1
 8001e8a:	d102      	bne.n	8001e92 <_write_r+0x1e>
 8001e8c:	6823      	ldr	r3, [r4, #0]
 8001e8e:	b103      	cbz	r3, 8001e92 <_write_r+0x1e>
 8001e90:	602b      	str	r3, [r5, #0]
 8001e92:	bd38      	pop	{r3, r4, r5, pc}
 8001e94:	2000008c 	.word	0x2000008c

08001e98 <_close_r>:
 8001e98:	b538      	push	{r3, r4, r5, lr}
 8001e9a:	4c06      	ldr	r4, [pc, #24]	; (8001eb4 <_close_r+0x1c>)
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	4605      	mov	r5, r0
 8001ea0:	4608      	mov	r0, r1
 8001ea2:	6023      	str	r3, [r4, #0]
 8001ea4:	f7ff f842 	bl	8000f2c <_close>
 8001ea8:	1c43      	adds	r3, r0, #1
 8001eaa:	d102      	bne.n	8001eb2 <_close_r+0x1a>
 8001eac:	6823      	ldr	r3, [r4, #0]
 8001eae:	b103      	cbz	r3, 8001eb2 <_close_r+0x1a>
 8001eb0:	602b      	str	r3, [r5, #0]
 8001eb2:	bd38      	pop	{r3, r4, r5, pc}
 8001eb4:	2000008c 	.word	0x2000008c

08001eb8 <_fstat_r>:
 8001eb8:	b538      	push	{r3, r4, r5, lr}
 8001eba:	4c07      	ldr	r4, [pc, #28]	; (8001ed8 <_fstat_r+0x20>)
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	4605      	mov	r5, r0
 8001ec0:	4608      	mov	r0, r1
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	6023      	str	r3, [r4, #0]
 8001ec6:	f7ff f83d 	bl	8000f44 <_fstat>
 8001eca:	1c43      	adds	r3, r0, #1
 8001ecc:	d102      	bne.n	8001ed4 <_fstat_r+0x1c>
 8001ece:	6823      	ldr	r3, [r4, #0]
 8001ed0:	b103      	cbz	r3, 8001ed4 <_fstat_r+0x1c>
 8001ed2:	602b      	str	r3, [r5, #0]
 8001ed4:	bd38      	pop	{r3, r4, r5, pc}
 8001ed6:	bf00      	nop
 8001ed8:	2000008c 	.word	0x2000008c

08001edc <_isatty_r>:
 8001edc:	b538      	push	{r3, r4, r5, lr}
 8001ede:	4c06      	ldr	r4, [pc, #24]	; (8001ef8 <_isatty_r+0x1c>)
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	4605      	mov	r5, r0
 8001ee4:	4608      	mov	r0, r1
 8001ee6:	6023      	str	r3, [r4, #0]
 8001ee8:	f7ff f83c 	bl	8000f64 <_isatty>
 8001eec:	1c43      	adds	r3, r0, #1
 8001eee:	d102      	bne.n	8001ef6 <_isatty_r+0x1a>
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	b103      	cbz	r3, 8001ef6 <_isatty_r+0x1a>
 8001ef4:	602b      	str	r3, [r5, #0]
 8001ef6:	bd38      	pop	{r3, r4, r5, pc}
 8001ef8:	2000008c 	.word	0x2000008c

08001efc <_lseek_r>:
 8001efc:	b538      	push	{r3, r4, r5, lr}
 8001efe:	4c07      	ldr	r4, [pc, #28]	; (8001f1c <_lseek_r+0x20>)
 8001f00:	4605      	mov	r5, r0
 8001f02:	4608      	mov	r0, r1
 8001f04:	4611      	mov	r1, r2
 8001f06:	2200      	movs	r2, #0
 8001f08:	6022      	str	r2, [r4, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	f7ff f835 	bl	8000f7a <_lseek>
 8001f10:	1c43      	adds	r3, r0, #1
 8001f12:	d102      	bne.n	8001f1a <_lseek_r+0x1e>
 8001f14:	6823      	ldr	r3, [r4, #0]
 8001f16:	b103      	cbz	r3, 8001f1a <_lseek_r+0x1e>
 8001f18:	602b      	str	r3, [r5, #0]
 8001f1a:	bd38      	pop	{r3, r4, r5, pc}
 8001f1c:	2000008c 	.word	0x2000008c

08001f20 <__malloc_lock>:
 8001f20:	4770      	bx	lr

08001f22 <__malloc_unlock>:
 8001f22:	4770      	bx	lr

08001f24 <_read_r>:
 8001f24:	b538      	push	{r3, r4, r5, lr}
 8001f26:	4c07      	ldr	r4, [pc, #28]	; (8001f44 <_read_r+0x20>)
 8001f28:	4605      	mov	r5, r0
 8001f2a:	4608      	mov	r0, r1
 8001f2c:	4611      	mov	r1, r2
 8001f2e:	2200      	movs	r2, #0
 8001f30:	6022      	str	r2, [r4, #0]
 8001f32:	461a      	mov	r2, r3
 8001f34:	f7fe ffc1 	bl	8000eba <_read>
 8001f38:	1c43      	adds	r3, r0, #1
 8001f3a:	d102      	bne.n	8001f42 <_read_r+0x1e>
 8001f3c:	6823      	ldr	r3, [r4, #0]
 8001f3e:	b103      	cbz	r3, 8001f42 <_read_r+0x1e>
 8001f40:	602b      	str	r3, [r5, #0]
 8001f42:	bd38      	pop	{r3, r4, r5, pc}
 8001f44:	2000008c 	.word	0x2000008c

08001f48 <_init>:
 8001f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f4a:	bf00      	nop
 8001f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f4e:	bc08      	pop	{r3}
 8001f50:	469e      	mov	lr, r3
 8001f52:	4770      	bx	lr

08001f54 <_fini>:
 8001f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f56:	bf00      	nop
 8001f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f5a:	bc08      	pop	{r3}
 8001f5c:	469e      	mov	lr, r3
 8001f5e:	4770      	bx	lr

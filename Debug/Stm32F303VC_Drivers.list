
Stm32F303VC_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d6c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08001f0c  08001f0c  00011f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800201c  0800201c  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  0800201c  0800201c  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800201c  0800201c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800201c  0800201c  0001201c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002020  08002020  00012020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08002024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000454  20000084  080020a8  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  080020a8  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004cc8  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000ca7  00000000  00000000  00024d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000268  00000000  00000000  00025a28  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000200  00000000  00000000  00025c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003c68  00000000  00000000  00025e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002a5d  00000000  00000000  00029af8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b7a7  00000000  00000000  0002c555  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00037cfc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000fc0  00000000  00000000  00037d78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001ef4 	.word	0x08001ef4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08001ef4 	.word	0x08001ef4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <GPIO_PeriClockControl>:
 * @Parameters: GPIO port address , Enable or Disable Value
 * @Return: NONE
 */
// Peripheral clock control
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t ENorDI)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
 8000298:	460b      	mov	r3, r1
 800029a:	70fb      	strb	r3, [r7, #3]
	// For Enable
	if(ENorDI == ENABLE)
 800029c:	78fb      	ldrb	r3, [r7, #3]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d141      	bne.n	8000326 <GPIO_PeriClockControl+0x96>
	{
		if(pGPIOx == GPIOA)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80002a8:	d106      	bne.n	80002b8 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80002aa:	4b42      	ldr	r3, [pc, #264]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	4a41      	ldr	r2, [pc, #260]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 80002b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002b4:	6153      	str	r3, [r2, #20]
			GPIOE_PCLK_DI();

		else if(pGPIOx == GPIOF)
			GPIOF_PCLK_DI();
	}
}
 80002b6:	e077      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOB)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	4a3f      	ldr	r2, [pc, #252]	; (80003b8 <GPIO_PeriClockControl+0x128>)
 80002bc:	4293      	cmp	r3, r2
 80002be:	d106      	bne.n	80002ce <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002c0:	4b3c      	ldr	r3, [pc, #240]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	4a3b      	ldr	r2, [pc, #236]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 80002c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002ca:	6153      	str	r3, [r2, #20]
}
 80002cc:	e06c      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOC)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	4a3a      	ldr	r2, [pc, #232]	; (80003bc <GPIO_PeriClockControl+0x12c>)
 80002d2:	4293      	cmp	r3, r2
 80002d4:	d106      	bne.n	80002e4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80002d6:	4b37      	ldr	r3, [pc, #220]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	4a36      	ldr	r2, [pc, #216]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 80002dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80002e0:	6153      	str	r3, [r2, #20]
}
 80002e2:	e061      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOD)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	4a36      	ldr	r2, [pc, #216]	; (80003c0 <GPIO_PeriClockControl+0x130>)
 80002e8:	4293      	cmp	r3, r2
 80002ea:	d106      	bne.n	80002fa <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80002ec:	4b31      	ldr	r3, [pc, #196]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 80002ee:	695b      	ldr	r3, [r3, #20]
 80002f0:	4a30      	ldr	r2, [pc, #192]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 80002f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f6:	6153      	str	r3, [r2, #20]
}
 80002f8:	e056      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOE)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	4a31      	ldr	r2, [pc, #196]	; (80003c4 <GPIO_PeriClockControl+0x134>)
 80002fe:	4293      	cmp	r3, r2
 8000300:	d106      	bne.n	8000310 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000302:	4b2c      	ldr	r3, [pc, #176]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 8000304:	695b      	ldr	r3, [r3, #20]
 8000306:	4a2b      	ldr	r2, [pc, #172]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 8000308:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800030c:	6153      	str	r3, [r2, #20]
}
 800030e:	e04b      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOF)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	4a2d      	ldr	r2, [pc, #180]	; (80003c8 <GPIO_PeriClockControl+0x138>)
 8000314:	4293      	cmp	r3, r2
 8000316:	d147      	bne.n	80003a8 <GPIO_PeriClockControl+0x118>
			GPIOF_PCLK_EN();
 8000318:	4b26      	ldr	r3, [pc, #152]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a25      	ldr	r2, [pc, #148]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 800031e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000322:	6153      	str	r3, [r2, #20]
}
 8000324:	e040      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800032c:	d106      	bne.n	800033c <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 800032e:	4b21      	ldr	r3, [pc, #132]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 8000330:	695b      	ldr	r3, [r3, #20]
 8000332:	4a20      	ldr	r2, [pc, #128]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 8000334:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000338:	6153      	str	r3, [r2, #20]
}
 800033a:	e035      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOB)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	4a1e      	ldr	r2, [pc, #120]	; (80003b8 <GPIO_PeriClockControl+0x128>)
 8000340:	4293      	cmp	r3, r2
 8000342:	d106      	bne.n	8000352 <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 8000344:	4b1b      	ldr	r3, [pc, #108]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	4a1a      	ldr	r2, [pc, #104]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 800034a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800034e:	6153      	str	r3, [r2, #20]
}
 8000350:	e02a      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOC)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4a19      	ldr	r2, [pc, #100]	; (80003bc <GPIO_PeriClockControl+0x12c>)
 8000356:	4293      	cmp	r3, r2
 8000358:	d106      	bne.n	8000368 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 800035a:	4b16      	ldr	r3, [pc, #88]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	4a15      	ldr	r2, [pc, #84]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 8000360:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000364:	6153      	str	r3, [r2, #20]
}
 8000366:	e01f      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOD)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4a15      	ldr	r2, [pc, #84]	; (80003c0 <GPIO_PeriClockControl+0x130>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d106      	bne.n	800037e <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 8000370:	4b10      	ldr	r3, [pc, #64]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 8000372:	695b      	ldr	r3, [r3, #20]
 8000374:	4a0f      	ldr	r2, [pc, #60]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 8000376:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800037a:	6153      	str	r3, [r2, #20]
}
 800037c:	e014      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOE)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4a10      	ldr	r2, [pc, #64]	; (80003c4 <GPIO_PeriClockControl+0x134>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d106      	bne.n	8000394 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 8000386:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a0a      	ldr	r2, [pc, #40]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 800038c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000390:	6153      	str	r3, [r2, #20]
}
 8000392:	e009      	b.n	80003a8 <GPIO_PeriClockControl+0x118>
		else if(pGPIOx == GPIOF)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a0c      	ldr	r2, [pc, #48]	; (80003c8 <GPIO_PeriClockControl+0x138>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d105      	bne.n	80003a8 <GPIO_PeriClockControl+0x118>
			GPIOF_PCLK_DI();
 800039c:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	4a04      	ldr	r2, [pc, #16]	; (80003b4 <GPIO_PeriClockControl+0x124>)
 80003a2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80003a6:	6153      	str	r3, [r2, #20]
}
 80003a8:	bf00      	nop
 80003aa:	370c      	adds	r7, #12
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr
 80003b4:	40021000 	.word	0x40021000
 80003b8:	48000400 	.word	0x48000400
 80003bc:	48000800 	.word	0x48000800
 80003c0:	48000c00 	.word	0x48000c00
 80003c4:	48001000 	.word	0x48001000
 80003c8:	48001400 	.word	0x48001400

080003cc <GPIO_Init>:
 * @Parameters: GPIO Handle Variable (provides access to user configurations and registers)
 * @Return: NONE
 */
// Initialize
void GPIO_Init(GPIO_Handle_t * pGPIOHandle)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b088      	sub	sp, #32
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;		// create a temporary variable
 80003d4:	2300      	movs	r3, #0
 80003d6:	61fb      	str	r3, [r7, #28]

	// Enabling the Peripheral Clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2101      	movs	r1, #1
 80003de:	4618      	mov	r0, r3
 80003e0:	f7ff ff56 	bl	8000290 <GPIO_PeriClockControl>


	//1. Configure the mode of the GPIO pin

	// Checking for non-interrupt mode.
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	795b      	ldrb	r3, [r3, #5]
 80003e8:	2b03      	cmp	r3, #3
 80003ea:	d821      	bhi.n	8000430 <GPIO_Init+0x64>
	{
		// Aligning
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	795b      	ldrb	r3, [r3, #5]
 80003f0:	461a      	mov	r2, r3
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	791b      	ldrb	r3, [r3, #4]
 80003f6:	005b      	lsls	r3, r3, #1
 80003f8:	fa02 f303 	lsl.w	r3, r2, r3
 80003fc:	61fb      	str	r3, [r7, #28]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		// Clearing those bits before setting them
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	681a      	ldr	r2, [r3, #0]
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	791b      	ldrb	r3, [r3, #4]
 8000408:	4619      	mov	r1, r3
 800040a:	2303      	movs	r3, #3
 800040c:	408b      	lsls	r3, r1
 800040e:	43db      	mvns	r3, r3
 8000410:	4619      	mov	r1, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	400a      	ands	r2, r1
 8000418:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;		// Setting
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	6819      	ldr	r1, [r3, #0]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	69fa      	ldr	r2, [r7, #28]
 8000426:	430a      	orrs	r2, r1
 8000428:	601a      	str	r2, [r3, #0]
		temp = 0;
 800042a:	2300      	movs	r3, #0
 800042c:	61fb      	str	r3, [r7, #28]
 800042e:	e0a1      	b.n	8000574 <GPIO_Init+0x1a8>

	// This is interrupt mode
	else
	{
		//1. Configure the RTSR , FTSR or both.
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FT)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	795b      	ldrb	r3, [r3, #5]
 8000434:	2b05      	cmp	r3, #5
 8000436:	d817      	bhi.n	8000468 <GPIO_Init+0x9c>
		{
			//FTSR
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000438:	4b9c      	ldr	r3, [pc, #624]	; (80006ac <GPIO_Init+0x2e0>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	687a      	ldr	r2, [r7, #4]
 800043e:	7912      	ldrb	r2, [r2, #4]
 8000440:	4611      	mov	r1, r2
 8000442:	2201      	movs	r2, #1
 8000444:	408a      	lsls	r2, r1
 8000446:	4611      	mov	r1, r2
 8000448:	4a98      	ldr	r2, [pc, #608]	; (80006ac <GPIO_Init+0x2e0>)
 800044a:	430b      	orrs	r3, r1
 800044c:	60d3      	str	r3, [r2, #12]
			//Clear the RTSR
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800044e:	4b97      	ldr	r3, [pc, #604]	; (80006ac <GPIO_Init+0x2e0>)
 8000450:	689b      	ldr	r3, [r3, #8]
 8000452:	687a      	ldr	r2, [r7, #4]
 8000454:	7912      	ldrb	r2, [r2, #4]
 8000456:	4611      	mov	r1, r2
 8000458:	2201      	movs	r2, #1
 800045a:	408a      	lsls	r2, r1
 800045c:	43d2      	mvns	r2, r2
 800045e:	4611      	mov	r1, r2
 8000460:	4a92      	ldr	r2, [pc, #584]	; (80006ac <GPIO_Init+0x2e0>)
 8000462:	400b      	ands	r3, r1
 8000464:	6093      	str	r3, [r2, #8]
 8000466:	e035      	b.n	80004d4 <GPIO_Init+0x108>


		}

		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	795b      	ldrb	r3, [r3, #5]
 800046c:	2b04      	cmp	r3, #4
 800046e:	d817      	bhi.n	80004a0 <GPIO_Init+0xd4>
		{
			//RTSR
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000470:	4b8e      	ldr	r3, [pc, #568]	; (80006ac <GPIO_Init+0x2e0>)
 8000472:	689b      	ldr	r3, [r3, #8]
 8000474:	687a      	ldr	r2, [r7, #4]
 8000476:	7912      	ldrb	r2, [r2, #4]
 8000478:	4611      	mov	r1, r2
 800047a:	2201      	movs	r2, #1
 800047c:	408a      	lsls	r2, r1
 800047e:	4611      	mov	r1, r2
 8000480:	4a8a      	ldr	r2, [pc, #552]	; (80006ac <GPIO_Init+0x2e0>)
 8000482:	430b      	orrs	r3, r1
 8000484:	6093      	str	r3, [r2, #8]
			//Clear the FTSR
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000486:	4b89      	ldr	r3, [pc, #548]	; (80006ac <GPIO_Init+0x2e0>)
 8000488:	68db      	ldr	r3, [r3, #12]
 800048a:	687a      	ldr	r2, [r7, #4]
 800048c:	7912      	ldrb	r2, [r2, #4]
 800048e:	4611      	mov	r1, r2
 8000490:	2201      	movs	r2, #1
 8000492:	408a      	lsls	r2, r1
 8000494:	43d2      	mvns	r2, r2
 8000496:	4611      	mov	r1, r2
 8000498:	4a84      	ldr	r2, [pc, #528]	; (80006ac <GPIO_Init+0x2e0>)
 800049a:	400b      	ands	r3, r1
 800049c:	60d3      	str	r3, [r2, #12]
 800049e:	e019      	b.n	80004d4 <GPIO_Init+0x108>
		}

		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RFT)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	795b      	ldrb	r3, [r3, #5]
 80004a4:	2b06      	cmp	r3, #6
 80004a6:	d815      	bhi.n	80004d4 <GPIO_Init+0x108>
		{
			//FTSR and RTSR
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a8:	4b80      	ldr	r3, [pc, #512]	; (80006ac <GPIO_Init+0x2e0>)
 80004aa:	689b      	ldr	r3, [r3, #8]
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	7912      	ldrb	r2, [r2, #4]
 80004b0:	4611      	mov	r1, r2
 80004b2:	2201      	movs	r2, #1
 80004b4:	408a      	lsls	r2, r1
 80004b6:	4611      	mov	r1, r2
 80004b8:	4a7c      	ldr	r2, [pc, #496]	; (80006ac <GPIO_Init+0x2e0>)
 80004ba:	430b      	orrs	r3, r1
 80004bc:	6093      	str	r3, [r2, #8]
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004be:	4b7b      	ldr	r3, [pc, #492]	; (80006ac <GPIO_Init+0x2e0>)
 80004c0:	68db      	ldr	r3, [r3, #12]
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	7912      	ldrb	r2, [r2, #4]
 80004c6:	4611      	mov	r1, r2
 80004c8:	2201      	movs	r2, #1
 80004ca:	408a      	lsls	r2, r1
 80004cc:	4611      	mov	r1, r2
 80004ce:	4a77      	ldr	r2, [pc, #476]	; (80006ac <GPIO_Init+0x2e0>)
 80004d0:	430b      	orrs	r3, r1
 80004d2:	60d3      	str	r3, [r2, #12]
		}

		//2. Configure the GPIO port selection using SYSCFG_EXTICR
		uint32_t temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	791b      	ldrb	r3, [r3, #4]
 80004d8:	089b      	lsrs	r3, r3, #2
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	61bb      	str	r3, [r7, #24]
		uint32_t temp2 = (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4));
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	791b      	ldrb	r3, [r3, #4]
 80004e2:	f003 0303 	and.w	r3, r3, #3
 80004e6:	009b      	lsls	r3, r3, #2
 80004e8:	617b      	str	r3, [r7, #20]
		uint32_t portcode = GPIO_BASEADDR_TO_PORTCODE(pGPIOHandle->pGPIOx);
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80004f2:	d024      	beq.n	800053e <GPIO_Init+0x172>
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a6d      	ldr	r2, [pc, #436]	; (80006b0 <GPIO_Init+0x2e4>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d01d      	beq.n	800053a <GPIO_Init+0x16e>
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a6c      	ldr	r2, [pc, #432]	; (80006b4 <GPIO_Init+0x2e8>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d016      	beq.n	8000536 <GPIO_Init+0x16a>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a6a      	ldr	r2, [pc, #424]	; (80006b8 <GPIO_Init+0x2ec>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d00f      	beq.n	8000532 <GPIO_Init+0x166>
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a69      	ldr	r2, [pc, #420]	; (80006bc <GPIO_Init+0x2f0>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d008      	beq.n	800052e <GPIO_Init+0x162>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a67      	ldr	r2, [pc, #412]	; (80006c0 <GPIO_Init+0x2f4>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d101      	bne.n	800052a <GPIO_Init+0x15e>
 8000526:	2305      	movs	r3, #5
 8000528:	e00a      	b.n	8000540 <GPIO_Init+0x174>
 800052a:	2300      	movs	r3, #0
 800052c:	e008      	b.n	8000540 <GPIO_Init+0x174>
 800052e:	2304      	movs	r3, #4
 8000530:	e006      	b.n	8000540 <GPIO_Init+0x174>
 8000532:	2303      	movs	r3, #3
 8000534:	e004      	b.n	8000540 <GPIO_Init+0x174>
 8000536:	2302      	movs	r3, #2
 8000538:	e002      	b.n	8000540 <GPIO_Init+0x174>
 800053a:	2301      	movs	r3, #1
 800053c:	e000      	b.n	8000540 <GPIO_Init+0x174>
 800053e:	2300      	movs	r3, #0
 8000540:	613b      	str	r3, [r7, #16]
		SYSCFG_PCLK_EN();
 8000542:	4b60      	ldr	r3, [pc, #384]	; (80006c4 <GPIO_Init+0x2f8>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	4a5f      	ldr	r2, [pc, #380]	; (80006c4 <GPIO_Init+0x2f8>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6193      	str	r3, [r2, #24]
		SYSCFG->EXTICR[temp1] = (portcode << temp2);
 800054e:	495e      	ldr	r1, [pc, #376]	; (80006c8 <GPIO_Init+0x2fc>)
 8000550:	693a      	ldr	r2, [r7, #16]
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	409a      	lsls	r2, r3
 8000556:	69bb      	ldr	r3, [r7, #24]
 8000558:	3302      	adds	r3, #2
 800055a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


		//3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR1 |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800055e:	4b53      	ldr	r3, [pc, #332]	; (80006ac <GPIO_Init+0x2e0>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	687a      	ldr	r2, [r7, #4]
 8000564:	7912      	ldrb	r2, [r2, #4]
 8000566:	4611      	mov	r1, r2
 8000568:	2201      	movs	r2, #1
 800056a:	408a      	lsls	r2, r1
 800056c:	4611      	mov	r1, r2
 800056e:	4a4f      	ldr	r2, [pc, #316]	; (80006ac <GPIO_Init+0x2e0>)
 8000570:	430b      	orrs	r3, r1
 8000572:	6013      	str	r3, [r2, #0]


	}

	//2. Configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	799b      	ldrb	r3, [r3, #6]
 8000578:	461a      	mov	r2, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	791b      	ldrb	r3, [r3, #4]
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	fa02 f303 	lsl.w	r3, r2, r3
 8000584:	61fb      	str	r3, [r7, #28]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		// Clearing those bits before setting them
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	689a      	ldr	r2, [r3, #8]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	791b      	ldrb	r3, [r3, #4]
 8000590:	4619      	mov	r1, r3
 8000592:	2303      	movs	r3, #3
 8000594:	408b      	lsls	r3, r1
 8000596:	43db      	mvns	r3, r3
 8000598:	4619      	mov	r1, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	400a      	ands	r2, r1
 80005a0:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;	//Setting
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	6899      	ldr	r1, [r3, #8]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	69fa      	ldr	r2, [r7, #28]
 80005ae:	430a      	orrs	r2, r1
 80005b0:	609a      	str	r2, [r3, #8]
	temp = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61fb      	str	r3, [r7, #28]

	//3. Configure the PUPD settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	79db      	ldrb	r3, [r3, #7]
 80005ba:	461a      	mov	r2, r3
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	791b      	ldrb	r3, [r3, #4]
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	fa02 f303 	lsl.w	r3, r2, r3
 80005c6:	61fb      	str	r3, [r7, #28]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		// Clearing those bits before setting them
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	68da      	ldr	r2, [r3, #12]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	791b      	ldrb	r3, [r3, #4]
 80005d2:	4619      	mov	r1, r3
 80005d4:	2303      	movs	r3, #3
 80005d6:	408b      	lsls	r3, r1
 80005d8:	43db      	mvns	r3, r3
 80005da:	4619      	mov	r1, r3
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	400a      	ands	r2, r1
 80005e2:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;		//Setting
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	68d9      	ldr	r1, [r3, #12]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	69fa      	ldr	r2, [r7, #28]
 80005f0:	430a      	orrs	r2, r1
 80005f2:	60da      	str	r2, [r3, #12]
	temp = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61fb      	str	r3, [r7, #28]

	//4. Configure the OP Type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	7a1b      	ldrb	r3, [r3, #8]
 80005fc:	461a      	mov	r2, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	791b      	ldrb	r3, [r3, #4]
 8000602:	fa02 f303 	lsl.w	r3, r2, r3
 8000606:	61fb      	str	r3, [r7, #28]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		// Clearing those bits before setting them
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	685a      	ldr	r2, [r3, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	791b      	ldrb	r3, [r3, #4]
 8000612:	4619      	mov	r1, r3
 8000614:	2301      	movs	r3, #1
 8000616:	408b      	lsls	r3, r1
 8000618:	43db      	mvns	r3, r3
 800061a:	4619      	mov	r1, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	400a      	ands	r2, r1
 8000622:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;	//Setting
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	6859      	ldr	r1, [r3, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	69fa      	ldr	r2, [r7, #28]
 8000630:	430a      	orrs	r2, r1
 8000632:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	61fb      	str	r3, [r7, #28]

	//5. Configure the alternate function
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	795b      	ldrb	r3, [r3, #5]
 800063c:	2b02      	cmp	r3, #2
 800063e:	d131      	bne.n	80006a4 <GPIO_Init+0x2d8>
	{
		//configure the alternate function register mode
		uint32_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;	// Finding the register
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	791b      	ldrb	r3, [r3, #4]
 8000644:	08db      	lsrs	r3, r3, #3
 8000646:	b2db      	uxtb	r3, r3
 8000648:	60fb      	str	r3, [r7, #12]
		temp2 = 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8);	// Finding the right bit position
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	791b      	ldrb	r3, [r3, #4]
 800064e:	f003 0307 	and.w	r3, r3, #7
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << temp2);		// Clearing
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	68fa      	ldr	r2, [r7, #12]
 800065c:	3208      	adds	r2, #8
 800065e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000662:	210f      	movs	r1, #15
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	fa01 f303 	lsl.w	r3, r1, r3
 800066a:	43db      	mvns	r3, r3
 800066c:	4619      	mov	r1, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4011      	ands	r1, r2
 8000674:	68fa      	ldr	r2, [r7, #12]
 8000676:	3208      	adds	r2, #8
 8000678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << temp2);	// Setting
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	3208      	adds	r2, #8
 8000684:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	7a5b      	ldrb	r3, [r3, #9]
 800068c:	4619      	mov	r1, r3
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	fa01 f303 	lsl.w	r3, r1, r3
 8000694:	4619      	mov	r1, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4311      	orrs	r1, r2
 800069c:	68fa      	ldr	r2, [r7, #12]
 800069e:	3208      	adds	r2, #8
 80006a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}

}
 80006a4:	bf00      	nop
 80006a6:	3720      	adds	r7, #32
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40010400 	.word	0x40010400
 80006b0:	48000400 	.word	0x48000400
 80006b4:	48000800 	.word	0x48000800
 80006b8:	48000c00 	.word	0x48000c00
 80006bc:	48001000 	.word	0x48001000
 80006c0:	48001400 	.word	0x48001400
 80006c4:	40021000 	.word	0x40021000
 80006c8:	40010000 	.word	0x40010000

080006cc <GPIO_ReadFromInputPin>:
 * @Parameters: GPIO port address, Pin Number
 * @Return: Value (which is 0 or 1 )
 */
// Data Read pin
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
 80006d4:	460b      	mov	r3, r1
 80006d6:	70fb      	strb	r3, [r7, #3]
	uint8_t Value;
	Value = (uint8_t)(pGPIOx->IDR >> PinNumber) & 0x00000001;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	691a      	ldr	r2, [r3, #16]
 80006dc:	78fb      	ldrb	r3, [r7, #3]
 80006de:	fa22 f303 	lsr.w	r3, r2, r3
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	f003 0301 	and.w	r3, r3, #1
 80006e8:	73fb      	strb	r3, [r7, #15]
	return Value;
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <RCC_GetPCLK1Value+0x9c>)
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	089b      	lsrs	r3, r3, #2
 8000704:	b2db      	uxtb	r3, r3
 8000706:	f003 0303 	and.w	r3, r3, #3
 800070a:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 800070c:	7a7b      	ldrb	r3, [r7, #9]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d102      	bne.n	8000718 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8000712:	4b21      	ldr	r3, [pc, #132]	; (8000798 <RCC_GetPCLK1Value+0xa0>)
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	e00b      	b.n	8000730 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 8000718:	7a7b      	ldrb	r3, [r7, #9]
 800071a:	2b01      	cmp	r3, #1
 800071c:	d102      	bne.n	8000724 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 800071e:	4b1f      	ldr	r3, [pc, #124]	; (800079c <RCC_GetPCLK1Value+0xa4>)
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	e005      	b.n	8000730 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 8000724:	7a7b      	ldrb	r3, [r7, #9]
 8000726:	2b02      	cmp	r3, #2
 8000728:	d102      	bne.n	8000730 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 800072a:	f000 f88d 	bl	8000848 <RCC_GetPLLOutputClock>
 800072e:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8000730:	4b18      	ldr	r3, [pc, #96]	; (8000794 <RCC_GetPCLK1Value+0x9c>)
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	091b      	lsrs	r3, r3, #4
 8000736:	b2db      	uxtb	r3, r3
 8000738:	f003 030f 	and.w	r3, r3, #15
 800073c:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 800073e:	7a3b      	ldrb	r3, [r7, #8]
 8000740:	2b07      	cmp	r3, #7
 8000742:	d802      	bhi.n	800074a <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000744:	2301      	movs	r3, #1
 8000746:	72fb      	strb	r3, [r7, #11]
 8000748:	e005      	b.n	8000756 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 800074a:	7a3b      	ldrb	r3, [r7, #8]
 800074c:	3b08      	subs	r3, #8
 800074e:	4a14      	ldr	r2, [pc, #80]	; (80007a0 <RCC_GetPCLK1Value+0xa8>)
 8000750:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000754:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <RCC_GetPCLK1Value+0x9c>)
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	0a9b      	lsrs	r3, r3, #10
 800075c:	b2db      	uxtb	r3, r3
 800075e:	f003 0307 	and.w	r3, r3, #7
 8000762:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000764:	7a3b      	ldrb	r3, [r7, #8]
 8000766:	2b03      	cmp	r3, #3
 8000768:	d802      	bhi.n	8000770 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 800076a:	2301      	movs	r3, #1
 800076c:	72bb      	strb	r3, [r7, #10]
 800076e:	e004      	b.n	800077a <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 8000770:	7a3b      	ldrb	r3, [r7, #8]
 8000772:	3b04      	subs	r3, #4
 8000774:	4a0b      	ldr	r2, [pc, #44]	; (80007a4 <RCC_GetPCLK1Value+0xac>)
 8000776:	5cd3      	ldrb	r3, [r2, r3]
 8000778:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 800077a:	7afb      	ldrb	r3, [r7, #11]
 800077c:	68fa      	ldr	r2, [r7, #12]
 800077e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000782:	7abb      	ldrb	r3, [r7, #10]
 8000784:	fbb2 f3f3 	udiv	r3, r2, r3
 8000788:	607b      	str	r3, [r7, #4]

	return pclk1;
 800078a:	687b      	ldr	r3, [r7, #4]
}
 800078c:	4618      	mov	r0, r3
 800078e:	3710      	adds	r7, #16
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40021000 	.word	0x40021000
 8000798:	00f42400 	.word	0x00f42400
 800079c:	007a1200 	.word	0x007a1200
 80007a0:	20000000 	.word	0x20000000
 80007a4:	20000010 	.word	0x20000010

080007a8 <RCC_GetPCLK2Value>:
 *
 * @Note              -

 */
uint32_t RCC_GetPCLK2Value(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 80007b2:	4b20      	ldr	r3, [pc, #128]	; (8000834 <RCC_GetPCLK2Value+0x8c>)
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	089b      	lsrs	r3, r3, #2
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	f003 0303 	and.w	r3, r3, #3
 80007be:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 80007c0:	7a7b      	ldrb	r3, [r7, #9]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d102      	bne.n	80007cc <RCC_GetPCLK2Value+0x24>
	{
		SystemClock = 16000000;
 80007c6:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <RCC_GetPCLK2Value+0x90>)
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	e001      	b.n	80007d0 <RCC_GetPCLK2Value+0x28>
	}else
	{
		SystemClock = 8000000;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <RCC_GetPCLK2Value+0x94>)
 80007ce:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 80007d0:	4b18      	ldr	r3, [pc, #96]	; (8000834 <RCC_GetPCLK2Value+0x8c>)
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	091b      	lsrs	r3, r3, #4
 80007d6:	f003 030f 	and.w	r3, r3, #15
 80007da:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b07      	cmp	r3, #7
 80007e0:	d802      	bhi.n	80007e8 <RCC_GetPCLK2Value+0x40>
	{
		ahbp = 1;
 80007e2:	2301      	movs	r3, #1
 80007e4:	72fb      	strb	r3, [r7, #11]
 80007e6:	e005      	b.n	80007f4 <RCC_GetPCLK2Value+0x4c>
	}else
	{
       ahbp = AHB_PreScaler[tmp-8];
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3b08      	subs	r3, #8
 80007ec:	4a14      	ldr	r2, [pc, #80]	; (8000840 <RCC_GetPCLK2Value+0x98>)
 80007ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007f2:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 80007f4:	4b0f      	ldr	r3, [pc, #60]	; (8000834 <RCC_GetPCLK2Value+0x8c>)
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	0b5b      	lsrs	r3, r3, #13
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b03      	cmp	r3, #3
 8000804:	d802      	bhi.n	800080c <RCC_GetPCLK2Value+0x64>
	{
		apb2p = 1;
 8000806:	2301      	movs	r3, #1
 8000808:	72bb      	strb	r3, [r7, #10]
 800080a:	e004      	b.n	8000816 <RCC_GetPCLK2Value+0x6e>
	}else
	{
		apb2p = APB1_PreScaler[tmp-4];
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	3b04      	subs	r3, #4
 8000810:	4a0c      	ldr	r2, [pc, #48]	; (8000844 <RCC_GetPCLK2Value+0x9c>)
 8000812:	5cd3      	ldrb	r3, [r2, r3]
 8000814:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 8000816:	7afb      	ldrb	r3, [r7, #11]
 8000818:	68fa      	ldr	r2, [r7, #12]
 800081a:	fbb2 f2f3 	udiv	r2, r2, r3
 800081e:	7abb      	ldrb	r3, [r7, #10]
 8000820:	fbb2 f3f3 	udiv	r3, r2, r3
 8000824:	603b      	str	r3, [r7, #0]

	return pclk2;
 8000826:	683b      	ldr	r3, [r7, #0]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3714      	adds	r7, #20
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	40021000 	.word	0x40021000
 8000838:	00f42400 	.word	0x00f42400
 800083c:	007a1200 	.word	0x007a1200
 8000840:	20000000 	.word	0x20000000
 8000844:	20000010 	.word	0x20000010

08000848 <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock()
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

	return 0;
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <USART_PeriClockControl>:

/*
 * Peripheral Clock setup
 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	460b      	mov	r3, r1
 8000862:	70fb      	strb	r3, [r7, #3]


}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <USART_Init>:

/*
 * Init and De-init
 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
	//Temporary variable
	uint32_t tempreg=0;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	 USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2101      	movs	r1, #1
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff ffe8 	bl	8000858 <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	791b      	ldrb	r3, [r3, #4]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d104      	bne.n	800089a <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << 2);
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	f043 0304 	orr.w	r3, r3, #4
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	e010      	b.n	80008bc <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	791b      	ldrb	r3, [r3, #4]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d104      	bne.n	80008ac <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << 3);
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	f043 0308 	orr.w	r3, r3, #8
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	e007      	b.n	80008bc <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	791b      	ldrb	r3, [r3, #4]
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	d103      	bne.n	80008bc <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << 2) | ( 1 << 3) );
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f043 030c 	orr.w	r3, r3, #12
 80008ba:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << 28;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	7b5b      	ldrb	r3, [r3, #13]
 80008c0:	071b      	lsls	r3, r3, #28
 80008c2:	461a      	mov	r2, r3
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	4313      	orrs	r3, r2
 80008c8:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	7b9b      	ldrb	r3, [r3, #14]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d104      	bne.n	80008dc <USART_Init+0x6c>
	{
		//Implement the code to enable the parity control
		tempreg |= ( 1 << 10);
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008d8:	60fb      	str	r3, [r7, #12]
 80008da:	e00b      	b.n	80008f4 <USART_Init+0x84>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	7b9b      	ldrb	r3, [r3, #14]
 80008e0:	2b02      	cmp	r3, #2
 80008e2:	d107      	bne.n	80008f4 <USART_Init+0x84>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << 10);
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008ea:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << 9);
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008f2:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	68fa      	ldr	r2, [r7, #12]
 80008fa:	601a      	str	r2, [r3, #0]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << 12;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	7b1b      	ldrb	r3, [r3, #12]
 8000904:	031b      	lsls	r3, r3, #12
 8000906:	461a      	mov	r2, r3
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	4313      	orrs	r3, r2
 800090c:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	68fa      	ldr	r2, [r7, #12]
 8000914:	605a      	str	r2, [r3, #4]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	7bdb      	ldrb	r3, [r3, #15]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d104      	bne.n	800092c <USART_Init+0xbc>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << 9);
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	e010      	b.n	800094e <USART_Init+0xde>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	7bdb      	ldrb	r3, [r3, #15]
 8000930:	2b02      	cmp	r3, #2
 8000932:	d104      	bne.n	800093e <USART_Init+0xce>
	{
		//Implement the code to enable RTS flow control
		tempreg |= (1 << 8);
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	e007      	b.n	800094e <USART_Init+0xde>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	7bdb      	ldrb	r3, [r3, #15]
 8000942:	2b03      	cmp	r3, #3
 8000944:	d103      	bne.n	800094e <USART_Init+0xde>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( 1 << 9) | (1 << 8);
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800094c:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	609a      	str	r2, [r3, #8]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	4619      	mov	r1, r3
 8000960:	4610      	mov	r0, r2
 8000962:	f000 f87b 	bl	8000a5c <USART_SetBaudRate>


}
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <USART_SendData>:

/*
 * Data Send and Receive
 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b086      	sub	sp, #24
 8000972:	af00      	add	r7, sp, #0
 8000974:	60f8      	str	r0, [r7, #12]
 8000976:	60b9      	str	r1, [r7, #8]
 8000978:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	e031      	b.n	80009e4 <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000980:	bf00      	nop
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	2107      	movs	r1, #7
 8000988:	4618      	mov	r0, r3
 800098a:	f000 f975 	bl	8000c78 <USART_GetFlagStatus>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d0f6      	beq.n	8000982 <USART_SendData+0x14>

         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	7b5b      	ldrb	r3, [r3, #13]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d118      	bne.n	80009ce <USART_SendData+0x60>
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->TDR = (*pdata & (uint16_t)0x01FF);
 80009a0:	693b      	ldr	r3, [r7, #16]
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80009ae:	629a      	str	r2, [r3, #40]	; 0x28

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	7b9b      	ldrb	r3, [r3, #14]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d106      	bne.n	80009c6 <USART_SendData+0x58>
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	3301      	adds	r3, #1
 80009bc:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 80009be:	68bb      	ldr	r3, [r7, #8]
 80009c0:	3301      	adds	r3, #1
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	e00b      	b.n	80009de <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	3301      	adds	r3, #1
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	e007      	b.n	80009de <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->TDR = (*pTxBuffer  & (uint8_t)0xFF);
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	781a      	ldrb	r2, [r3, #0]
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	629a      	str	r2, [r3, #40]	; 0x28

			//Implement the code to increment the buffer address
			pTxBuffer++;
 80009d8:	68bb      	ldr	r3, [r7, #8]
 80009da:	3301      	adds	r3, #1
 80009dc:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	3301      	adds	r3, #1
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	697a      	ldr	r2, [r7, #20]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d3c9      	bcc.n	8000980 <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 80009ec:	bf00      	nop
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2106      	movs	r1, #6
 80009f4:	4618      	mov	r0, r3
 80009f6:	f000 f93f 	bl	8000c78 <USART_GetFlagStatus>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d0f6      	beq.n	80009ee <USART_SendData+0x80>
}
 8000a00:	bf00      	nop
 8000a02:	3718      	adds	r7, #24
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <USART_ReceiveDataIT>:

	return txstate;
}

uint8_t USART_ReceiveDataIT(USART_Handle_t *pUSARTHandle,uint8_t *pRxBuffer, uint32_t Len)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b087      	sub	sp, #28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
	uint8_t rxstate = pUSARTHandle->RxBusyState;
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8000a1a:	75fb      	strb	r3, [r7, #23]

	if(rxstate != USART_BUSY_IN_RX)
 8000a1c:	7dfb      	ldrb	r3, [r7, #23]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d014      	beq.n	8000a4c <USART_ReceiveDataIT+0x44>
	{
		pUSARTHandle->RxLen = Len;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	61da      	str	r2, [r3, #28]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	2201      	movs	r2, #1
 8000a32:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

		(void)pUSARTHandle->pUSARTx->RDR;
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24

		//Implement the code to enable interrupt for RXNE
		pUSARTHandle->pUSARTx->CR1 |= ( 1 << USART_CR1_RXNEIE);
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f042 0220 	orr.w	r2, r2, #32
 8000a4a:	601a      	str	r2, [r3, #0]

	}

	return rxstate;
 8000a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	371c      	adds	r7, #28
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <USART_SetBaudRate>:



void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a2f      	ldr	r2, [pc, #188]	; (8000b2c <USART_SetBaudRate+0xd0>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d103      	bne.n	8000a7a <USART_SetBaudRate+0x1e>
  {
	   //USART1 is hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8000a72:	f7ff fe99 	bl	80007a8 <RCC_GetPCLK2Value>
 8000a76:	61f8      	str	r0, [r7, #28]
 8000a78:	e002      	b.n	8000a80 <USART_SetBaudRate+0x24>
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
 8000a7a:	f7ff fe3d 	bl	80006f8 <RCC_GetPCLK1Value>
 8000a7e:	61f8      	str	r0, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << 15))
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d00b      	beq.n	8000aa4 <USART_SetBaudRate+0x48>
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8000a8c:	69fa      	ldr	r2, [r7, #28]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	4413      	add	r3, r2
 8000a94:	009a      	lsls	r2, r3, #2
 8000a96:	441a      	add	r2, r3
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aa0:	61bb      	str	r3, [r7, #24]
 8000aa2:	e00a      	b.n	8000aba <USART_SetBaudRate+0x5e>
  }else
  {
	   //over sampling by 16
	  usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8000aa4:	69fa      	ldr	r2, [r7, #28]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	4413      	add	r3, r2
 8000aac:	009a      	lsls	r2, r3, #2
 8000aae:	441a      	add	r2, r3
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab8:	61bb      	str	r3, [r7, #24]
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;
 8000aba:	69bb      	ldr	r3, [r7, #24]
 8000abc:	4a1c      	ldr	r2, [pc, #112]	; (8000b30 <USART_SetBaudRate+0xd4>)
 8000abe:	fba2 2303 	umull	r2, r3, r2, r3
 8000ac2:	095b      	lsrs	r3, r3, #5
 8000ac4:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	011b      	lsls	r3, r3, #4
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	2264      	movs	r2, #100	; 0x64
 8000ad4:	fb02 f303 	mul.w	r3, r2, r3
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << 15))
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d00a      	beq.n	8000b00 <USART_SetBaudRate+0xa4>
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	00db      	lsls	r3, r3, #3
 8000aee:	3332      	adds	r3, #50	; 0x32
 8000af0:	4a0f      	ldr	r2, [pc, #60]	; (8000b30 <USART_SetBaudRate+0xd4>)
 8000af2:	fba2 2303 	umull	r2, r3, r2, r3
 8000af6:	095b      	lsrs	r3, r3, #5
 8000af8:	f003 0307 	and.w	r3, r3, #7
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	e009      	b.n	8000b14 <USART_SetBaudRate+0xb8>

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	011b      	lsls	r3, r3, #4
 8000b04:	3332      	adds	r3, #50	; 0x32
 8000b06:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <USART_SetBaudRate+0xd4>)
 8000b08:	fba2 2303 	umull	r2, r3, r2, r3
 8000b0c:	095b      	lsrs	r3, r3, #5
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	617b      	str	r3, [r7, #20]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	4313      	orrs	r3, r2
 8000b1a:	613b      	str	r3, [r7, #16]

  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = tempreg;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	60da      	str	r2, [r3, #12]
}
 8000b22:	bf00      	nop
 8000b24:	3720      	adds	r7, #32
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40013800 	.word	0x40013800
 8000b30:	51eb851f 	.word	0x51eb851f

08000b34 <USART_IRQInterruptConfig>:

/*
 * IRQ Configuration and ISR handling
 */
void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	460a      	mov	r2, r1
 8000b3e:	71fb      	strb	r3, [r7, #7]
 8000b40:	4613      	mov	r3, r2
 8000b42:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 8000b44:	79bb      	ldrb	r3, [r7, #6]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d133      	bne.n	8000bb2 <USART_IRQInterruptConfig+0x7e>
		{
			if(IRQNumber <= 31)
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b1f      	cmp	r3, #31
 8000b4e:	d80a      	bhi.n	8000b66 <USART_IRQInterruptConfig+0x32>
			{
				//program ISER0 register
				*NVIC_ISER0 |= ( 1 << IRQNumber );
 8000b50:	4b35      	ldr	r3, [pc, #212]	; (8000c28 <USART_IRQInterruptConfig+0xf4>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	79fa      	ldrb	r2, [r7, #7]
 8000b56:	2101      	movs	r1, #1
 8000b58:	fa01 f202 	lsl.w	r2, r1, r2
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	4a32      	ldr	r2, [pc, #200]	; (8000c28 <USART_IRQInterruptConfig+0xf4>)
 8000b60:	430b      	orrs	r3, r1
 8000b62:	6013      	str	r3, [r2, #0]
			}
		}



}
 8000b64:	e059      	b.n	8000c1a <USART_IRQInterruptConfig+0xe6>
			}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b1f      	cmp	r3, #31
 8000b6a:	d90f      	bls.n	8000b8c <USART_IRQInterruptConfig+0x58>
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	2b3f      	cmp	r3, #63	; 0x3f
 8000b70:	d80c      	bhi.n	8000b8c <USART_IRQInterruptConfig+0x58>
				*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000b72:	4b2e      	ldr	r3, [pc, #184]	; (8000c2c <USART_IRQInterruptConfig+0xf8>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	79fa      	ldrb	r2, [r7, #7]
 8000b78:	f002 021f 	and.w	r2, r2, #31
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b82:	4611      	mov	r1, r2
 8000b84:	4a29      	ldr	r2, [pc, #164]	; (8000c2c <USART_IRQInterruptConfig+0xf8>)
 8000b86:	430b      	orrs	r3, r1
 8000b88:	6013      	str	r3, [r2, #0]
 8000b8a:	e046      	b.n	8000c1a <USART_IRQInterruptConfig+0xe6>
			else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	2b3f      	cmp	r3, #63	; 0x3f
 8000b90:	d943      	bls.n	8000c1a <USART_IRQInterruptConfig+0xe6>
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	2b5f      	cmp	r3, #95	; 0x5f
 8000b96:	d840      	bhi.n	8000c1a <USART_IRQInterruptConfig+0xe6>
				*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
 8000b98:	4b25      	ldr	r3, [pc, #148]	; (8000c30 <USART_IRQInterruptConfig+0xfc>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	79fa      	ldrb	r2, [r7, #7]
 8000b9e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba8:	4611      	mov	r1, r2
 8000baa:	4a21      	ldr	r2, [pc, #132]	; (8000c30 <USART_IRQInterruptConfig+0xfc>)
 8000bac:	430b      	orrs	r3, r1
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	e033      	b.n	8000c1a <USART_IRQInterruptConfig+0xe6>
			if(IRQNumber <= 31)
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	2b1f      	cmp	r3, #31
 8000bb6:	d80a      	bhi.n	8000bce <USART_IRQInterruptConfig+0x9a>
				*NVIC_ICER0 |= ( 1 << IRQNumber );
 8000bb8:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <USART_IRQInterruptConfig+0x100>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	79fa      	ldrb	r2, [r7, #7]
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	4a1b      	ldr	r2, [pc, #108]	; (8000c34 <USART_IRQInterruptConfig+0x100>)
 8000bc8:	430b      	orrs	r3, r1
 8000bca:	6013      	str	r3, [r2, #0]
}
 8000bcc:	e025      	b.n	8000c1a <USART_IRQInterruptConfig+0xe6>
			}else if(IRQNumber > 31 && IRQNumber < 64 )
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	2b1f      	cmp	r3, #31
 8000bd2:	d90f      	bls.n	8000bf4 <USART_IRQInterruptConfig+0xc0>
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	2b3f      	cmp	r3, #63	; 0x3f
 8000bd8:	d80c      	bhi.n	8000bf4 <USART_IRQInterruptConfig+0xc0>
				*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 8000bda:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <USART_IRQInterruptConfig+0x104>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	79fa      	ldrb	r2, [r7, #7]
 8000be0:	f002 021f 	and.w	r2, r2, #31
 8000be4:	2101      	movs	r1, #1
 8000be6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bea:	4611      	mov	r1, r2
 8000bec:	4a12      	ldr	r2, [pc, #72]	; (8000c38 <USART_IRQInterruptConfig+0x104>)
 8000bee:	430b      	orrs	r3, r1
 8000bf0:	6013      	str	r3, [r2, #0]
 8000bf2:	e012      	b.n	8000c1a <USART_IRQInterruptConfig+0xe6>
			else if(IRQNumber >= 6 && IRQNumber < 96 )
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2b05      	cmp	r3, #5
 8000bf8:	d90f      	bls.n	8000c1a <USART_IRQInterruptConfig+0xe6>
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2b5f      	cmp	r3, #95	; 0x5f
 8000bfe:	d80c      	bhi.n	8000c1a <USART_IRQInterruptConfig+0xe6>
				*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
 8000c00:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <USART_IRQInterruptConfig+0x108>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	79fa      	ldrb	r2, [r7, #7]
 8000c06:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c10:	4611      	mov	r1, r2
 8000c12:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <USART_IRQInterruptConfig+0x108>)
 8000c14:	430b      	orrs	r3, r1
 8000c16:	6013      	str	r3, [r2, #0]
}
 8000c18:	e7ff      	b.n	8000c1a <USART_IRQInterruptConfig+0xe6>
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000e100 	.word	0xe000e100
 8000c2c:	e000e104 	.word	0xe000e104
 8000c30:	e000e10c 	.word	0xe000e10c
 8000c34:	e000e180 	.word	0xe000e180
 8000c38:	e000e184 	.word	0xe000e184
 8000c3c:	e000e18c 	.word	0xe000e18c

08000c40 <USART_PeripheralControl>:

/*
 * Other Peripheral Control APIs
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t Cmd)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	70fb      	strb	r3, [r7, #3]
	if(Cmd == ENABLE)
 8000c4c:	78fb      	ldrb	r3, [r7, #3]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d106      	bne.n	8000c60 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << 0);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f043 0201 	orr.w	r2, r3, #1
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	601a      	str	r2, [r3, #0]
	}else
	{
		pUSARTx->CR1 &= ~(1 << 0);
	}

}
 8000c5e:	e005      	b.n	8000c6c <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << 0);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f023 0201 	bic.w	r2, r3, #1
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	601a      	str	r2, [r3, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <USART_GetFlagStatus>:

uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx , uint32_t StatusFlagName)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]

	if(pUSARTx->ISR & StatusFlagName)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	69da      	ldr	r2, [r3, #28]
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <USART_GetFlagStatus+0x1a>
	{
	    return SET;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e000      	b.n	8000c94 <USART_GetFlagStatus+0x1c>
	}

	return RESET;
 8000c92:	2300      	movs	r3, #0

}
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <USART2_Init>:
uint8_t g_data = 0;

extern void initialise_monitor_handles();

void USART2_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 8000ca4:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <USART2_Init+0x3c>)
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <USART2_Init+0x40>)
 8000ca8:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <USART2_Init+0x3c>)
 8000cac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb0:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000cb2:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <USART2_Init+0x3c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <USART2_Init+0x3c>)
 8000cba:	2202      	movs	r2, #2
 8000cbc:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <USART2_Init+0x3c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <USART2_Init+0x3c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000cca:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <USART2_Init+0x3c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 8000cd0:	4802      	ldr	r0, [pc, #8]	; (8000cdc <USART2_Init+0x3c>)
 8000cd2:	f7ff fdcd 	bl	8000870 <USART_Init>
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200000b0 	.word	0x200000b0
 8000ce0:	40004400 	.word	0x40004400

08000ce4 <USART2_GPIOInit>:

void 	USART2_GPIOInit(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 8000cea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000cee:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPDR_PU;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode =7;
 8000d00:	2307      	movs	r3, #7
 8000d02:	737b      	strb	r3, [r7, #13]

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_2;
 8000d04:	2302      	movs	r3, #2
 8000d06:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fb5e 	bl	80003cc <GPIO_Init>

	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000d10:	2303      	movs	r3, #3
 8000d12:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fb58 	bl	80003cc <GPIO_Init>

}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <delay>:
	GPIO_Init(&GpioLed);

}

void delay(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	e002      	b.n	8000d36 <delay+0x12>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3301      	adds	r3, #1
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <delay+0x28>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d9f8      	bls.n	8000d30 <delay+0xc>
}
 8000d3e:	bf00      	nop
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	0003d08f 	.word	0x0003d08f

08000d50 <main>:
int main(void)
{
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
	uint32_t cnt = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]


	initialise_monitor_handles();
 8000d5a:	f000 f87d 	bl	8000e58 <initialise_monitor_handles>

	USART2_GPIOInit();
 8000d5e:	f7ff ffc1 	bl	8000ce4 <USART2_GPIOInit>
    USART2_Init();
 8000d62:	f7ff ff9d 	bl	8000ca0 <USART2_Init>

    USART_IRQInterruptConfig(IRQ_NO_USART2,ENABLE);
 8000d66:	2101      	movs	r1, #1
 8000d68:	2026      	movs	r0, #38	; 0x26
 8000d6a:	f7ff fee3 	bl	8000b34 <USART_IRQInterruptConfig>

    USART_PeripheralControl(USART2,ENABLE);
 8000d6e:	2101      	movs	r1, #1
 8000d70:	4830      	ldr	r0, [pc, #192]	; (8000e34 <main+0xe4>)
 8000d72:	f7ff ff65 	bl	8000c40 <USART_PeripheralControl>

    printf("Application is running\n");
 8000d76:	4830      	ldr	r0, [pc, #192]	; (8000e38 <main+0xe8>)
 8000d78:	f000 f9e8 	bl	800114c <puts>

    //do forever
    while(1)
    {
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000d7c:	bf00      	nop
 8000d7e:	2100      	movs	r1, #0
 8000d80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d84:	f7ff fca2 	bl	80006cc <GPIO_ReadFromInputPin>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d0f7      	beq.n	8000d7e <main+0x2e>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000d8e:	f7ff ffc9 	bl	8000d24 <delay>

		// Next message index ; make sure that cnt value doesn't cross 2
		cnt = cnt % 3;
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	4b29      	ldr	r3, [pc, #164]	; (8000e3c <main+0xec>)
 8000d96:	fba3 1302 	umull	r1, r3, r3, r2
 8000d9a:	0859      	lsrs	r1, r3, #1
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	440b      	add	r3, r1
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	607b      	str	r3, [r7, #4]

		//First lets enable the reception in interrupt mode
		//this code enables the receive interrupt
		while ( USART_ReceiveDataIT(&usart2_handle,rx_buf,strlen(msg[cnt])) != USART_READY );
 8000da6:	bf00      	nop
 8000da8:	4a25      	ldr	r2, [pc, #148]	; (8000e40 <main+0xf0>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fa15 	bl	80001e0 <strlen>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	4922      	ldr	r1, [pc, #136]	; (8000e44 <main+0xf4>)
 8000dbc:	4822      	ldr	r0, [pc, #136]	; (8000e48 <main+0xf8>)
 8000dbe:	f7ff fe23 	bl	8000a08 <USART_ReceiveDataIT>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d1ef      	bne.n	8000da8 <main+0x58>

		//Send the msg indexed by cnt in blocking mode
    	USART_SendData(&usart2_handle,(uint8_t*)msg[cnt],strlen(msg[cnt]));
 8000dc8:	4a1d      	ldr	r2, [pc, #116]	; (8000e40 <main+0xf0>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000dd0:	4a1b      	ldr	r2, [pc, #108]	; (8000e40 <main+0xf0>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff fa01 	bl	80001e0 <strlen>
 8000dde:	4603      	mov	r3, r0
 8000de0:	461a      	mov	r2, r3
 8000de2:	4621      	mov	r1, r4
 8000de4:	4818      	ldr	r0, [pc, #96]	; (8000e48 <main+0xf8>)
 8000de6:	f7ff fdc2 	bl	800096e <USART_SendData>

    	printf("Transmitted : %s\n",msg[cnt]);
 8000dea:	4a15      	ldr	r2, [pc, #84]	; (8000e40 <main+0xf0>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df2:	4619      	mov	r1, r3
 8000df4:	4815      	ldr	r0, [pc, #84]	; (8000e4c <main+0xfc>)
 8000df6:	f000 f935 	bl	8001064 <iprintf>


    	//Now lets wait until all the bytes are received from the arduino .
    	//When all the bytes are received rxCmplt will be SET in application callback
    	while(rxCmplt != SET);
 8000dfa:	bf00      	nop
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <main+0x100>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d1fb      	bne.n	8000dfc <main+0xac>

    	//just make sure that last byte should be null otherwise %s fails while printing
    	rx_buf[strlen(msg[cnt])+ 1] = '\0';
 8000e04:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <main+0xf0>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff f9e7 	bl	80001e0 <strlen>
 8000e12:	4603      	mov	r3, r0
 8000e14:	3301      	adds	r3, #1
 8000e16:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <main+0xf4>)
 8000e18:	2100      	movs	r1, #0
 8000e1a:	54d1      	strb	r1, [r2, r3]

    	//Print what we received from the arduino
    	printf("Received    : %s\n",rx_buf);
 8000e1c:	4909      	ldr	r1, [pc, #36]	; (8000e44 <main+0xf4>)
 8000e1e:	480d      	ldr	r0, [pc, #52]	; (8000e54 <main+0x104>)
 8000e20:	f000 f920 	bl	8001064 <iprintf>

    	//invalidate the flag
    	rxCmplt = RESET;
 8000e24:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <main+0x100>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]

    	//move on to next message indexed in msg[]
    	cnt ++;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	607b      	str	r3, [r7, #4]
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000e30:	e7a4      	b.n	8000d7c <main+0x2c>
 8000e32:	bf00      	nop
 8000e34:	40004400 	.word	0x40004400
 8000e38:	08001f44 	.word	0x08001f44
 8000e3c:	aaaaaaab 	.word	0xaaaaaaab
 8000e40:	20000014 	.word	0x20000014
 8000e44:	200000d4 	.word	0x200000d4
 8000e48:	200000b0 	.word	0x200000b0
 8000e4c:	08001f5c 	.word	0x08001f5c
 8000e50:	200000a0 	.word	0x200000a0
 8000e54:	08001f70 	.word	0x08001f70

08000e58 <initialise_monitor_handles>:
char **environ = __env;


/* Functions */
void initialise_monitor_handles()
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b086      	sub	sp, #24
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	60f8      	str	r0, [r7, #12]
 8000e6e:	60b9      	str	r1, [r7, #8]
 8000e70:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	e00a      	b.n	8000e8e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e78:	f3af 8000 	nop.w
 8000e7c:	4601      	mov	r1, r0
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	1c5a      	adds	r2, r3, #1
 8000e82:	60ba      	str	r2, [r7, #8]
 8000e84:	b2ca      	uxtb	r2, r1
 8000e86:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	697a      	ldr	r2, [r7, #20]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	dbf0      	blt.n	8000e78 <_read+0x12>
	}

return len;
 8000e96:	687b      	ldr	r3, [r7, #4]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3718      	adds	r7, #24
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	e009      	b.n	8000ec6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	1c5a      	adds	r2, r3, #1
 8000eb6:	60ba      	str	r2, [r7, #8]
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	697a      	ldr	r2, [r7, #20]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	dbf1      	blt.n	8000eb2 <_write+0x12>
	}
	return len;
 8000ece:	687b      	ldr	r3, [r7, #4]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <_close>:

int _close(int file)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	return -1;
 8000ee0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f00:	605a      	str	r2, [r3, #4]
	return 0;
 8000f02:	2300      	movs	r3, #0
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <_isatty>:

int _isatty(int file)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	return 1;
 8000f18:	2301      	movs	r3, #1
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b085      	sub	sp, #20
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	60f8      	str	r0, [r7, #12]
 8000f2e:	60b9      	str	r1, [r7, #8]
 8000f30:	607a      	str	r2, [r7, #4]
	return 0;
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f48:	4a14      	ldr	r2, [pc, #80]	; (8000f9c <_sbrk+0x5c>)
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <_sbrk+0x60>)
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f54:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <_sbrk+0x64>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <_sbrk+0x64>)
 8000f5e:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <_sbrk+0x68>)
 8000f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <_sbrk+0x64>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d207      	bcs.n	8000f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f70:	f000 f846 	bl	8001000 <__errno>
 8000f74:	4602      	mov	r2, r0
 8000f76:	230c      	movs	r3, #12
 8000f78:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f7e:	e009      	b.n	8000f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f86:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <_sbrk+0x64>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <_sbrk+0x64>)
 8000f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f92:	68fb      	ldr	r3, [r7, #12]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	2000a000 	.word	0x2000a000
 8000fa0:	00000400 	.word	0x00000400
 8000fa4:	200000a4 	.word	0x200000a4
 8000fa8:	200004d8 	.word	0x200004d8

08000fac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fac:	480d      	ldr	r0, [pc, #52]	; (8000fe4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fae:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000fb0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb4:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fb6:	490d      	ldr	r1, [pc, #52]	; (8000fec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <LoopForever+0xe>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fbc:	e002      	b.n	8000fc4 <LoopCopyDataInit>

08000fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc2:	3304      	adds	r3, #4

08000fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc8:	d3f9      	bcc.n	8000fbe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fca:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fcc:	4c0a      	ldr	r4, [pc, #40]	; (8000ff8 <LoopForever+0x16>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd0:	e001      	b.n	8000fd6 <LoopFillZerobss>

08000fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd4:	3204      	adds	r2, #4

08000fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd8:	d3fb      	bcc.n	8000fd2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fda:	f000 f817 	bl	800100c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fde:	f7ff feb7 	bl	8000d50 <main>

08000fe2 <LoopForever>:

LoopForever:
    b LoopForever
 8000fe2:	e7fe      	b.n	8000fe2 <LoopForever>
  ldr   r0, =_estack
 8000fe4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fec:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000ff0:	08002024 	.word	0x08002024
  ldr r2, =_sbss
 8000ff4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000ff8:	200004d8 	.word	0x200004d8

08000ffc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ffc:	e7fe      	b.n	8000ffc <ADC1_2_IRQHandler>
	...

08001000 <__errno>:
 8001000:	4b01      	ldr	r3, [pc, #4]	; (8001008 <__errno+0x8>)
 8001002:	6818      	ldr	r0, [r3, #0]
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000020 	.word	0x20000020

0800100c <__libc_init_array>:
 800100c:	b570      	push	{r4, r5, r6, lr}
 800100e:	4e0d      	ldr	r6, [pc, #52]	; (8001044 <__libc_init_array+0x38>)
 8001010:	4c0d      	ldr	r4, [pc, #52]	; (8001048 <__libc_init_array+0x3c>)
 8001012:	1ba4      	subs	r4, r4, r6
 8001014:	10a4      	asrs	r4, r4, #2
 8001016:	2500      	movs	r5, #0
 8001018:	42a5      	cmp	r5, r4
 800101a:	d109      	bne.n	8001030 <__libc_init_array+0x24>
 800101c:	4e0b      	ldr	r6, [pc, #44]	; (800104c <__libc_init_array+0x40>)
 800101e:	4c0c      	ldr	r4, [pc, #48]	; (8001050 <__libc_init_array+0x44>)
 8001020:	f000 ff68 	bl	8001ef4 <_init>
 8001024:	1ba4      	subs	r4, r4, r6
 8001026:	10a4      	asrs	r4, r4, #2
 8001028:	2500      	movs	r5, #0
 800102a:	42a5      	cmp	r5, r4
 800102c:	d105      	bne.n	800103a <__libc_init_array+0x2e>
 800102e:	bd70      	pop	{r4, r5, r6, pc}
 8001030:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001034:	4798      	blx	r3
 8001036:	3501      	adds	r5, #1
 8001038:	e7ee      	b.n	8001018 <__libc_init_array+0xc>
 800103a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800103e:	4798      	blx	r3
 8001040:	3501      	adds	r5, #1
 8001042:	e7f2      	b.n	800102a <__libc_init_array+0x1e>
 8001044:	0800201c 	.word	0x0800201c
 8001048:	0800201c 	.word	0x0800201c
 800104c:	0800201c 	.word	0x0800201c
 8001050:	08002020 	.word	0x08002020

08001054 <memset>:
 8001054:	4402      	add	r2, r0
 8001056:	4603      	mov	r3, r0
 8001058:	4293      	cmp	r3, r2
 800105a:	d100      	bne.n	800105e <memset+0xa>
 800105c:	4770      	bx	lr
 800105e:	f803 1b01 	strb.w	r1, [r3], #1
 8001062:	e7f9      	b.n	8001058 <memset+0x4>

08001064 <iprintf>:
 8001064:	b40f      	push	{r0, r1, r2, r3}
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <iprintf+0x2c>)
 8001068:	b513      	push	{r0, r1, r4, lr}
 800106a:	681c      	ldr	r4, [r3, #0]
 800106c:	b124      	cbz	r4, 8001078 <iprintf+0x14>
 800106e:	69a3      	ldr	r3, [r4, #24]
 8001070:	b913      	cbnz	r3, 8001078 <iprintf+0x14>
 8001072:	4620      	mov	r0, r4
 8001074:	f000 fa22 	bl	80014bc <__sinit>
 8001078:	ab05      	add	r3, sp, #20
 800107a:	9a04      	ldr	r2, [sp, #16]
 800107c:	68a1      	ldr	r1, [r4, #8]
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	4620      	mov	r0, r4
 8001082:	f000 fbdb 	bl	800183c <_vfiprintf_r>
 8001086:	b002      	add	sp, #8
 8001088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800108c:	b004      	add	sp, #16
 800108e:	4770      	bx	lr
 8001090:	20000020 	.word	0x20000020

08001094 <_puts_r>:
 8001094:	b570      	push	{r4, r5, r6, lr}
 8001096:	460e      	mov	r6, r1
 8001098:	4605      	mov	r5, r0
 800109a:	b118      	cbz	r0, 80010a4 <_puts_r+0x10>
 800109c:	6983      	ldr	r3, [r0, #24]
 800109e:	b90b      	cbnz	r3, 80010a4 <_puts_r+0x10>
 80010a0:	f000 fa0c 	bl	80014bc <__sinit>
 80010a4:	69ab      	ldr	r3, [r5, #24]
 80010a6:	68ac      	ldr	r4, [r5, #8]
 80010a8:	b913      	cbnz	r3, 80010b0 <_puts_r+0x1c>
 80010aa:	4628      	mov	r0, r5
 80010ac:	f000 fa06 	bl	80014bc <__sinit>
 80010b0:	4b23      	ldr	r3, [pc, #140]	; (8001140 <_puts_r+0xac>)
 80010b2:	429c      	cmp	r4, r3
 80010b4:	d117      	bne.n	80010e6 <_puts_r+0x52>
 80010b6:	686c      	ldr	r4, [r5, #4]
 80010b8:	89a3      	ldrh	r3, [r4, #12]
 80010ba:	071b      	lsls	r3, r3, #28
 80010bc:	d51d      	bpl.n	80010fa <_puts_r+0x66>
 80010be:	6923      	ldr	r3, [r4, #16]
 80010c0:	b1db      	cbz	r3, 80010fa <_puts_r+0x66>
 80010c2:	3e01      	subs	r6, #1
 80010c4:	68a3      	ldr	r3, [r4, #8]
 80010c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80010ca:	3b01      	subs	r3, #1
 80010cc:	60a3      	str	r3, [r4, #8]
 80010ce:	b9e9      	cbnz	r1, 800110c <_puts_r+0x78>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	da2e      	bge.n	8001132 <_puts_r+0x9e>
 80010d4:	4622      	mov	r2, r4
 80010d6:	210a      	movs	r1, #10
 80010d8:	4628      	mov	r0, r5
 80010da:	f000 f83f 	bl	800115c <__swbuf_r>
 80010de:	3001      	adds	r0, #1
 80010e0:	d011      	beq.n	8001106 <_puts_r+0x72>
 80010e2:	200a      	movs	r0, #10
 80010e4:	e011      	b.n	800110a <_puts_r+0x76>
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <_puts_r+0xb0>)
 80010e8:	429c      	cmp	r4, r3
 80010ea:	d101      	bne.n	80010f0 <_puts_r+0x5c>
 80010ec:	68ac      	ldr	r4, [r5, #8]
 80010ee:	e7e3      	b.n	80010b8 <_puts_r+0x24>
 80010f0:	4b15      	ldr	r3, [pc, #84]	; (8001148 <_puts_r+0xb4>)
 80010f2:	429c      	cmp	r4, r3
 80010f4:	bf08      	it	eq
 80010f6:	68ec      	ldreq	r4, [r5, #12]
 80010f8:	e7de      	b.n	80010b8 <_puts_r+0x24>
 80010fa:	4621      	mov	r1, r4
 80010fc:	4628      	mov	r0, r5
 80010fe:	f000 f87f 	bl	8001200 <__swsetup_r>
 8001102:	2800      	cmp	r0, #0
 8001104:	d0dd      	beq.n	80010c2 <_puts_r+0x2e>
 8001106:	f04f 30ff 	mov.w	r0, #4294967295
 800110a:	bd70      	pop	{r4, r5, r6, pc}
 800110c:	2b00      	cmp	r3, #0
 800110e:	da04      	bge.n	800111a <_puts_r+0x86>
 8001110:	69a2      	ldr	r2, [r4, #24]
 8001112:	429a      	cmp	r2, r3
 8001114:	dc06      	bgt.n	8001124 <_puts_r+0x90>
 8001116:	290a      	cmp	r1, #10
 8001118:	d004      	beq.n	8001124 <_puts_r+0x90>
 800111a:	6823      	ldr	r3, [r4, #0]
 800111c:	1c5a      	adds	r2, r3, #1
 800111e:	6022      	str	r2, [r4, #0]
 8001120:	7019      	strb	r1, [r3, #0]
 8001122:	e7cf      	b.n	80010c4 <_puts_r+0x30>
 8001124:	4622      	mov	r2, r4
 8001126:	4628      	mov	r0, r5
 8001128:	f000 f818 	bl	800115c <__swbuf_r>
 800112c:	3001      	adds	r0, #1
 800112e:	d1c9      	bne.n	80010c4 <_puts_r+0x30>
 8001130:	e7e9      	b.n	8001106 <_puts_r+0x72>
 8001132:	6823      	ldr	r3, [r4, #0]
 8001134:	200a      	movs	r0, #10
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	6022      	str	r2, [r4, #0]
 800113a:	7018      	strb	r0, [r3, #0]
 800113c:	e7e5      	b.n	800110a <_puts_r+0x76>
 800113e:	bf00      	nop
 8001140:	08001fa8 	.word	0x08001fa8
 8001144:	08001fc8 	.word	0x08001fc8
 8001148:	08001f88 	.word	0x08001f88

0800114c <puts>:
 800114c:	4b02      	ldr	r3, [pc, #8]	; (8001158 <puts+0xc>)
 800114e:	4601      	mov	r1, r0
 8001150:	6818      	ldr	r0, [r3, #0]
 8001152:	f7ff bf9f 	b.w	8001094 <_puts_r>
 8001156:	bf00      	nop
 8001158:	20000020 	.word	0x20000020

0800115c <__swbuf_r>:
 800115c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800115e:	460e      	mov	r6, r1
 8001160:	4614      	mov	r4, r2
 8001162:	4605      	mov	r5, r0
 8001164:	b118      	cbz	r0, 800116e <__swbuf_r+0x12>
 8001166:	6983      	ldr	r3, [r0, #24]
 8001168:	b90b      	cbnz	r3, 800116e <__swbuf_r+0x12>
 800116a:	f000 f9a7 	bl	80014bc <__sinit>
 800116e:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <__swbuf_r+0x98>)
 8001170:	429c      	cmp	r4, r3
 8001172:	d12a      	bne.n	80011ca <__swbuf_r+0x6e>
 8001174:	686c      	ldr	r4, [r5, #4]
 8001176:	69a3      	ldr	r3, [r4, #24]
 8001178:	60a3      	str	r3, [r4, #8]
 800117a:	89a3      	ldrh	r3, [r4, #12]
 800117c:	071a      	lsls	r2, r3, #28
 800117e:	d52e      	bpl.n	80011de <__swbuf_r+0x82>
 8001180:	6923      	ldr	r3, [r4, #16]
 8001182:	b363      	cbz	r3, 80011de <__swbuf_r+0x82>
 8001184:	6923      	ldr	r3, [r4, #16]
 8001186:	6820      	ldr	r0, [r4, #0]
 8001188:	1ac0      	subs	r0, r0, r3
 800118a:	6963      	ldr	r3, [r4, #20]
 800118c:	b2f6      	uxtb	r6, r6
 800118e:	4283      	cmp	r3, r0
 8001190:	4637      	mov	r7, r6
 8001192:	dc04      	bgt.n	800119e <__swbuf_r+0x42>
 8001194:	4621      	mov	r1, r4
 8001196:	4628      	mov	r0, r5
 8001198:	f000 f926 	bl	80013e8 <_fflush_r>
 800119c:	bb28      	cbnz	r0, 80011ea <__swbuf_r+0x8e>
 800119e:	68a3      	ldr	r3, [r4, #8]
 80011a0:	3b01      	subs	r3, #1
 80011a2:	60a3      	str	r3, [r4, #8]
 80011a4:	6823      	ldr	r3, [r4, #0]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	6022      	str	r2, [r4, #0]
 80011aa:	701e      	strb	r6, [r3, #0]
 80011ac:	6963      	ldr	r3, [r4, #20]
 80011ae:	3001      	adds	r0, #1
 80011b0:	4283      	cmp	r3, r0
 80011b2:	d004      	beq.n	80011be <__swbuf_r+0x62>
 80011b4:	89a3      	ldrh	r3, [r4, #12]
 80011b6:	07db      	lsls	r3, r3, #31
 80011b8:	d519      	bpl.n	80011ee <__swbuf_r+0x92>
 80011ba:	2e0a      	cmp	r6, #10
 80011bc:	d117      	bne.n	80011ee <__swbuf_r+0x92>
 80011be:	4621      	mov	r1, r4
 80011c0:	4628      	mov	r0, r5
 80011c2:	f000 f911 	bl	80013e8 <_fflush_r>
 80011c6:	b190      	cbz	r0, 80011ee <__swbuf_r+0x92>
 80011c8:	e00f      	b.n	80011ea <__swbuf_r+0x8e>
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <__swbuf_r+0x9c>)
 80011cc:	429c      	cmp	r4, r3
 80011ce:	d101      	bne.n	80011d4 <__swbuf_r+0x78>
 80011d0:	68ac      	ldr	r4, [r5, #8]
 80011d2:	e7d0      	b.n	8001176 <__swbuf_r+0x1a>
 80011d4:	4b09      	ldr	r3, [pc, #36]	; (80011fc <__swbuf_r+0xa0>)
 80011d6:	429c      	cmp	r4, r3
 80011d8:	bf08      	it	eq
 80011da:	68ec      	ldreq	r4, [r5, #12]
 80011dc:	e7cb      	b.n	8001176 <__swbuf_r+0x1a>
 80011de:	4621      	mov	r1, r4
 80011e0:	4628      	mov	r0, r5
 80011e2:	f000 f80d 	bl	8001200 <__swsetup_r>
 80011e6:	2800      	cmp	r0, #0
 80011e8:	d0cc      	beq.n	8001184 <__swbuf_r+0x28>
 80011ea:	f04f 37ff 	mov.w	r7, #4294967295
 80011ee:	4638      	mov	r0, r7
 80011f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011f2:	bf00      	nop
 80011f4:	08001fa8 	.word	0x08001fa8
 80011f8:	08001fc8 	.word	0x08001fc8
 80011fc:	08001f88 	.word	0x08001f88

08001200 <__swsetup_r>:
 8001200:	4b32      	ldr	r3, [pc, #200]	; (80012cc <__swsetup_r+0xcc>)
 8001202:	b570      	push	{r4, r5, r6, lr}
 8001204:	681d      	ldr	r5, [r3, #0]
 8001206:	4606      	mov	r6, r0
 8001208:	460c      	mov	r4, r1
 800120a:	b125      	cbz	r5, 8001216 <__swsetup_r+0x16>
 800120c:	69ab      	ldr	r3, [r5, #24]
 800120e:	b913      	cbnz	r3, 8001216 <__swsetup_r+0x16>
 8001210:	4628      	mov	r0, r5
 8001212:	f000 f953 	bl	80014bc <__sinit>
 8001216:	4b2e      	ldr	r3, [pc, #184]	; (80012d0 <__swsetup_r+0xd0>)
 8001218:	429c      	cmp	r4, r3
 800121a:	d10f      	bne.n	800123c <__swsetup_r+0x3c>
 800121c:	686c      	ldr	r4, [r5, #4]
 800121e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001222:	b29a      	uxth	r2, r3
 8001224:	0715      	lsls	r5, r2, #28
 8001226:	d42c      	bmi.n	8001282 <__swsetup_r+0x82>
 8001228:	06d0      	lsls	r0, r2, #27
 800122a:	d411      	bmi.n	8001250 <__swsetup_r+0x50>
 800122c:	2209      	movs	r2, #9
 800122e:	6032      	str	r2, [r6, #0]
 8001230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001234:	81a3      	strh	r3, [r4, #12]
 8001236:	f04f 30ff 	mov.w	r0, #4294967295
 800123a:	e03e      	b.n	80012ba <__swsetup_r+0xba>
 800123c:	4b25      	ldr	r3, [pc, #148]	; (80012d4 <__swsetup_r+0xd4>)
 800123e:	429c      	cmp	r4, r3
 8001240:	d101      	bne.n	8001246 <__swsetup_r+0x46>
 8001242:	68ac      	ldr	r4, [r5, #8]
 8001244:	e7eb      	b.n	800121e <__swsetup_r+0x1e>
 8001246:	4b24      	ldr	r3, [pc, #144]	; (80012d8 <__swsetup_r+0xd8>)
 8001248:	429c      	cmp	r4, r3
 800124a:	bf08      	it	eq
 800124c:	68ec      	ldreq	r4, [r5, #12]
 800124e:	e7e6      	b.n	800121e <__swsetup_r+0x1e>
 8001250:	0751      	lsls	r1, r2, #29
 8001252:	d512      	bpl.n	800127a <__swsetup_r+0x7a>
 8001254:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001256:	b141      	cbz	r1, 800126a <__swsetup_r+0x6a>
 8001258:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800125c:	4299      	cmp	r1, r3
 800125e:	d002      	beq.n	8001266 <__swsetup_r+0x66>
 8001260:	4630      	mov	r0, r6
 8001262:	f000 fa19 	bl	8001698 <_free_r>
 8001266:	2300      	movs	r3, #0
 8001268:	6363      	str	r3, [r4, #52]	; 0x34
 800126a:	89a3      	ldrh	r3, [r4, #12]
 800126c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001270:	81a3      	strh	r3, [r4, #12]
 8001272:	2300      	movs	r3, #0
 8001274:	6063      	str	r3, [r4, #4]
 8001276:	6923      	ldr	r3, [r4, #16]
 8001278:	6023      	str	r3, [r4, #0]
 800127a:	89a3      	ldrh	r3, [r4, #12]
 800127c:	f043 0308 	orr.w	r3, r3, #8
 8001280:	81a3      	strh	r3, [r4, #12]
 8001282:	6923      	ldr	r3, [r4, #16]
 8001284:	b94b      	cbnz	r3, 800129a <__swsetup_r+0x9a>
 8001286:	89a3      	ldrh	r3, [r4, #12]
 8001288:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800128c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001290:	d003      	beq.n	800129a <__swsetup_r+0x9a>
 8001292:	4621      	mov	r1, r4
 8001294:	4630      	mov	r0, r6
 8001296:	f000 f9bf 	bl	8001618 <__smakebuf_r>
 800129a:	89a2      	ldrh	r2, [r4, #12]
 800129c:	f012 0301 	ands.w	r3, r2, #1
 80012a0:	d00c      	beq.n	80012bc <__swsetup_r+0xbc>
 80012a2:	2300      	movs	r3, #0
 80012a4:	60a3      	str	r3, [r4, #8]
 80012a6:	6963      	ldr	r3, [r4, #20]
 80012a8:	425b      	negs	r3, r3
 80012aa:	61a3      	str	r3, [r4, #24]
 80012ac:	6923      	ldr	r3, [r4, #16]
 80012ae:	b953      	cbnz	r3, 80012c6 <__swsetup_r+0xc6>
 80012b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012b4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80012b8:	d1ba      	bne.n	8001230 <__swsetup_r+0x30>
 80012ba:	bd70      	pop	{r4, r5, r6, pc}
 80012bc:	0792      	lsls	r2, r2, #30
 80012be:	bf58      	it	pl
 80012c0:	6963      	ldrpl	r3, [r4, #20]
 80012c2:	60a3      	str	r3, [r4, #8]
 80012c4:	e7f2      	b.n	80012ac <__swsetup_r+0xac>
 80012c6:	2000      	movs	r0, #0
 80012c8:	e7f7      	b.n	80012ba <__swsetup_r+0xba>
 80012ca:	bf00      	nop
 80012cc:	20000020 	.word	0x20000020
 80012d0:	08001fa8 	.word	0x08001fa8
 80012d4:	08001fc8 	.word	0x08001fc8
 80012d8:	08001f88 	.word	0x08001f88

080012dc <__sflush_r>:
 80012dc:	898a      	ldrh	r2, [r1, #12]
 80012de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012e2:	4605      	mov	r5, r0
 80012e4:	0710      	lsls	r0, r2, #28
 80012e6:	460c      	mov	r4, r1
 80012e8:	d458      	bmi.n	800139c <__sflush_r+0xc0>
 80012ea:	684b      	ldr	r3, [r1, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	dc05      	bgt.n	80012fc <__sflush_r+0x20>
 80012f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	dc02      	bgt.n	80012fc <__sflush_r+0x20>
 80012f6:	2000      	movs	r0, #0
 80012f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012fe:	2e00      	cmp	r6, #0
 8001300:	d0f9      	beq.n	80012f6 <__sflush_r+0x1a>
 8001302:	2300      	movs	r3, #0
 8001304:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001308:	682f      	ldr	r7, [r5, #0]
 800130a:	6a21      	ldr	r1, [r4, #32]
 800130c:	602b      	str	r3, [r5, #0]
 800130e:	d032      	beq.n	8001376 <__sflush_r+0x9a>
 8001310:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001312:	89a3      	ldrh	r3, [r4, #12]
 8001314:	075a      	lsls	r2, r3, #29
 8001316:	d505      	bpl.n	8001324 <__sflush_r+0x48>
 8001318:	6863      	ldr	r3, [r4, #4]
 800131a:	1ac0      	subs	r0, r0, r3
 800131c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800131e:	b10b      	cbz	r3, 8001324 <__sflush_r+0x48>
 8001320:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001322:	1ac0      	subs	r0, r0, r3
 8001324:	2300      	movs	r3, #0
 8001326:	4602      	mov	r2, r0
 8001328:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800132a:	6a21      	ldr	r1, [r4, #32]
 800132c:	4628      	mov	r0, r5
 800132e:	47b0      	blx	r6
 8001330:	1c43      	adds	r3, r0, #1
 8001332:	89a3      	ldrh	r3, [r4, #12]
 8001334:	d106      	bne.n	8001344 <__sflush_r+0x68>
 8001336:	6829      	ldr	r1, [r5, #0]
 8001338:	291d      	cmp	r1, #29
 800133a:	d848      	bhi.n	80013ce <__sflush_r+0xf2>
 800133c:	4a29      	ldr	r2, [pc, #164]	; (80013e4 <__sflush_r+0x108>)
 800133e:	40ca      	lsrs	r2, r1
 8001340:	07d6      	lsls	r6, r2, #31
 8001342:	d544      	bpl.n	80013ce <__sflush_r+0xf2>
 8001344:	2200      	movs	r2, #0
 8001346:	6062      	str	r2, [r4, #4]
 8001348:	04d9      	lsls	r1, r3, #19
 800134a:	6922      	ldr	r2, [r4, #16]
 800134c:	6022      	str	r2, [r4, #0]
 800134e:	d504      	bpl.n	800135a <__sflush_r+0x7e>
 8001350:	1c42      	adds	r2, r0, #1
 8001352:	d101      	bne.n	8001358 <__sflush_r+0x7c>
 8001354:	682b      	ldr	r3, [r5, #0]
 8001356:	b903      	cbnz	r3, 800135a <__sflush_r+0x7e>
 8001358:	6560      	str	r0, [r4, #84]	; 0x54
 800135a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800135c:	602f      	str	r7, [r5, #0]
 800135e:	2900      	cmp	r1, #0
 8001360:	d0c9      	beq.n	80012f6 <__sflush_r+0x1a>
 8001362:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001366:	4299      	cmp	r1, r3
 8001368:	d002      	beq.n	8001370 <__sflush_r+0x94>
 800136a:	4628      	mov	r0, r5
 800136c:	f000 f994 	bl	8001698 <_free_r>
 8001370:	2000      	movs	r0, #0
 8001372:	6360      	str	r0, [r4, #52]	; 0x34
 8001374:	e7c0      	b.n	80012f8 <__sflush_r+0x1c>
 8001376:	2301      	movs	r3, #1
 8001378:	4628      	mov	r0, r5
 800137a:	47b0      	blx	r6
 800137c:	1c41      	adds	r1, r0, #1
 800137e:	d1c8      	bne.n	8001312 <__sflush_r+0x36>
 8001380:	682b      	ldr	r3, [r5, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d0c5      	beq.n	8001312 <__sflush_r+0x36>
 8001386:	2b1d      	cmp	r3, #29
 8001388:	d001      	beq.n	800138e <__sflush_r+0xb2>
 800138a:	2b16      	cmp	r3, #22
 800138c:	d101      	bne.n	8001392 <__sflush_r+0xb6>
 800138e:	602f      	str	r7, [r5, #0]
 8001390:	e7b1      	b.n	80012f6 <__sflush_r+0x1a>
 8001392:	89a3      	ldrh	r3, [r4, #12]
 8001394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001398:	81a3      	strh	r3, [r4, #12]
 800139a:	e7ad      	b.n	80012f8 <__sflush_r+0x1c>
 800139c:	690f      	ldr	r7, [r1, #16]
 800139e:	2f00      	cmp	r7, #0
 80013a0:	d0a9      	beq.n	80012f6 <__sflush_r+0x1a>
 80013a2:	0793      	lsls	r3, r2, #30
 80013a4:	680e      	ldr	r6, [r1, #0]
 80013a6:	bf08      	it	eq
 80013a8:	694b      	ldreq	r3, [r1, #20]
 80013aa:	600f      	str	r7, [r1, #0]
 80013ac:	bf18      	it	ne
 80013ae:	2300      	movne	r3, #0
 80013b0:	eba6 0807 	sub.w	r8, r6, r7
 80013b4:	608b      	str	r3, [r1, #8]
 80013b6:	f1b8 0f00 	cmp.w	r8, #0
 80013ba:	dd9c      	ble.n	80012f6 <__sflush_r+0x1a>
 80013bc:	4643      	mov	r3, r8
 80013be:	463a      	mov	r2, r7
 80013c0:	6a21      	ldr	r1, [r4, #32]
 80013c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80013c4:	4628      	mov	r0, r5
 80013c6:	47b0      	blx	r6
 80013c8:	2800      	cmp	r0, #0
 80013ca:	dc06      	bgt.n	80013da <__sflush_r+0xfe>
 80013cc:	89a3      	ldrh	r3, [r4, #12]
 80013ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013d2:	81a3      	strh	r3, [r4, #12]
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295
 80013d8:	e78e      	b.n	80012f8 <__sflush_r+0x1c>
 80013da:	4407      	add	r7, r0
 80013dc:	eba8 0800 	sub.w	r8, r8, r0
 80013e0:	e7e9      	b.n	80013b6 <__sflush_r+0xda>
 80013e2:	bf00      	nop
 80013e4:	20400001 	.word	0x20400001

080013e8 <_fflush_r>:
 80013e8:	b538      	push	{r3, r4, r5, lr}
 80013ea:	690b      	ldr	r3, [r1, #16]
 80013ec:	4605      	mov	r5, r0
 80013ee:	460c      	mov	r4, r1
 80013f0:	b1db      	cbz	r3, 800142a <_fflush_r+0x42>
 80013f2:	b118      	cbz	r0, 80013fc <_fflush_r+0x14>
 80013f4:	6983      	ldr	r3, [r0, #24]
 80013f6:	b90b      	cbnz	r3, 80013fc <_fflush_r+0x14>
 80013f8:	f000 f860 	bl	80014bc <__sinit>
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <_fflush_r+0x48>)
 80013fe:	429c      	cmp	r4, r3
 8001400:	d109      	bne.n	8001416 <_fflush_r+0x2e>
 8001402:	686c      	ldr	r4, [r5, #4]
 8001404:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001408:	b17b      	cbz	r3, 800142a <_fflush_r+0x42>
 800140a:	4621      	mov	r1, r4
 800140c:	4628      	mov	r0, r5
 800140e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001412:	f7ff bf63 	b.w	80012dc <__sflush_r>
 8001416:	4b07      	ldr	r3, [pc, #28]	; (8001434 <_fflush_r+0x4c>)
 8001418:	429c      	cmp	r4, r3
 800141a:	d101      	bne.n	8001420 <_fflush_r+0x38>
 800141c:	68ac      	ldr	r4, [r5, #8]
 800141e:	e7f1      	b.n	8001404 <_fflush_r+0x1c>
 8001420:	4b05      	ldr	r3, [pc, #20]	; (8001438 <_fflush_r+0x50>)
 8001422:	429c      	cmp	r4, r3
 8001424:	bf08      	it	eq
 8001426:	68ec      	ldreq	r4, [r5, #12]
 8001428:	e7ec      	b.n	8001404 <_fflush_r+0x1c>
 800142a:	2000      	movs	r0, #0
 800142c:	bd38      	pop	{r3, r4, r5, pc}
 800142e:	bf00      	nop
 8001430:	08001fa8 	.word	0x08001fa8
 8001434:	08001fc8 	.word	0x08001fc8
 8001438:	08001f88 	.word	0x08001f88

0800143c <std>:
 800143c:	2300      	movs	r3, #0
 800143e:	b510      	push	{r4, lr}
 8001440:	4604      	mov	r4, r0
 8001442:	e9c0 3300 	strd	r3, r3, [r0]
 8001446:	6083      	str	r3, [r0, #8]
 8001448:	8181      	strh	r1, [r0, #12]
 800144a:	6643      	str	r3, [r0, #100]	; 0x64
 800144c:	81c2      	strh	r2, [r0, #14]
 800144e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001452:	6183      	str	r3, [r0, #24]
 8001454:	4619      	mov	r1, r3
 8001456:	2208      	movs	r2, #8
 8001458:	305c      	adds	r0, #92	; 0x5c
 800145a:	f7ff fdfb 	bl	8001054 <memset>
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <std+0x38>)
 8001460:	6263      	str	r3, [r4, #36]	; 0x24
 8001462:	4b05      	ldr	r3, [pc, #20]	; (8001478 <std+0x3c>)
 8001464:	62a3      	str	r3, [r4, #40]	; 0x28
 8001466:	4b05      	ldr	r3, [pc, #20]	; (800147c <std+0x40>)
 8001468:	62e3      	str	r3, [r4, #44]	; 0x2c
 800146a:	4b05      	ldr	r3, [pc, #20]	; (8001480 <std+0x44>)
 800146c:	6224      	str	r4, [r4, #32]
 800146e:	6323      	str	r3, [r4, #48]	; 0x30
 8001470:	bd10      	pop	{r4, pc}
 8001472:	bf00      	nop
 8001474:	08001d99 	.word	0x08001d99
 8001478:	08001dbb 	.word	0x08001dbb
 800147c:	08001df3 	.word	0x08001df3
 8001480:	08001e17 	.word	0x08001e17

08001484 <_cleanup_r>:
 8001484:	4901      	ldr	r1, [pc, #4]	; (800148c <_cleanup_r+0x8>)
 8001486:	f000 b885 	b.w	8001594 <_fwalk_reent>
 800148a:	bf00      	nop
 800148c:	080013e9 	.word	0x080013e9

08001490 <__sfmoreglue>:
 8001490:	b570      	push	{r4, r5, r6, lr}
 8001492:	1e4a      	subs	r2, r1, #1
 8001494:	2568      	movs	r5, #104	; 0x68
 8001496:	4355      	muls	r5, r2
 8001498:	460e      	mov	r6, r1
 800149a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800149e:	f000 f949 	bl	8001734 <_malloc_r>
 80014a2:	4604      	mov	r4, r0
 80014a4:	b140      	cbz	r0, 80014b8 <__sfmoreglue+0x28>
 80014a6:	2100      	movs	r1, #0
 80014a8:	e9c0 1600 	strd	r1, r6, [r0]
 80014ac:	300c      	adds	r0, #12
 80014ae:	60a0      	str	r0, [r4, #8]
 80014b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80014b4:	f7ff fdce 	bl	8001054 <memset>
 80014b8:	4620      	mov	r0, r4
 80014ba:	bd70      	pop	{r4, r5, r6, pc}

080014bc <__sinit>:
 80014bc:	6983      	ldr	r3, [r0, #24]
 80014be:	b510      	push	{r4, lr}
 80014c0:	4604      	mov	r4, r0
 80014c2:	bb33      	cbnz	r3, 8001512 <__sinit+0x56>
 80014c4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80014c8:	6503      	str	r3, [r0, #80]	; 0x50
 80014ca:	4b12      	ldr	r3, [pc, #72]	; (8001514 <__sinit+0x58>)
 80014cc:	4a12      	ldr	r2, [pc, #72]	; (8001518 <__sinit+0x5c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	6282      	str	r2, [r0, #40]	; 0x28
 80014d2:	4298      	cmp	r0, r3
 80014d4:	bf04      	itt	eq
 80014d6:	2301      	moveq	r3, #1
 80014d8:	6183      	streq	r3, [r0, #24]
 80014da:	f000 f81f 	bl	800151c <__sfp>
 80014de:	6060      	str	r0, [r4, #4]
 80014e0:	4620      	mov	r0, r4
 80014e2:	f000 f81b 	bl	800151c <__sfp>
 80014e6:	60a0      	str	r0, [r4, #8]
 80014e8:	4620      	mov	r0, r4
 80014ea:	f000 f817 	bl	800151c <__sfp>
 80014ee:	2200      	movs	r2, #0
 80014f0:	60e0      	str	r0, [r4, #12]
 80014f2:	2104      	movs	r1, #4
 80014f4:	6860      	ldr	r0, [r4, #4]
 80014f6:	f7ff ffa1 	bl	800143c <std>
 80014fa:	2201      	movs	r2, #1
 80014fc:	2109      	movs	r1, #9
 80014fe:	68a0      	ldr	r0, [r4, #8]
 8001500:	f7ff ff9c 	bl	800143c <std>
 8001504:	2202      	movs	r2, #2
 8001506:	2112      	movs	r1, #18
 8001508:	68e0      	ldr	r0, [r4, #12]
 800150a:	f7ff ff97 	bl	800143c <std>
 800150e:	2301      	movs	r3, #1
 8001510:	61a3      	str	r3, [r4, #24]
 8001512:	bd10      	pop	{r4, pc}
 8001514:	08001f84 	.word	0x08001f84
 8001518:	08001485 	.word	0x08001485

0800151c <__sfp>:
 800151c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800151e:	4b1b      	ldr	r3, [pc, #108]	; (800158c <__sfp+0x70>)
 8001520:	681e      	ldr	r6, [r3, #0]
 8001522:	69b3      	ldr	r3, [r6, #24]
 8001524:	4607      	mov	r7, r0
 8001526:	b913      	cbnz	r3, 800152e <__sfp+0x12>
 8001528:	4630      	mov	r0, r6
 800152a:	f7ff ffc7 	bl	80014bc <__sinit>
 800152e:	3648      	adds	r6, #72	; 0x48
 8001530:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001534:	3b01      	subs	r3, #1
 8001536:	d503      	bpl.n	8001540 <__sfp+0x24>
 8001538:	6833      	ldr	r3, [r6, #0]
 800153a:	b133      	cbz	r3, 800154a <__sfp+0x2e>
 800153c:	6836      	ldr	r6, [r6, #0]
 800153e:	e7f7      	b.n	8001530 <__sfp+0x14>
 8001540:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001544:	b16d      	cbz	r5, 8001562 <__sfp+0x46>
 8001546:	3468      	adds	r4, #104	; 0x68
 8001548:	e7f4      	b.n	8001534 <__sfp+0x18>
 800154a:	2104      	movs	r1, #4
 800154c:	4638      	mov	r0, r7
 800154e:	f7ff ff9f 	bl	8001490 <__sfmoreglue>
 8001552:	6030      	str	r0, [r6, #0]
 8001554:	2800      	cmp	r0, #0
 8001556:	d1f1      	bne.n	800153c <__sfp+0x20>
 8001558:	230c      	movs	r3, #12
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	4604      	mov	r4, r0
 800155e:	4620      	mov	r0, r4
 8001560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <__sfp+0x74>)
 8001564:	6665      	str	r5, [r4, #100]	; 0x64
 8001566:	e9c4 5500 	strd	r5, r5, [r4]
 800156a:	60a5      	str	r5, [r4, #8]
 800156c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001570:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001574:	2208      	movs	r2, #8
 8001576:	4629      	mov	r1, r5
 8001578:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800157c:	f7ff fd6a 	bl	8001054 <memset>
 8001580:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001584:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001588:	e7e9      	b.n	800155e <__sfp+0x42>
 800158a:	bf00      	nop
 800158c:	08001f84 	.word	0x08001f84
 8001590:	ffff0001 	.word	0xffff0001

08001594 <_fwalk_reent>:
 8001594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001598:	4680      	mov	r8, r0
 800159a:	4689      	mov	r9, r1
 800159c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80015a0:	2600      	movs	r6, #0
 80015a2:	b914      	cbnz	r4, 80015aa <_fwalk_reent+0x16>
 80015a4:	4630      	mov	r0, r6
 80015a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80015aa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80015ae:	3f01      	subs	r7, #1
 80015b0:	d501      	bpl.n	80015b6 <_fwalk_reent+0x22>
 80015b2:	6824      	ldr	r4, [r4, #0]
 80015b4:	e7f5      	b.n	80015a2 <_fwalk_reent+0xe>
 80015b6:	89ab      	ldrh	r3, [r5, #12]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d907      	bls.n	80015cc <_fwalk_reent+0x38>
 80015bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80015c0:	3301      	adds	r3, #1
 80015c2:	d003      	beq.n	80015cc <_fwalk_reent+0x38>
 80015c4:	4629      	mov	r1, r5
 80015c6:	4640      	mov	r0, r8
 80015c8:	47c8      	blx	r9
 80015ca:	4306      	orrs	r6, r0
 80015cc:	3568      	adds	r5, #104	; 0x68
 80015ce:	e7ee      	b.n	80015ae <_fwalk_reent+0x1a>

080015d0 <__swhatbuf_r>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	460e      	mov	r6, r1
 80015d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015d8:	2900      	cmp	r1, #0
 80015da:	b096      	sub	sp, #88	; 0x58
 80015dc:	4614      	mov	r4, r2
 80015de:	461d      	mov	r5, r3
 80015e0:	da07      	bge.n	80015f2 <__swhatbuf_r+0x22>
 80015e2:	2300      	movs	r3, #0
 80015e4:	602b      	str	r3, [r5, #0]
 80015e6:	89b3      	ldrh	r3, [r6, #12]
 80015e8:	061a      	lsls	r2, r3, #24
 80015ea:	d410      	bmi.n	800160e <__swhatbuf_r+0x3e>
 80015ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015f0:	e00e      	b.n	8001610 <__swhatbuf_r+0x40>
 80015f2:	466a      	mov	r2, sp
 80015f4:	f000 fc36 	bl	8001e64 <_fstat_r>
 80015f8:	2800      	cmp	r0, #0
 80015fa:	dbf2      	blt.n	80015e2 <__swhatbuf_r+0x12>
 80015fc:	9a01      	ldr	r2, [sp, #4]
 80015fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001602:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001606:	425a      	negs	r2, r3
 8001608:	415a      	adcs	r2, r3
 800160a:	602a      	str	r2, [r5, #0]
 800160c:	e7ee      	b.n	80015ec <__swhatbuf_r+0x1c>
 800160e:	2340      	movs	r3, #64	; 0x40
 8001610:	2000      	movs	r0, #0
 8001612:	6023      	str	r3, [r4, #0]
 8001614:	b016      	add	sp, #88	; 0x58
 8001616:	bd70      	pop	{r4, r5, r6, pc}

08001618 <__smakebuf_r>:
 8001618:	898b      	ldrh	r3, [r1, #12]
 800161a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800161c:	079d      	lsls	r5, r3, #30
 800161e:	4606      	mov	r6, r0
 8001620:	460c      	mov	r4, r1
 8001622:	d507      	bpl.n	8001634 <__smakebuf_r+0x1c>
 8001624:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001628:	6023      	str	r3, [r4, #0]
 800162a:	6123      	str	r3, [r4, #16]
 800162c:	2301      	movs	r3, #1
 800162e:	6163      	str	r3, [r4, #20]
 8001630:	b002      	add	sp, #8
 8001632:	bd70      	pop	{r4, r5, r6, pc}
 8001634:	ab01      	add	r3, sp, #4
 8001636:	466a      	mov	r2, sp
 8001638:	f7ff ffca 	bl	80015d0 <__swhatbuf_r>
 800163c:	9900      	ldr	r1, [sp, #0]
 800163e:	4605      	mov	r5, r0
 8001640:	4630      	mov	r0, r6
 8001642:	f000 f877 	bl	8001734 <_malloc_r>
 8001646:	b948      	cbnz	r0, 800165c <__smakebuf_r+0x44>
 8001648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800164c:	059a      	lsls	r2, r3, #22
 800164e:	d4ef      	bmi.n	8001630 <__smakebuf_r+0x18>
 8001650:	f023 0303 	bic.w	r3, r3, #3
 8001654:	f043 0302 	orr.w	r3, r3, #2
 8001658:	81a3      	strh	r3, [r4, #12]
 800165a:	e7e3      	b.n	8001624 <__smakebuf_r+0xc>
 800165c:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <__smakebuf_r+0x7c>)
 800165e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001660:	89a3      	ldrh	r3, [r4, #12]
 8001662:	6020      	str	r0, [r4, #0]
 8001664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001668:	81a3      	strh	r3, [r4, #12]
 800166a:	9b00      	ldr	r3, [sp, #0]
 800166c:	6163      	str	r3, [r4, #20]
 800166e:	9b01      	ldr	r3, [sp, #4]
 8001670:	6120      	str	r0, [r4, #16]
 8001672:	b15b      	cbz	r3, 800168c <__smakebuf_r+0x74>
 8001674:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001678:	4630      	mov	r0, r6
 800167a:	f000 fc05 	bl	8001e88 <_isatty_r>
 800167e:	b128      	cbz	r0, 800168c <__smakebuf_r+0x74>
 8001680:	89a3      	ldrh	r3, [r4, #12]
 8001682:	f023 0303 	bic.w	r3, r3, #3
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	81a3      	strh	r3, [r4, #12]
 800168c:	89a3      	ldrh	r3, [r4, #12]
 800168e:	431d      	orrs	r5, r3
 8001690:	81a5      	strh	r5, [r4, #12]
 8001692:	e7cd      	b.n	8001630 <__smakebuf_r+0x18>
 8001694:	08001485 	.word	0x08001485

08001698 <_free_r>:
 8001698:	b538      	push	{r3, r4, r5, lr}
 800169a:	4605      	mov	r5, r0
 800169c:	2900      	cmp	r1, #0
 800169e:	d045      	beq.n	800172c <_free_r+0x94>
 80016a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016a4:	1f0c      	subs	r4, r1, #4
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	bfb8      	it	lt
 80016aa:	18e4      	addlt	r4, r4, r3
 80016ac:	f000 fc0e 	bl	8001ecc <__malloc_lock>
 80016b0:	4a1f      	ldr	r2, [pc, #124]	; (8001730 <_free_r+0x98>)
 80016b2:	6813      	ldr	r3, [r2, #0]
 80016b4:	4610      	mov	r0, r2
 80016b6:	b933      	cbnz	r3, 80016c6 <_free_r+0x2e>
 80016b8:	6063      	str	r3, [r4, #4]
 80016ba:	6014      	str	r4, [r2, #0]
 80016bc:	4628      	mov	r0, r5
 80016be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016c2:	f000 bc04 	b.w	8001ece <__malloc_unlock>
 80016c6:	42a3      	cmp	r3, r4
 80016c8:	d90c      	bls.n	80016e4 <_free_r+0x4c>
 80016ca:	6821      	ldr	r1, [r4, #0]
 80016cc:	1862      	adds	r2, r4, r1
 80016ce:	4293      	cmp	r3, r2
 80016d0:	bf04      	itt	eq
 80016d2:	681a      	ldreq	r2, [r3, #0]
 80016d4:	685b      	ldreq	r3, [r3, #4]
 80016d6:	6063      	str	r3, [r4, #4]
 80016d8:	bf04      	itt	eq
 80016da:	1852      	addeq	r2, r2, r1
 80016dc:	6022      	streq	r2, [r4, #0]
 80016de:	6004      	str	r4, [r0, #0]
 80016e0:	e7ec      	b.n	80016bc <_free_r+0x24>
 80016e2:	4613      	mov	r3, r2
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	b10a      	cbz	r2, 80016ec <_free_r+0x54>
 80016e8:	42a2      	cmp	r2, r4
 80016ea:	d9fa      	bls.n	80016e2 <_free_r+0x4a>
 80016ec:	6819      	ldr	r1, [r3, #0]
 80016ee:	1858      	adds	r0, r3, r1
 80016f0:	42a0      	cmp	r0, r4
 80016f2:	d10b      	bne.n	800170c <_free_r+0x74>
 80016f4:	6820      	ldr	r0, [r4, #0]
 80016f6:	4401      	add	r1, r0
 80016f8:	1858      	adds	r0, r3, r1
 80016fa:	4282      	cmp	r2, r0
 80016fc:	6019      	str	r1, [r3, #0]
 80016fe:	d1dd      	bne.n	80016bc <_free_r+0x24>
 8001700:	6810      	ldr	r0, [r2, #0]
 8001702:	6852      	ldr	r2, [r2, #4]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	4401      	add	r1, r0
 8001708:	6019      	str	r1, [r3, #0]
 800170a:	e7d7      	b.n	80016bc <_free_r+0x24>
 800170c:	d902      	bls.n	8001714 <_free_r+0x7c>
 800170e:	230c      	movs	r3, #12
 8001710:	602b      	str	r3, [r5, #0]
 8001712:	e7d3      	b.n	80016bc <_free_r+0x24>
 8001714:	6820      	ldr	r0, [r4, #0]
 8001716:	1821      	adds	r1, r4, r0
 8001718:	428a      	cmp	r2, r1
 800171a:	bf04      	itt	eq
 800171c:	6811      	ldreq	r1, [r2, #0]
 800171e:	6852      	ldreq	r2, [r2, #4]
 8001720:	6062      	str	r2, [r4, #4]
 8001722:	bf04      	itt	eq
 8001724:	1809      	addeq	r1, r1, r0
 8001726:	6021      	streq	r1, [r4, #0]
 8001728:	605c      	str	r4, [r3, #4]
 800172a:	e7c7      	b.n	80016bc <_free_r+0x24>
 800172c:	bd38      	pop	{r3, r4, r5, pc}
 800172e:	bf00      	nop
 8001730:	200000a8 	.word	0x200000a8

08001734 <_malloc_r>:
 8001734:	b570      	push	{r4, r5, r6, lr}
 8001736:	1ccd      	adds	r5, r1, #3
 8001738:	f025 0503 	bic.w	r5, r5, #3
 800173c:	3508      	adds	r5, #8
 800173e:	2d0c      	cmp	r5, #12
 8001740:	bf38      	it	cc
 8001742:	250c      	movcc	r5, #12
 8001744:	2d00      	cmp	r5, #0
 8001746:	4606      	mov	r6, r0
 8001748:	db01      	blt.n	800174e <_malloc_r+0x1a>
 800174a:	42a9      	cmp	r1, r5
 800174c:	d903      	bls.n	8001756 <_malloc_r+0x22>
 800174e:	230c      	movs	r3, #12
 8001750:	6033      	str	r3, [r6, #0]
 8001752:	2000      	movs	r0, #0
 8001754:	bd70      	pop	{r4, r5, r6, pc}
 8001756:	f000 fbb9 	bl	8001ecc <__malloc_lock>
 800175a:	4a21      	ldr	r2, [pc, #132]	; (80017e0 <_malloc_r+0xac>)
 800175c:	6814      	ldr	r4, [r2, #0]
 800175e:	4621      	mov	r1, r4
 8001760:	b991      	cbnz	r1, 8001788 <_malloc_r+0x54>
 8001762:	4c20      	ldr	r4, [pc, #128]	; (80017e4 <_malloc_r+0xb0>)
 8001764:	6823      	ldr	r3, [r4, #0]
 8001766:	b91b      	cbnz	r3, 8001770 <_malloc_r+0x3c>
 8001768:	4630      	mov	r0, r6
 800176a:	f000 fb05 	bl	8001d78 <_sbrk_r>
 800176e:	6020      	str	r0, [r4, #0]
 8001770:	4629      	mov	r1, r5
 8001772:	4630      	mov	r0, r6
 8001774:	f000 fb00 	bl	8001d78 <_sbrk_r>
 8001778:	1c43      	adds	r3, r0, #1
 800177a:	d124      	bne.n	80017c6 <_malloc_r+0x92>
 800177c:	230c      	movs	r3, #12
 800177e:	6033      	str	r3, [r6, #0]
 8001780:	4630      	mov	r0, r6
 8001782:	f000 fba4 	bl	8001ece <__malloc_unlock>
 8001786:	e7e4      	b.n	8001752 <_malloc_r+0x1e>
 8001788:	680b      	ldr	r3, [r1, #0]
 800178a:	1b5b      	subs	r3, r3, r5
 800178c:	d418      	bmi.n	80017c0 <_malloc_r+0x8c>
 800178e:	2b0b      	cmp	r3, #11
 8001790:	d90f      	bls.n	80017b2 <_malloc_r+0x7e>
 8001792:	600b      	str	r3, [r1, #0]
 8001794:	50cd      	str	r5, [r1, r3]
 8001796:	18cc      	adds	r4, r1, r3
 8001798:	4630      	mov	r0, r6
 800179a:	f000 fb98 	bl	8001ece <__malloc_unlock>
 800179e:	f104 000b 	add.w	r0, r4, #11
 80017a2:	1d23      	adds	r3, r4, #4
 80017a4:	f020 0007 	bic.w	r0, r0, #7
 80017a8:	1ac3      	subs	r3, r0, r3
 80017aa:	d0d3      	beq.n	8001754 <_malloc_r+0x20>
 80017ac:	425a      	negs	r2, r3
 80017ae:	50e2      	str	r2, [r4, r3]
 80017b0:	e7d0      	b.n	8001754 <_malloc_r+0x20>
 80017b2:	428c      	cmp	r4, r1
 80017b4:	684b      	ldr	r3, [r1, #4]
 80017b6:	bf16      	itet	ne
 80017b8:	6063      	strne	r3, [r4, #4]
 80017ba:	6013      	streq	r3, [r2, #0]
 80017bc:	460c      	movne	r4, r1
 80017be:	e7eb      	b.n	8001798 <_malloc_r+0x64>
 80017c0:	460c      	mov	r4, r1
 80017c2:	6849      	ldr	r1, [r1, #4]
 80017c4:	e7cc      	b.n	8001760 <_malloc_r+0x2c>
 80017c6:	1cc4      	adds	r4, r0, #3
 80017c8:	f024 0403 	bic.w	r4, r4, #3
 80017cc:	42a0      	cmp	r0, r4
 80017ce:	d005      	beq.n	80017dc <_malloc_r+0xa8>
 80017d0:	1a21      	subs	r1, r4, r0
 80017d2:	4630      	mov	r0, r6
 80017d4:	f000 fad0 	bl	8001d78 <_sbrk_r>
 80017d8:	3001      	adds	r0, #1
 80017da:	d0cf      	beq.n	800177c <_malloc_r+0x48>
 80017dc:	6025      	str	r5, [r4, #0]
 80017de:	e7db      	b.n	8001798 <_malloc_r+0x64>
 80017e0:	200000a8 	.word	0x200000a8
 80017e4:	200000ac 	.word	0x200000ac

080017e8 <__sfputc_r>:
 80017e8:	6893      	ldr	r3, [r2, #8]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	b410      	push	{r4}
 80017f0:	6093      	str	r3, [r2, #8]
 80017f2:	da08      	bge.n	8001806 <__sfputc_r+0x1e>
 80017f4:	6994      	ldr	r4, [r2, #24]
 80017f6:	42a3      	cmp	r3, r4
 80017f8:	db01      	blt.n	80017fe <__sfputc_r+0x16>
 80017fa:	290a      	cmp	r1, #10
 80017fc:	d103      	bne.n	8001806 <__sfputc_r+0x1e>
 80017fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001802:	f7ff bcab 	b.w	800115c <__swbuf_r>
 8001806:	6813      	ldr	r3, [r2, #0]
 8001808:	1c58      	adds	r0, r3, #1
 800180a:	6010      	str	r0, [r2, #0]
 800180c:	7019      	strb	r1, [r3, #0]
 800180e:	4608      	mov	r0, r1
 8001810:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001814:	4770      	bx	lr

08001816 <__sfputs_r>:
 8001816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001818:	4606      	mov	r6, r0
 800181a:	460f      	mov	r7, r1
 800181c:	4614      	mov	r4, r2
 800181e:	18d5      	adds	r5, r2, r3
 8001820:	42ac      	cmp	r4, r5
 8001822:	d101      	bne.n	8001828 <__sfputs_r+0x12>
 8001824:	2000      	movs	r0, #0
 8001826:	e007      	b.n	8001838 <__sfputs_r+0x22>
 8001828:	463a      	mov	r2, r7
 800182a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800182e:	4630      	mov	r0, r6
 8001830:	f7ff ffda 	bl	80017e8 <__sfputc_r>
 8001834:	1c43      	adds	r3, r0, #1
 8001836:	d1f3      	bne.n	8001820 <__sfputs_r+0xa>
 8001838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800183c <_vfiprintf_r>:
 800183c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001840:	460c      	mov	r4, r1
 8001842:	b09d      	sub	sp, #116	; 0x74
 8001844:	4617      	mov	r7, r2
 8001846:	461d      	mov	r5, r3
 8001848:	4606      	mov	r6, r0
 800184a:	b118      	cbz	r0, 8001854 <_vfiprintf_r+0x18>
 800184c:	6983      	ldr	r3, [r0, #24]
 800184e:	b90b      	cbnz	r3, 8001854 <_vfiprintf_r+0x18>
 8001850:	f7ff fe34 	bl	80014bc <__sinit>
 8001854:	4b7c      	ldr	r3, [pc, #496]	; (8001a48 <_vfiprintf_r+0x20c>)
 8001856:	429c      	cmp	r4, r3
 8001858:	d158      	bne.n	800190c <_vfiprintf_r+0xd0>
 800185a:	6874      	ldr	r4, [r6, #4]
 800185c:	89a3      	ldrh	r3, [r4, #12]
 800185e:	0718      	lsls	r0, r3, #28
 8001860:	d55e      	bpl.n	8001920 <_vfiprintf_r+0xe4>
 8001862:	6923      	ldr	r3, [r4, #16]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d05b      	beq.n	8001920 <_vfiprintf_r+0xe4>
 8001868:	2300      	movs	r3, #0
 800186a:	9309      	str	r3, [sp, #36]	; 0x24
 800186c:	2320      	movs	r3, #32
 800186e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001872:	2330      	movs	r3, #48	; 0x30
 8001874:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001878:	9503      	str	r5, [sp, #12]
 800187a:	f04f 0b01 	mov.w	fp, #1
 800187e:	46b8      	mov	r8, r7
 8001880:	4645      	mov	r5, r8
 8001882:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001886:	b10b      	cbz	r3, 800188c <_vfiprintf_r+0x50>
 8001888:	2b25      	cmp	r3, #37	; 0x25
 800188a:	d154      	bne.n	8001936 <_vfiprintf_r+0xfa>
 800188c:	ebb8 0a07 	subs.w	sl, r8, r7
 8001890:	d00b      	beq.n	80018aa <_vfiprintf_r+0x6e>
 8001892:	4653      	mov	r3, sl
 8001894:	463a      	mov	r2, r7
 8001896:	4621      	mov	r1, r4
 8001898:	4630      	mov	r0, r6
 800189a:	f7ff ffbc 	bl	8001816 <__sfputs_r>
 800189e:	3001      	adds	r0, #1
 80018a0:	f000 80c2 	beq.w	8001a28 <_vfiprintf_r+0x1ec>
 80018a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80018a6:	4453      	add	r3, sl
 80018a8:	9309      	str	r3, [sp, #36]	; 0x24
 80018aa:	f898 3000 	ldrb.w	r3, [r8]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 80ba 	beq.w	8001a28 <_vfiprintf_r+0x1ec>
 80018b4:	2300      	movs	r3, #0
 80018b6:	f04f 32ff 	mov.w	r2, #4294967295
 80018ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80018be:	9304      	str	r3, [sp, #16]
 80018c0:	9307      	str	r3, [sp, #28]
 80018c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80018c6:	931a      	str	r3, [sp, #104]	; 0x68
 80018c8:	46a8      	mov	r8, r5
 80018ca:	2205      	movs	r2, #5
 80018cc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80018d0:	485e      	ldr	r0, [pc, #376]	; (8001a4c <_vfiprintf_r+0x210>)
 80018d2:	f7fe fc8d 	bl	80001f0 <memchr>
 80018d6:	9b04      	ldr	r3, [sp, #16]
 80018d8:	bb78      	cbnz	r0, 800193a <_vfiprintf_r+0xfe>
 80018da:	06d9      	lsls	r1, r3, #27
 80018dc:	bf44      	itt	mi
 80018de:	2220      	movmi	r2, #32
 80018e0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80018e4:	071a      	lsls	r2, r3, #28
 80018e6:	bf44      	itt	mi
 80018e8:	222b      	movmi	r2, #43	; 0x2b
 80018ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80018ee:	782a      	ldrb	r2, [r5, #0]
 80018f0:	2a2a      	cmp	r2, #42	; 0x2a
 80018f2:	d02a      	beq.n	800194a <_vfiprintf_r+0x10e>
 80018f4:	9a07      	ldr	r2, [sp, #28]
 80018f6:	46a8      	mov	r8, r5
 80018f8:	2000      	movs	r0, #0
 80018fa:	250a      	movs	r5, #10
 80018fc:	4641      	mov	r1, r8
 80018fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001902:	3b30      	subs	r3, #48	; 0x30
 8001904:	2b09      	cmp	r3, #9
 8001906:	d969      	bls.n	80019dc <_vfiprintf_r+0x1a0>
 8001908:	b360      	cbz	r0, 8001964 <_vfiprintf_r+0x128>
 800190a:	e024      	b.n	8001956 <_vfiprintf_r+0x11a>
 800190c:	4b50      	ldr	r3, [pc, #320]	; (8001a50 <_vfiprintf_r+0x214>)
 800190e:	429c      	cmp	r4, r3
 8001910:	d101      	bne.n	8001916 <_vfiprintf_r+0xda>
 8001912:	68b4      	ldr	r4, [r6, #8]
 8001914:	e7a2      	b.n	800185c <_vfiprintf_r+0x20>
 8001916:	4b4f      	ldr	r3, [pc, #316]	; (8001a54 <_vfiprintf_r+0x218>)
 8001918:	429c      	cmp	r4, r3
 800191a:	bf08      	it	eq
 800191c:	68f4      	ldreq	r4, [r6, #12]
 800191e:	e79d      	b.n	800185c <_vfiprintf_r+0x20>
 8001920:	4621      	mov	r1, r4
 8001922:	4630      	mov	r0, r6
 8001924:	f7ff fc6c 	bl	8001200 <__swsetup_r>
 8001928:	2800      	cmp	r0, #0
 800192a:	d09d      	beq.n	8001868 <_vfiprintf_r+0x2c>
 800192c:	f04f 30ff 	mov.w	r0, #4294967295
 8001930:	b01d      	add	sp, #116	; 0x74
 8001932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001936:	46a8      	mov	r8, r5
 8001938:	e7a2      	b.n	8001880 <_vfiprintf_r+0x44>
 800193a:	4a44      	ldr	r2, [pc, #272]	; (8001a4c <_vfiprintf_r+0x210>)
 800193c:	1a80      	subs	r0, r0, r2
 800193e:	fa0b f000 	lsl.w	r0, fp, r0
 8001942:	4318      	orrs	r0, r3
 8001944:	9004      	str	r0, [sp, #16]
 8001946:	4645      	mov	r5, r8
 8001948:	e7be      	b.n	80018c8 <_vfiprintf_r+0x8c>
 800194a:	9a03      	ldr	r2, [sp, #12]
 800194c:	1d11      	adds	r1, r2, #4
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	9103      	str	r1, [sp, #12]
 8001952:	2a00      	cmp	r2, #0
 8001954:	db01      	blt.n	800195a <_vfiprintf_r+0x11e>
 8001956:	9207      	str	r2, [sp, #28]
 8001958:	e004      	b.n	8001964 <_vfiprintf_r+0x128>
 800195a:	4252      	negs	r2, r2
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	9207      	str	r2, [sp, #28]
 8001962:	9304      	str	r3, [sp, #16]
 8001964:	f898 3000 	ldrb.w	r3, [r8]
 8001968:	2b2e      	cmp	r3, #46	; 0x2e
 800196a:	d10e      	bne.n	800198a <_vfiprintf_r+0x14e>
 800196c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001970:	2b2a      	cmp	r3, #42	; 0x2a
 8001972:	d138      	bne.n	80019e6 <_vfiprintf_r+0x1aa>
 8001974:	9b03      	ldr	r3, [sp, #12]
 8001976:	1d1a      	adds	r2, r3, #4
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	9203      	str	r2, [sp, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	bfb8      	it	lt
 8001980:	f04f 33ff 	movlt.w	r3, #4294967295
 8001984:	f108 0802 	add.w	r8, r8, #2
 8001988:	9305      	str	r3, [sp, #20]
 800198a:	4d33      	ldr	r5, [pc, #204]	; (8001a58 <_vfiprintf_r+0x21c>)
 800198c:	f898 1000 	ldrb.w	r1, [r8]
 8001990:	2203      	movs	r2, #3
 8001992:	4628      	mov	r0, r5
 8001994:	f7fe fc2c 	bl	80001f0 <memchr>
 8001998:	b140      	cbz	r0, 80019ac <_vfiprintf_r+0x170>
 800199a:	2340      	movs	r3, #64	; 0x40
 800199c:	1b40      	subs	r0, r0, r5
 800199e:	fa03 f000 	lsl.w	r0, r3, r0
 80019a2:	9b04      	ldr	r3, [sp, #16]
 80019a4:	4303      	orrs	r3, r0
 80019a6:	f108 0801 	add.w	r8, r8, #1
 80019aa:	9304      	str	r3, [sp, #16]
 80019ac:	f898 1000 	ldrb.w	r1, [r8]
 80019b0:	482a      	ldr	r0, [pc, #168]	; (8001a5c <_vfiprintf_r+0x220>)
 80019b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80019b6:	2206      	movs	r2, #6
 80019b8:	f108 0701 	add.w	r7, r8, #1
 80019bc:	f7fe fc18 	bl	80001f0 <memchr>
 80019c0:	2800      	cmp	r0, #0
 80019c2:	d037      	beq.n	8001a34 <_vfiprintf_r+0x1f8>
 80019c4:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <_vfiprintf_r+0x224>)
 80019c6:	bb1b      	cbnz	r3, 8001a10 <_vfiprintf_r+0x1d4>
 80019c8:	9b03      	ldr	r3, [sp, #12]
 80019ca:	3307      	adds	r3, #7
 80019cc:	f023 0307 	bic.w	r3, r3, #7
 80019d0:	3308      	adds	r3, #8
 80019d2:	9303      	str	r3, [sp, #12]
 80019d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80019d6:	444b      	add	r3, r9
 80019d8:	9309      	str	r3, [sp, #36]	; 0x24
 80019da:	e750      	b.n	800187e <_vfiprintf_r+0x42>
 80019dc:	fb05 3202 	mla	r2, r5, r2, r3
 80019e0:	2001      	movs	r0, #1
 80019e2:	4688      	mov	r8, r1
 80019e4:	e78a      	b.n	80018fc <_vfiprintf_r+0xc0>
 80019e6:	2300      	movs	r3, #0
 80019e8:	f108 0801 	add.w	r8, r8, #1
 80019ec:	9305      	str	r3, [sp, #20]
 80019ee:	4619      	mov	r1, r3
 80019f0:	250a      	movs	r5, #10
 80019f2:	4640      	mov	r0, r8
 80019f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80019f8:	3a30      	subs	r2, #48	; 0x30
 80019fa:	2a09      	cmp	r2, #9
 80019fc:	d903      	bls.n	8001a06 <_vfiprintf_r+0x1ca>
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0c3      	beq.n	800198a <_vfiprintf_r+0x14e>
 8001a02:	9105      	str	r1, [sp, #20]
 8001a04:	e7c1      	b.n	800198a <_vfiprintf_r+0x14e>
 8001a06:	fb05 2101 	mla	r1, r5, r1, r2
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	4680      	mov	r8, r0
 8001a0e:	e7f0      	b.n	80019f2 <_vfiprintf_r+0x1b6>
 8001a10:	ab03      	add	r3, sp, #12
 8001a12:	9300      	str	r3, [sp, #0]
 8001a14:	4622      	mov	r2, r4
 8001a16:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <_vfiprintf_r+0x228>)
 8001a18:	a904      	add	r1, sp, #16
 8001a1a:	4630      	mov	r0, r6
 8001a1c:	f3af 8000 	nop.w
 8001a20:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001a24:	4681      	mov	r9, r0
 8001a26:	d1d5      	bne.n	80019d4 <_vfiprintf_r+0x198>
 8001a28:	89a3      	ldrh	r3, [r4, #12]
 8001a2a:	065b      	lsls	r3, r3, #25
 8001a2c:	f53f af7e 	bmi.w	800192c <_vfiprintf_r+0xf0>
 8001a30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001a32:	e77d      	b.n	8001930 <_vfiprintf_r+0xf4>
 8001a34:	ab03      	add	r3, sp, #12
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	4622      	mov	r2, r4
 8001a3a:	4b0a      	ldr	r3, [pc, #40]	; (8001a64 <_vfiprintf_r+0x228>)
 8001a3c:	a904      	add	r1, sp, #16
 8001a3e:	4630      	mov	r0, r6
 8001a40:	f000 f888 	bl	8001b54 <_printf_i>
 8001a44:	e7ec      	b.n	8001a20 <_vfiprintf_r+0x1e4>
 8001a46:	bf00      	nop
 8001a48:	08001fa8 	.word	0x08001fa8
 8001a4c:	08001fe8 	.word	0x08001fe8
 8001a50:	08001fc8 	.word	0x08001fc8
 8001a54:	08001f88 	.word	0x08001f88
 8001a58:	08001fee 	.word	0x08001fee
 8001a5c:	08001ff2 	.word	0x08001ff2
 8001a60:	00000000 	.word	0x00000000
 8001a64:	08001817 	.word	0x08001817

08001a68 <_printf_common>:
 8001a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a6c:	4691      	mov	r9, r2
 8001a6e:	461f      	mov	r7, r3
 8001a70:	688a      	ldr	r2, [r1, #8]
 8001a72:	690b      	ldr	r3, [r1, #16]
 8001a74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	bfb8      	it	lt
 8001a7c:	4613      	movlt	r3, r2
 8001a7e:	f8c9 3000 	str.w	r3, [r9]
 8001a82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001a86:	4606      	mov	r6, r0
 8001a88:	460c      	mov	r4, r1
 8001a8a:	b112      	cbz	r2, 8001a92 <_printf_common+0x2a>
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	f8c9 3000 	str.w	r3, [r9]
 8001a92:	6823      	ldr	r3, [r4, #0]
 8001a94:	0699      	lsls	r1, r3, #26
 8001a96:	bf42      	ittt	mi
 8001a98:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001a9c:	3302      	addmi	r3, #2
 8001a9e:	f8c9 3000 	strmi.w	r3, [r9]
 8001aa2:	6825      	ldr	r5, [r4, #0]
 8001aa4:	f015 0506 	ands.w	r5, r5, #6
 8001aa8:	d107      	bne.n	8001aba <_printf_common+0x52>
 8001aaa:	f104 0a19 	add.w	sl, r4, #25
 8001aae:	68e3      	ldr	r3, [r4, #12]
 8001ab0:	f8d9 2000 	ldr.w	r2, [r9]
 8001ab4:	1a9b      	subs	r3, r3, r2
 8001ab6:	42ab      	cmp	r3, r5
 8001ab8:	dc28      	bgt.n	8001b0c <_printf_common+0xa4>
 8001aba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001abe:	6822      	ldr	r2, [r4, #0]
 8001ac0:	3300      	adds	r3, #0
 8001ac2:	bf18      	it	ne
 8001ac4:	2301      	movne	r3, #1
 8001ac6:	0692      	lsls	r2, r2, #26
 8001ac8:	d42d      	bmi.n	8001b26 <_printf_common+0xbe>
 8001aca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ace:	4639      	mov	r1, r7
 8001ad0:	4630      	mov	r0, r6
 8001ad2:	47c0      	blx	r8
 8001ad4:	3001      	adds	r0, #1
 8001ad6:	d020      	beq.n	8001b1a <_printf_common+0xb2>
 8001ad8:	6823      	ldr	r3, [r4, #0]
 8001ada:	68e5      	ldr	r5, [r4, #12]
 8001adc:	f8d9 2000 	ldr.w	r2, [r9]
 8001ae0:	f003 0306 	and.w	r3, r3, #6
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	bf08      	it	eq
 8001ae8:	1aad      	subeq	r5, r5, r2
 8001aea:	68a3      	ldr	r3, [r4, #8]
 8001aec:	6922      	ldr	r2, [r4, #16]
 8001aee:	bf0c      	ite	eq
 8001af0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001af4:	2500      	movne	r5, #0
 8001af6:	4293      	cmp	r3, r2
 8001af8:	bfc4      	itt	gt
 8001afa:	1a9b      	subgt	r3, r3, r2
 8001afc:	18ed      	addgt	r5, r5, r3
 8001afe:	f04f 0900 	mov.w	r9, #0
 8001b02:	341a      	adds	r4, #26
 8001b04:	454d      	cmp	r5, r9
 8001b06:	d11a      	bne.n	8001b3e <_printf_common+0xd6>
 8001b08:	2000      	movs	r0, #0
 8001b0a:	e008      	b.n	8001b1e <_printf_common+0xb6>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	4652      	mov	r2, sl
 8001b10:	4639      	mov	r1, r7
 8001b12:	4630      	mov	r0, r6
 8001b14:	47c0      	blx	r8
 8001b16:	3001      	adds	r0, #1
 8001b18:	d103      	bne.n	8001b22 <_printf_common+0xba>
 8001b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b22:	3501      	adds	r5, #1
 8001b24:	e7c3      	b.n	8001aae <_printf_common+0x46>
 8001b26:	18e1      	adds	r1, r4, r3
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	2030      	movs	r0, #48	; 0x30
 8001b2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001b30:	4422      	add	r2, r4
 8001b32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001b36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001b3a:	3302      	adds	r3, #2
 8001b3c:	e7c5      	b.n	8001aca <_printf_common+0x62>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	4622      	mov	r2, r4
 8001b42:	4639      	mov	r1, r7
 8001b44:	4630      	mov	r0, r6
 8001b46:	47c0      	blx	r8
 8001b48:	3001      	adds	r0, #1
 8001b4a:	d0e6      	beq.n	8001b1a <_printf_common+0xb2>
 8001b4c:	f109 0901 	add.w	r9, r9, #1
 8001b50:	e7d8      	b.n	8001b04 <_printf_common+0x9c>
	...

08001b54 <_printf_i>:
 8001b54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b58:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001b5c:	460c      	mov	r4, r1
 8001b5e:	7e09      	ldrb	r1, [r1, #24]
 8001b60:	b085      	sub	sp, #20
 8001b62:	296e      	cmp	r1, #110	; 0x6e
 8001b64:	4617      	mov	r7, r2
 8001b66:	4606      	mov	r6, r0
 8001b68:	4698      	mov	r8, r3
 8001b6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001b6c:	f000 80b3 	beq.w	8001cd6 <_printf_i+0x182>
 8001b70:	d822      	bhi.n	8001bb8 <_printf_i+0x64>
 8001b72:	2963      	cmp	r1, #99	; 0x63
 8001b74:	d036      	beq.n	8001be4 <_printf_i+0x90>
 8001b76:	d80a      	bhi.n	8001b8e <_printf_i+0x3a>
 8001b78:	2900      	cmp	r1, #0
 8001b7a:	f000 80b9 	beq.w	8001cf0 <_printf_i+0x19c>
 8001b7e:	2958      	cmp	r1, #88	; 0x58
 8001b80:	f000 8083 	beq.w	8001c8a <_printf_i+0x136>
 8001b84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001b88:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001b8c:	e032      	b.n	8001bf4 <_printf_i+0xa0>
 8001b8e:	2964      	cmp	r1, #100	; 0x64
 8001b90:	d001      	beq.n	8001b96 <_printf_i+0x42>
 8001b92:	2969      	cmp	r1, #105	; 0x69
 8001b94:	d1f6      	bne.n	8001b84 <_printf_i+0x30>
 8001b96:	6820      	ldr	r0, [r4, #0]
 8001b98:	6813      	ldr	r3, [r2, #0]
 8001b9a:	0605      	lsls	r5, r0, #24
 8001b9c:	f103 0104 	add.w	r1, r3, #4
 8001ba0:	d52a      	bpl.n	8001bf8 <_printf_i+0xa4>
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	6011      	str	r1, [r2, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	da03      	bge.n	8001bb2 <_printf_i+0x5e>
 8001baa:	222d      	movs	r2, #45	; 0x2d
 8001bac:	425b      	negs	r3, r3
 8001bae:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001bb2:	486f      	ldr	r0, [pc, #444]	; (8001d70 <_printf_i+0x21c>)
 8001bb4:	220a      	movs	r2, #10
 8001bb6:	e039      	b.n	8001c2c <_printf_i+0xd8>
 8001bb8:	2973      	cmp	r1, #115	; 0x73
 8001bba:	f000 809d 	beq.w	8001cf8 <_printf_i+0x1a4>
 8001bbe:	d808      	bhi.n	8001bd2 <_printf_i+0x7e>
 8001bc0:	296f      	cmp	r1, #111	; 0x6f
 8001bc2:	d020      	beq.n	8001c06 <_printf_i+0xb2>
 8001bc4:	2970      	cmp	r1, #112	; 0x70
 8001bc6:	d1dd      	bne.n	8001b84 <_printf_i+0x30>
 8001bc8:	6823      	ldr	r3, [r4, #0]
 8001bca:	f043 0320 	orr.w	r3, r3, #32
 8001bce:	6023      	str	r3, [r4, #0]
 8001bd0:	e003      	b.n	8001bda <_printf_i+0x86>
 8001bd2:	2975      	cmp	r1, #117	; 0x75
 8001bd4:	d017      	beq.n	8001c06 <_printf_i+0xb2>
 8001bd6:	2978      	cmp	r1, #120	; 0x78
 8001bd8:	d1d4      	bne.n	8001b84 <_printf_i+0x30>
 8001bda:	2378      	movs	r3, #120	; 0x78
 8001bdc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001be0:	4864      	ldr	r0, [pc, #400]	; (8001d74 <_printf_i+0x220>)
 8001be2:	e055      	b.n	8001c90 <_printf_i+0x13c>
 8001be4:	6813      	ldr	r3, [r2, #0]
 8001be6:	1d19      	adds	r1, r3, #4
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	6011      	str	r1, [r2, #0]
 8001bec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001bf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e08c      	b.n	8001d12 <_printf_i+0x1be>
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6011      	str	r1, [r2, #0]
 8001bfc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001c00:	bf18      	it	ne
 8001c02:	b21b      	sxthne	r3, r3
 8001c04:	e7cf      	b.n	8001ba6 <_printf_i+0x52>
 8001c06:	6813      	ldr	r3, [r2, #0]
 8001c08:	6825      	ldr	r5, [r4, #0]
 8001c0a:	1d18      	adds	r0, r3, #4
 8001c0c:	6010      	str	r0, [r2, #0]
 8001c0e:	0628      	lsls	r0, r5, #24
 8001c10:	d501      	bpl.n	8001c16 <_printf_i+0xc2>
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	e002      	b.n	8001c1c <_printf_i+0xc8>
 8001c16:	0668      	lsls	r0, r5, #25
 8001c18:	d5fb      	bpl.n	8001c12 <_printf_i+0xbe>
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	4854      	ldr	r0, [pc, #336]	; (8001d70 <_printf_i+0x21c>)
 8001c1e:	296f      	cmp	r1, #111	; 0x6f
 8001c20:	bf14      	ite	ne
 8001c22:	220a      	movne	r2, #10
 8001c24:	2208      	moveq	r2, #8
 8001c26:	2100      	movs	r1, #0
 8001c28:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001c2c:	6865      	ldr	r5, [r4, #4]
 8001c2e:	60a5      	str	r5, [r4, #8]
 8001c30:	2d00      	cmp	r5, #0
 8001c32:	f2c0 8095 	blt.w	8001d60 <_printf_i+0x20c>
 8001c36:	6821      	ldr	r1, [r4, #0]
 8001c38:	f021 0104 	bic.w	r1, r1, #4
 8001c3c:	6021      	str	r1, [r4, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d13d      	bne.n	8001cbe <_printf_i+0x16a>
 8001c42:	2d00      	cmp	r5, #0
 8001c44:	f040 808e 	bne.w	8001d64 <_printf_i+0x210>
 8001c48:	4665      	mov	r5, ip
 8001c4a:	2a08      	cmp	r2, #8
 8001c4c:	d10b      	bne.n	8001c66 <_printf_i+0x112>
 8001c4e:	6823      	ldr	r3, [r4, #0]
 8001c50:	07db      	lsls	r3, r3, #31
 8001c52:	d508      	bpl.n	8001c66 <_printf_i+0x112>
 8001c54:	6923      	ldr	r3, [r4, #16]
 8001c56:	6862      	ldr	r2, [r4, #4]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	bfde      	ittt	le
 8001c5c:	2330      	movle	r3, #48	; 0x30
 8001c5e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001c62:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001c66:	ebac 0305 	sub.w	r3, ip, r5
 8001c6a:	6123      	str	r3, [r4, #16]
 8001c6c:	f8cd 8000 	str.w	r8, [sp]
 8001c70:	463b      	mov	r3, r7
 8001c72:	aa03      	add	r2, sp, #12
 8001c74:	4621      	mov	r1, r4
 8001c76:	4630      	mov	r0, r6
 8001c78:	f7ff fef6 	bl	8001a68 <_printf_common>
 8001c7c:	3001      	adds	r0, #1
 8001c7e:	d14d      	bne.n	8001d1c <_printf_i+0x1c8>
 8001c80:	f04f 30ff 	mov.w	r0, #4294967295
 8001c84:	b005      	add	sp, #20
 8001c86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c8a:	4839      	ldr	r0, [pc, #228]	; (8001d70 <_printf_i+0x21c>)
 8001c8c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001c90:	6813      	ldr	r3, [r2, #0]
 8001c92:	6821      	ldr	r1, [r4, #0]
 8001c94:	1d1d      	adds	r5, r3, #4
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	6015      	str	r5, [r2, #0]
 8001c9a:	060a      	lsls	r2, r1, #24
 8001c9c:	d50b      	bpl.n	8001cb6 <_printf_i+0x162>
 8001c9e:	07ca      	lsls	r2, r1, #31
 8001ca0:	bf44      	itt	mi
 8001ca2:	f041 0120 	orrmi.w	r1, r1, #32
 8001ca6:	6021      	strmi	r1, [r4, #0]
 8001ca8:	b91b      	cbnz	r3, 8001cb2 <_printf_i+0x15e>
 8001caa:	6822      	ldr	r2, [r4, #0]
 8001cac:	f022 0220 	bic.w	r2, r2, #32
 8001cb0:	6022      	str	r2, [r4, #0]
 8001cb2:	2210      	movs	r2, #16
 8001cb4:	e7b7      	b.n	8001c26 <_printf_i+0xd2>
 8001cb6:	064d      	lsls	r5, r1, #25
 8001cb8:	bf48      	it	mi
 8001cba:	b29b      	uxthmi	r3, r3
 8001cbc:	e7ef      	b.n	8001c9e <_printf_i+0x14a>
 8001cbe:	4665      	mov	r5, ip
 8001cc0:	fbb3 f1f2 	udiv	r1, r3, r2
 8001cc4:	fb02 3311 	mls	r3, r2, r1, r3
 8001cc8:	5cc3      	ldrb	r3, [r0, r3]
 8001cca:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001cce:	460b      	mov	r3, r1
 8001cd0:	2900      	cmp	r1, #0
 8001cd2:	d1f5      	bne.n	8001cc0 <_printf_i+0x16c>
 8001cd4:	e7b9      	b.n	8001c4a <_printf_i+0xf6>
 8001cd6:	6813      	ldr	r3, [r2, #0]
 8001cd8:	6825      	ldr	r5, [r4, #0]
 8001cda:	6961      	ldr	r1, [r4, #20]
 8001cdc:	1d18      	adds	r0, r3, #4
 8001cde:	6010      	str	r0, [r2, #0]
 8001ce0:	0628      	lsls	r0, r5, #24
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	d501      	bpl.n	8001cea <_printf_i+0x196>
 8001ce6:	6019      	str	r1, [r3, #0]
 8001ce8:	e002      	b.n	8001cf0 <_printf_i+0x19c>
 8001cea:	066a      	lsls	r2, r5, #25
 8001cec:	d5fb      	bpl.n	8001ce6 <_printf_i+0x192>
 8001cee:	8019      	strh	r1, [r3, #0]
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	6123      	str	r3, [r4, #16]
 8001cf4:	4665      	mov	r5, ip
 8001cf6:	e7b9      	b.n	8001c6c <_printf_i+0x118>
 8001cf8:	6813      	ldr	r3, [r2, #0]
 8001cfa:	1d19      	adds	r1, r3, #4
 8001cfc:	6011      	str	r1, [r2, #0]
 8001cfe:	681d      	ldr	r5, [r3, #0]
 8001d00:	6862      	ldr	r2, [r4, #4]
 8001d02:	2100      	movs	r1, #0
 8001d04:	4628      	mov	r0, r5
 8001d06:	f7fe fa73 	bl	80001f0 <memchr>
 8001d0a:	b108      	cbz	r0, 8001d10 <_printf_i+0x1bc>
 8001d0c:	1b40      	subs	r0, r0, r5
 8001d0e:	6060      	str	r0, [r4, #4]
 8001d10:	6863      	ldr	r3, [r4, #4]
 8001d12:	6123      	str	r3, [r4, #16]
 8001d14:	2300      	movs	r3, #0
 8001d16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001d1a:	e7a7      	b.n	8001c6c <_printf_i+0x118>
 8001d1c:	6923      	ldr	r3, [r4, #16]
 8001d1e:	462a      	mov	r2, r5
 8001d20:	4639      	mov	r1, r7
 8001d22:	4630      	mov	r0, r6
 8001d24:	47c0      	blx	r8
 8001d26:	3001      	adds	r0, #1
 8001d28:	d0aa      	beq.n	8001c80 <_printf_i+0x12c>
 8001d2a:	6823      	ldr	r3, [r4, #0]
 8001d2c:	079b      	lsls	r3, r3, #30
 8001d2e:	d413      	bmi.n	8001d58 <_printf_i+0x204>
 8001d30:	68e0      	ldr	r0, [r4, #12]
 8001d32:	9b03      	ldr	r3, [sp, #12]
 8001d34:	4298      	cmp	r0, r3
 8001d36:	bfb8      	it	lt
 8001d38:	4618      	movlt	r0, r3
 8001d3a:	e7a3      	b.n	8001c84 <_printf_i+0x130>
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	464a      	mov	r2, r9
 8001d40:	4639      	mov	r1, r7
 8001d42:	4630      	mov	r0, r6
 8001d44:	47c0      	blx	r8
 8001d46:	3001      	adds	r0, #1
 8001d48:	d09a      	beq.n	8001c80 <_printf_i+0x12c>
 8001d4a:	3501      	adds	r5, #1
 8001d4c:	68e3      	ldr	r3, [r4, #12]
 8001d4e:	9a03      	ldr	r2, [sp, #12]
 8001d50:	1a9b      	subs	r3, r3, r2
 8001d52:	42ab      	cmp	r3, r5
 8001d54:	dcf2      	bgt.n	8001d3c <_printf_i+0x1e8>
 8001d56:	e7eb      	b.n	8001d30 <_printf_i+0x1dc>
 8001d58:	2500      	movs	r5, #0
 8001d5a:	f104 0919 	add.w	r9, r4, #25
 8001d5e:	e7f5      	b.n	8001d4c <_printf_i+0x1f8>
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1ac      	bne.n	8001cbe <_printf_i+0x16a>
 8001d64:	7803      	ldrb	r3, [r0, #0]
 8001d66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d6a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001d6e:	e76c      	b.n	8001c4a <_printf_i+0xf6>
 8001d70:	08001ff9 	.word	0x08001ff9
 8001d74:	0800200a 	.word	0x0800200a

08001d78 <_sbrk_r>:
 8001d78:	b538      	push	{r3, r4, r5, lr}
 8001d7a:	4c06      	ldr	r4, [pc, #24]	; (8001d94 <_sbrk_r+0x1c>)
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	4605      	mov	r5, r0
 8001d80:	4608      	mov	r0, r1
 8001d82:	6023      	str	r3, [r4, #0]
 8001d84:	f7ff f8dc 	bl	8000f40 <_sbrk>
 8001d88:	1c43      	adds	r3, r0, #1
 8001d8a:	d102      	bne.n	8001d92 <_sbrk_r+0x1a>
 8001d8c:	6823      	ldr	r3, [r4, #0]
 8001d8e:	b103      	cbz	r3, 8001d92 <_sbrk_r+0x1a>
 8001d90:	602b      	str	r3, [r5, #0]
 8001d92:	bd38      	pop	{r3, r4, r5, pc}
 8001d94:	200004d4 	.word	0x200004d4

08001d98 <__sread>:
 8001d98:	b510      	push	{r4, lr}
 8001d9a:	460c      	mov	r4, r1
 8001d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001da0:	f000 f896 	bl	8001ed0 <_read_r>
 8001da4:	2800      	cmp	r0, #0
 8001da6:	bfab      	itete	ge
 8001da8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001daa:	89a3      	ldrhlt	r3, [r4, #12]
 8001dac:	181b      	addge	r3, r3, r0
 8001dae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001db2:	bfac      	ite	ge
 8001db4:	6563      	strge	r3, [r4, #84]	; 0x54
 8001db6:	81a3      	strhlt	r3, [r4, #12]
 8001db8:	bd10      	pop	{r4, pc}

08001dba <__swrite>:
 8001dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001dbe:	461f      	mov	r7, r3
 8001dc0:	898b      	ldrh	r3, [r1, #12]
 8001dc2:	05db      	lsls	r3, r3, #23
 8001dc4:	4605      	mov	r5, r0
 8001dc6:	460c      	mov	r4, r1
 8001dc8:	4616      	mov	r6, r2
 8001dca:	d505      	bpl.n	8001dd8 <__swrite+0x1e>
 8001dcc:	2302      	movs	r3, #2
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dd4:	f000 f868 	bl	8001ea8 <_lseek_r>
 8001dd8:	89a3      	ldrh	r3, [r4, #12]
 8001dda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001dde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001de2:	81a3      	strh	r3, [r4, #12]
 8001de4:	4632      	mov	r2, r6
 8001de6:	463b      	mov	r3, r7
 8001de8:	4628      	mov	r0, r5
 8001dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001dee:	f000 b817 	b.w	8001e20 <_write_r>

08001df2 <__sseek>:
 8001df2:	b510      	push	{r4, lr}
 8001df4:	460c      	mov	r4, r1
 8001df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dfa:	f000 f855 	bl	8001ea8 <_lseek_r>
 8001dfe:	1c43      	adds	r3, r0, #1
 8001e00:	89a3      	ldrh	r3, [r4, #12]
 8001e02:	bf15      	itete	ne
 8001e04:	6560      	strne	r0, [r4, #84]	; 0x54
 8001e06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001e0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001e0e:	81a3      	strheq	r3, [r4, #12]
 8001e10:	bf18      	it	ne
 8001e12:	81a3      	strhne	r3, [r4, #12]
 8001e14:	bd10      	pop	{r4, pc}

08001e16 <__sclose>:
 8001e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e1a:	f000 b813 	b.w	8001e44 <_close_r>
	...

08001e20 <_write_r>:
 8001e20:	b538      	push	{r3, r4, r5, lr}
 8001e22:	4c07      	ldr	r4, [pc, #28]	; (8001e40 <_write_r+0x20>)
 8001e24:	4605      	mov	r5, r0
 8001e26:	4608      	mov	r0, r1
 8001e28:	4611      	mov	r1, r2
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	6022      	str	r2, [r4, #0]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	f7ff f836 	bl	8000ea0 <_write>
 8001e34:	1c43      	adds	r3, r0, #1
 8001e36:	d102      	bne.n	8001e3e <_write_r+0x1e>
 8001e38:	6823      	ldr	r3, [r4, #0]
 8001e3a:	b103      	cbz	r3, 8001e3e <_write_r+0x1e>
 8001e3c:	602b      	str	r3, [r5, #0]
 8001e3e:	bd38      	pop	{r3, r4, r5, pc}
 8001e40:	200004d4 	.word	0x200004d4

08001e44 <_close_r>:
 8001e44:	b538      	push	{r3, r4, r5, lr}
 8001e46:	4c06      	ldr	r4, [pc, #24]	; (8001e60 <_close_r+0x1c>)
 8001e48:	2300      	movs	r3, #0
 8001e4a:	4605      	mov	r5, r0
 8001e4c:	4608      	mov	r0, r1
 8001e4e:	6023      	str	r3, [r4, #0]
 8001e50:	f7ff f842 	bl	8000ed8 <_close>
 8001e54:	1c43      	adds	r3, r0, #1
 8001e56:	d102      	bne.n	8001e5e <_close_r+0x1a>
 8001e58:	6823      	ldr	r3, [r4, #0]
 8001e5a:	b103      	cbz	r3, 8001e5e <_close_r+0x1a>
 8001e5c:	602b      	str	r3, [r5, #0]
 8001e5e:	bd38      	pop	{r3, r4, r5, pc}
 8001e60:	200004d4 	.word	0x200004d4

08001e64 <_fstat_r>:
 8001e64:	b538      	push	{r3, r4, r5, lr}
 8001e66:	4c07      	ldr	r4, [pc, #28]	; (8001e84 <_fstat_r+0x20>)
 8001e68:	2300      	movs	r3, #0
 8001e6a:	4605      	mov	r5, r0
 8001e6c:	4608      	mov	r0, r1
 8001e6e:	4611      	mov	r1, r2
 8001e70:	6023      	str	r3, [r4, #0]
 8001e72:	f7ff f83d 	bl	8000ef0 <_fstat>
 8001e76:	1c43      	adds	r3, r0, #1
 8001e78:	d102      	bne.n	8001e80 <_fstat_r+0x1c>
 8001e7a:	6823      	ldr	r3, [r4, #0]
 8001e7c:	b103      	cbz	r3, 8001e80 <_fstat_r+0x1c>
 8001e7e:	602b      	str	r3, [r5, #0]
 8001e80:	bd38      	pop	{r3, r4, r5, pc}
 8001e82:	bf00      	nop
 8001e84:	200004d4 	.word	0x200004d4

08001e88 <_isatty_r>:
 8001e88:	b538      	push	{r3, r4, r5, lr}
 8001e8a:	4c06      	ldr	r4, [pc, #24]	; (8001ea4 <_isatty_r+0x1c>)
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	4605      	mov	r5, r0
 8001e90:	4608      	mov	r0, r1
 8001e92:	6023      	str	r3, [r4, #0]
 8001e94:	f7ff f83c 	bl	8000f10 <_isatty>
 8001e98:	1c43      	adds	r3, r0, #1
 8001e9a:	d102      	bne.n	8001ea2 <_isatty_r+0x1a>
 8001e9c:	6823      	ldr	r3, [r4, #0]
 8001e9e:	b103      	cbz	r3, 8001ea2 <_isatty_r+0x1a>
 8001ea0:	602b      	str	r3, [r5, #0]
 8001ea2:	bd38      	pop	{r3, r4, r5, pc}
 8001ea4:	200004d4 	.word	0x200004d4

08001ea8 <_lseek_r>:
 8001ea8:	b538      	push	{r3, r4, r5, lr}
 8001eaa:	4c07      	ldr	r4, [pc, #28]	; (8001ec8 <_lseek_r+0x20>)
 8001eac:	4605      	mov	r5, r0
 8001eae:	4608      	mov	r0, r1
 8001eb0:	4611      	mov	r1, r2
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	6022      	str	r2, [r4, #0]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	f7ff f835 	bl	8000f26 <_lseek>
 8001ebc:	1c43      	adds	r3, r0, #1
 8001ebe:	d102      	bne.n	8001ec6 <_lseek_r+0x1e>
 8001ec0:	6823      	ldr	r3, [r4, #0]
 8001ec2:	b103      	cbz	r3, 8001ec6 <_lseek_r+0x1e>
 8001ec4:	602b      	str	r3, [r5, #0]
 8001ec6:	bd38      	pop	{r3, r4, r5, pc}
 8001ec8:	200004d4 	.word	0x200004d4

08001ecc <__malloc_lock>:
 8001ecc:	4770      	bx	lr

08001ece <__malloc_unlock>:
 8001ece:	4770      	bx	lr

08001ed0 <_read_r>:
 8001ed0:	b538      	push	{r3, r4, r5, lr}
 8001ed2:	4c07      	ldr	r4, [pc, #28]	; (8001ef0 <_read_r+0x20>)
 8001ed4:	4605      	mov	r5, r0
 8001ed6:	4608      	mov	r0, r1
 8001ed8:	4611      	mov	r1, r2
 8001eda:	2200      	movs	r2, #0
 8001edc:	6022      	str	r2, [r4, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	f7fe ffc1 	bl	8000e66 <_read>
 8001ee4:	1c43      	adds	r3, r0, #1
 8001ee6:	d102      	bne.n	8001eee <_read_r+0x1e>
 8001ee8:	6823      	ldr	r3, [r4, #0]
 8001eea:	b103      	cbz	r3, 8001eee <_read_r+0x1e>
 8001eec:	602b      	str	r3, [r5, #0]
 8001eee:	bd38      	pop	{r3, r4, r5, pc}
 8001ef0:	200004d4 	.word	0x200004d4

08001ef4 <_init>:
 8001ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ef6:	bf00      	nop
 8001ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001efa:	bc08      	pop	{r3}
 8001efc:	469e      	mov	lr, r3
 8001efe:	4770      	bx	lr

08001f00 <_fini>:
 8001f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f02:	bf00      	nop
 8001f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f06:	bc08      	pop	{r3}
 8001f08:	469e      	mov	lr, r3
 8001f0a:	4770      	bx	lr
